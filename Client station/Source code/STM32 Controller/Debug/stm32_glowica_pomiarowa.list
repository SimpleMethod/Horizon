
stm32_glowica_pomiarowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003650  08003650  00013650  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08003704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002cc  20000068  0800376c  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000334  0800376c  00020334  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c977  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003591  00000000  00000000  0003ca07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bfdf  00000000  00000000  0003ff98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000da0  00000000  00000000  0004bf78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013a0  00000000  00000000  0004cd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000083ab  00000000  00000000  0004e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004ad7  00000000  00000000  00056463  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005af3a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002da8  00000000  00000000  0005afb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003638 	.word	0x08003638

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003638 	.word	0x08003638

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800042c:	b510      	push	{r4, lr}
 800042e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000430:	f001 f9f0 	bl	8001814 <HAL_RCC_GetHCLKFreq>
 8000434:	21fa      	movs	r1, #250	; 0xfa
 8000436:	0089      	lsls	r1, r1, #2
 8000438:	f7ff fe82 	bl	8000140 <__udivsi3>
 800043c:	f000 f9fc 	bl	8000838 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000440:	2001      	movs	r0, #1
 8000442:	2200      	movs	r2, #0
 8000444:	0021      	movs	r1, r4
 8000446:	4240      	negs	r0, r0
 8000448:	f000 f9bc 	bl	80007c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800044c:	2000      	movs	r0, #0
 800044e:	bd10      	pop	{r4, pc}

08000450 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000450:	2310      	movs	r3, #16
 8000452:	4a06      	ldr	r2, [pc, #24]	; (800046c <HAL_Init+0x1c>)
{
 8000454:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000456:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000458:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800045a:	430b      	orrs	r3, r1
 800045c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800045e:	f7ff ffe5 	bl	800042c <HAL_InitTick>
  HAL_MspInit();
 8000462:	f002 fa83 	bl	800296c <HAL_MspInit>
}
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40022000 	.word	0x40022000

08000470 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000470:	4a02      	ldr	r2, [pc, #8]	; (800047c <HAL_IncTick+0xc>)
 8000472:	6813      	ldr	r3, [r2, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000090 	.word	0x20000090

08000480 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <HAL_GetTick+0x8>)
 8000482:	6818      	ldr	r0, [r3, #0]
}
 8000484:	4770      	bx	lr
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000090 	.word	0x20000090

0800048c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000490:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000492:	2c00      	cmp	r4, #0
 8000494:	d072      	beq.n	800057c <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000496:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000498:	2b00      	cmp	r3, #0
 800049a:	d106      	bne.n	80004aa <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800049c:	0022      	movs	r2, r4
 800049e:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80004a0:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80004a2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80004a4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80004a6:	f002 fa7f 	bl	80029a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004ac:	06db      	lsls	r3, r3, #27
 80004ae:	d500      	bpl.n	80004b2 <HAL_ADC_Init+0x26>
 80004b0:	e079      	b.n	80005a6 <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004b2:	2204      	movs	r2, #4
 80004b4:	6823      	ldr	r3, [r4, #0]
 80004b6:	6898      	ldr	r0, [r3, #8]
 80004b8:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80004ba:	d000      	beq.n	80004be <HAL_ADC_Init+0x32>
 80004bc:	e073      	b.n	80005a6 <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004be:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80004c0:	4942      	ldr	r1, [pc, #264]	; (80005cc <HAL_ADC_Init+0x140>)
 80004c2:	4011      	ands	r1, r2
 80004c4:	2202      	movs	r2, #2
 80004c6:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004c8:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80004ca:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	400a      	ands	r2, r1
 80004d0:	2a01      	cmp	r2, #1
 80004d2:	d000      	beq.n	80004d6 <HAL_ADC_Init+0x4a>
 80004d4:	e06d      	b.n	80005b2 <HAL_ADC_Init+0x126>
 80004d6:	6819      	ldr	r1, [r3, #0]
 80004d8:	4211      	tst	r1, r2
 80004da:	d102      	bne.n	80004e2 <HAL_ADC_Init+0x56>
 80004dc:	68da      	ldr	r2, [r3, #12]
 80004de:	0412      	lsls	r2, r2, #16
 80004e0:	d567      	bpl.n	80005b2 <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	493a      	ldr	r1, [pc, #232]	; (80005d0 <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004e6:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004e8:	400a      	ands	r2, r1
 80004ea:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004ec:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80004ee:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004f0:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80004f2:	69e2      	ldr	r2, [r4, #28]
 80004f4:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80004f6:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80004f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004fa:	3a01      	subs	r2, #1
 80004fc:	1e56      	subs	r6, r2, #1
 80004fe:	41b2      	sbcs	r2, r6
 8000500:	0316      	lsls	r6, r2, #12
 8000502:	68e2      	ldr	r2, [r4, #12]
 8000504:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000506:	6922      	ldr	r2, [r4, #16]
 8000508:	430f      	orrs	r7, r1
 800050a:	2a02      	cmp	r2, #2
 800050c:	d100      	bne.n	8000510 <HAL_ADC_Init+0x84>
 800050e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000510:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000512:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000514:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000516:	433a      	orrs	r2, r7
 8000518:	4332      	orrs	r2, r6
 800051a:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800051c:	2901      	cmp	r1, #1
 800051e:	d104      	bne.n	800052a <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000520:	2d00      	cmp	r5, #0
 8000522:	d12c      	bne.n	800057e <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0249      	lsls	r1, r1, #9
 8000528:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800052a:	20c2      	movs	r0, #194	; 0xc2
 800052c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800052e:	30ff      	adds	r0, #255	; 0xff
 8000530:	4281      	cmp	r1, r0
 8000532:	d002      	beq.n	800053a <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000534:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000536:	4301      	orrs	r1, r0
 8000538:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800053a:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800053c:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800053e:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000540:	4311      	orrs	r1, r2
 8000542:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000544:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000546:	4281      	cmp	r1, r0
 8000548:	d002      	beq.n	8000550 <HAL_ADC_Init+0xc4>
 800054a:	1e48      	subs	r0, r1, #1
 800054c:	2806      	cmp	r0, #6
 800054e:	d807      	bhi.n	8000560 <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000550:	2507      	movs	r5, #7
 8000552:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000554:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000556:	43a8      	bics	r0, r5
 8000558:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800055a:	6958      	ldr	r0, [r3, #20]
 800055c:	4301      	orrs	r1, r0
 800055e:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	491c      	ldr	r1, [pc, #112]	; (80005d4 <HAL_ADC_Init+0x148>)
 8000564:	400b      	ands	r3, r1
 8000566:	429a      	cmp	r2, r3
 8000568:	d111      	bne.n	800058e <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800056a:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800056c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800056e:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000570:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000572:	4393      	bics	r3, r2
 8000574:	001a      	movs	r2, r3
 8000576:	2301      	movs	r3, #1
 8000578:	4313      	orrs	r3, r2
 800057a:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800057e:	2020      	movs	r0, #32
 8000580:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000582:	4328      	orrs	r0, r5
 8000584:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000586:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000588:	4301      	orrs	r1, r0
 800058a:	64a1      	str	r1, [r4, #72]	; 0x48
 800058c:	e7cd      	b.n	800052a <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 800058e:	2212      	movs	r2, #18
 8000590:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000592:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000594:	4393      	bics	r3, r2
 8000596:	001a      	movs	r2, r3
 8000598:	2310      	movs	r3, #16
 800059a:	4313      	orrs	r3, r2
 800059c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800059e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005a0:	4303      	orrs	r3, r0
 80005a2:	64a3      	str	r3, [r4, #72]	; 0x48
 80005a4:	e7ea      	b.n	800057c <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005a6:	2310      	movs	r3, #16
 80005a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80005aa:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005ac:	4313      	orrs	r3, r2
 80005ae:	6463      	str	r3, [r4, #68]	; 0x44
 80005b0:	e7e4      	b.n	800057c <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 80005b2:	2118      	movs	r1, #24
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	438a      	bics	r2, r1
 80005b8:	68a1      	ldr	r1, [r4, #8]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80005be:	6919      	ldr	r1, [r3, #16]
 80005c0:	6862      	ldr	r2, [r4, #4]
 80005c2:	0089      	lsls	r1, r1, #2
 80005c4:	0889      	lsrs	r1, r1, #2
 80005c6:	4311      	orrs	r1, r2
 80005c8:	6119      	str	r1, [r3, #16]
 80005ca:	e78a      	b.n	80004e2 <HAL_ADC_Init+0x56>
 80005cc:	fffffefd 	.word	0xfffffefd
 80005d0:	fffe0219 	.word	0xfffe0219
 80005d4:	833fffe7 	.word	0x833fffe7

080005d8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80005d8:	6803      	ldr	r3, [r0, #0]
 80005da:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80005dc:	4770      	bx	lr

080005de <HAL_ADC_LevelOutOfWindowCallback>:
 80005de:	4770      	bx	lr

080005e0 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005e0:	4770      	bx	lr
	...

080005e4 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005e4:	2204      	movs	r2, #4
 80005e6:	6803      	ldr	r3, [r0, #0]
{
 80005e8:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005ea:	6819      	ldr	r1, [r3, #0]
{
 80005ec:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005ee:	4211      	tst	r1, r2
 80005f0:	d002      	beq.n	80005f8 <HAL_ADC_IRQHandler+0x14>
 80005f2:	6859      	ldr	r1, [r3, #4]
 80005f4:	4211      	tst	r1, r2
 80005f6:	d106      	bne.n	8000606 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80005f8:	2208      	movs	r2, #8
 80005fa:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005fc:	4211      	tst	r1, r2
 80005fe:	d028      	beq.n	8000652 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000600:	6859      	ldr	r1, [r3, #4]
 8000602:	4211      	tst	r1, r2
 8000604:	d025      	beq.n	8000652 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000606:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000608:	06d2      	lsls	r2, r2, #27
 800060a:	d404      	bmi.n	8000616 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	430a      	orrs	r2, r1
 8000614:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000616:	22c0      	movs	r2, #192	; 0xc0
 8000618:	68d9      	ldr	r1, [r3, #12]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	4211      	tst	r1, r2
 800061e:	d112      	bne.n	8000646 <HAL_ADC_IRQHandler+0x62>
 8000620:	6a22      	ldr	r2, [r4, #32]
 8000622:	2a00      	cmp	r2, #0
 8000624:	d10f      	bne.n	8000646 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	0712      	lsls	r2, r2, #28
 800062a:	d50c      	bpl.n	8000646 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	0752      	lsls	r2, r2, #29
 8000630:	d43c      	bmi.n	80006ac <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000632:	210c      	movs	r1, #12
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	438a      	bics	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800063a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <HAL_ADC_IRQHandler+0xdc>)
 800063e:	401a      	ands	r2, r3
 8000640:	2301      	movs	r3, #1
 8000642:	4313      	orrs	r3, r2
 8000644:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000646:	0020      	movs	r0, r4
 8000648:	f001 ffde 	bl	8002608 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800064c:	220c      	movs	r2, #12
 800064e:	6823      	ldr	r3, [r4, #0]
 8000650:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000652:	2580      	movs	r5, #128	; 0x80
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	422a      	tst	r2, r5
 800065a:	d00c      	beq.n	8000676 <HAL_ADC_IRQHandler+0x92>
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	422b      	tst	r3, r5
 8000660:	d009      	beq.n	8000676 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000666:	025b      	lsls	r3, r3, #9
 8000668:	4313      	orrs	r3, r2
 800066a:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800066c:	0020      	movs	r0, r4
 800066e:	f7ff ffb6 	bl	80005de <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000676:	2210      	movs	r2, #16
 8000678:	6823      	ldr	r3, [r4, #0]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	4211      	tst	r1, r2
 800067e:	d014      	beq.n	80006aa <HAL_ADC_IRQHandler+0xc6>
 8000680:	6859      	ldr	r1, [r3, #4]
 8000682:	4211      	tst	r1, r2
 8000684:	d011      	beq.n	80006aa <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000686:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000688:	2a01      	cmp	r2, #1
 800068a:	d002      	beq.n	8000692 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800068c:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800068e:	07d2      	lsls	r2, r2, #31
 8000690:	d508      	bpl.n	80006a4 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000692:	2202      	movs	r2, #2
 8000694:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8000696:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000698:	430a      	orrs	r2, r1
 800069a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800069c:	2210      	movs	r2, #16
 800069e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80006a0:	f7ff ff9e 	bl	80005e0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80006a4:	2210      	movs	r2, #16
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006ac:	2320      	movs	r3, #32
 80006ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006b0:	4313      	orrs	r3, r2
 80006b2:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006b4:	2301      	movs	r3, #1
 80006b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80006b8:	4313      	orrs	r3, r2
 80006ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80006bc:	e7c3      	b.n	8000646 <HAL_ADC_IRQHandler+0x62>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	fffffefe 	.word	0xfffffefe

080006c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80006c6:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80006ca:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006cc:	3440      	adds	r4, #64	; 0x40
 80006ce:	7823      	ldrb	r3, [r4, #0]
{
 80006d0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80006d2:	2002      	movs	r0, #2
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d02b      	beq.n	8000730 <HAL_ADC_ConfigChannel+0x6c>
 80006d8:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006da:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006dc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006de:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80006e0:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006e2:	0740      	lsls	r0, r0, #29
 80006e4:	d45a      	bmi.n	800079c <HAL_ADC_ConfigChannel+0xd8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80006e6:	4830      	ldr	r0, [pc, #192]	; (80007a8 <HAL_ADC_ConfigChannel+0xe4>)
 80006e8:	684f      	ldr	r7, [r1, #4]
 80006ea:	680d      	ldr	r5, [r1, #0]
 80006ec:	4287      	cmp	r7, r0
 80006ee:	d03f      	beq.n	8000770 <HAL_ADC_ConfigChannel+0xac>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006f0:	40ab      	lsls	r3, r5
 80006f2:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006f4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006f6:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006f8:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006fa:	4338      	orrs	r0, r7
 80006fc:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006fe:	429e      	cmp	r6, r3
 8000700:	d00f      	beq.n	8000722 <HAL_ADC_ConfigChannel+0x5e>
 8000702:	3e01      	subs	r6, #1
 8000704:	2e06      	cmp	r6, #6
 8000706:	d90c      	bls.n	8000722 <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000708:	688b      	ldr	r3, [r1, #8]
 800070a:	2107      	movs	r1, #7
 800070c:	6950      	ldr	r0, [r2, #20]
 800070e:	4008      	ands	r0, r1
 8000710:	4283      	cmp	r3, r0
 8000712:	d006      	beq.n	8000722 <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000714:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000716:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000718:	4388      	bics	r0, r1
 800071a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800071c:	6950      	ldr	r0, [r2, #20]
 800071e:	4303      	orrs	r3, r0
 8000720:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000722:	002b      	movs	r3, r5
 8000724:	3b10      	subs	r3, #16
 8000726:	2b02      	cmp	r3, #2
 8000728:	d903      	bls.n	8000732 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800072a:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800072c:	2300      	movs	r3, #0
 800072e:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <HAL_ADC_ConfigChannel+0xe8>)
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	6811      	ldr	r1, [r2, #0]
 8000738:	2d10      	cmp	r5, #16
 800073a:	d015      	beq.n	8000768 <HAL_ADC_ConfigChannel+0xa4>
 800073c:	2d11      	cmp	r5, #17
 800073e:	d015      	beq.n	800076c <HAL_ADC_ConfigChannel+0xa8>
 8000740:	045b      	lsls	r3, r3, #17
 8000742:	430b      	orrs	r3, r1
 8000744:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000746:	2d10      	cmp	r5, #16
 8000748:	d1ef      	bne.n	800072a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_ADC_ConfigChannel+0xec>)
 800074c:	4919      	ldr	r1, [pc, #100]	; (80007b4 <HAL_ADC_ConfigChannel+0xf0>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	f7ff fcf6 	bl	8000140 <__udivsi3>
 8000754:	230a      	movs	r3, #10
 8000756:	4358      	muls	r0, r3
 8000758:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800075a:	9b01      	ldr	r3, [sp, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0e4      	beq.n	800072a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000760:	9b01      	ldr	r3, [sp, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	e7f8      	b.n	800075a <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000768:	041b      	lsls	r3, r3, #16
 800076a:	e7ea      	b.n	8000742 <HAL_ADC_ConfigChannel+0x7e>
 800076c:	03db      	lsls	r3, r3, #15
 800076e:	e7e8      	b.n	8000742 <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000770:	40ab      	lsls	r3, r5
 8000772:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000774:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000776:	002b      	movs	r3, r5
 8000778:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800077a:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800077c:	2b02      	cmp	r3, #2
 800077e:	d8d4      	bhi.n	800072a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_ADC_ConfigChannel+0xe8>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	2d10      	cmp	r5, #16
 8000786:	d005      	beq.n	8000794 <HAL_ADC_ConfigChannel+0xd0>
 8000788:	2d11      	cmp	r5, #17
 800078a:	d005      	beq.n	8000798 <HAL_ADC_ConfigChannel+0xd4>
 800078c:	490a      	ldr	r1, [pc, #40]	; (80007b8 <HAL_ADC_ConfigChannel+0xf4>)
 800078e:	400a      	ands	r2, r1
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e7ca      	b.n	800072a <HAL_ADC_ConfigChannel+0x66>
 8000794:	4909      	ldr	r1, [pc, #36]	; (80007bc <HAL_ADC_ConfigChannel+0xf8>)
 8000796:	e7fa      	b.n	800078e <HAL_ADC_ConfigChannel+0xca>
 8000798:	4909      	ldr	r1, [pc, #36]	; (80007c0 <HAL_ADC_ConfigChannel+0xfc>)
 800079a:	e7f8      	b.n	800078e <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800079c:	2220      	movs	r2, #32
 800079e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80007a0:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007a2:	430a      	orrs	r2, r1
 80007a4:	646a      	str	r2, [r5, #68]	; 0x44
 80007a6:	e7c1      	b.n	800072c <HAL_ADC_ConfigChannel+0x68>
 80007a8:	00001001 	.word	0x00001001
 80007ac:	40012708 	.word	0x40012708
 80007b0:	20000000 	.word	0x20000000
 80007b4:	000f4240 	.word	0x000f4240
 80007b8:	feffffff 	.word	0xfeffffff
 80007bc:	ff7fffff 	.word	0xff7fffff
 80007c0:	ffbfffff 	.word	0xffbfffff

080007c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80007c8:	2800      	cmp	r0, #0
 80007ca:	da14      	bge.n	80007f6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	230f      	movs	r3, #15
 80007ce:	b2c0      	uxtb	r0, r0
 80007d0:	4003      	ands	r3, r0
 80007d2:	3b08      	subs	r3, #8
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <HAL_NVIC_SetPriority+0x58>)
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	2203      	movs	r2, #3
 80007de:	4010      	ands	r0, r2
 80007e0:	4090      	lsls	r0, r2
 80007e2:	32fc      	adds	r2, #252	; 0xfc
 80007e4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ea:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ec:	69dc      	ldr	r4, [r3, #28]
 80007ee:	43ac      	bics	r4, r5
 80007f0:	4321      	orrs	r1, r4
 80007f2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f6:	2503      	movs	r5, #3
 80007f8:	0883      	lsrs	r3, r0, #2
 80007fa:	4028      	ands	r0, r5
 80007fc:	40a8      	lsls	r0, r5
 80007fe:	35fc      	adds	r5, #252	; 0xfc
 8000800:	002e      	movs	r6, r5
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_NVIC_SetPriority+0x5c>)
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	189b      	adds	r3, r3, r2
 8000808:	22c0      	movs	r2, #192	; 0xc0
 800080a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800080c:	4029      	ands	r1, r5
 800080e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	589c      	ldr	r4, [r3, r2]
 8000814:	43b4      	bics	r4, r6
 8000816:	4321      	orrs	r1, r4
 8000818:	5099      	str	r1, [r3, r2]
 800081a:	e7eb      	b.n	80007f4 <HAL_NVIC_SetPriority+0x30>
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	e000e100 	.word	0xe000e100

08000824 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000824:	231f      	movs	r3, #31
 8000826:	4018      	ands	r0, r3
 8000828:	3b1e      	subs	r3, #30
 800082a:	4083      	lsls	r3, r0
 800082c:	4a01      	ldr	r2, [pc, #4]	; (8000834 <HAL_NVIC_EnableIRQ+0x10>)
 800082e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000830:	4770      	bx	lr
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	e000e100 	.word	0xe000e100

08000838 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_SYSTICK_Config+0x28>)
 800083a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800083c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083e:	4293      	cmp	r3, r2
 8000840:	d80d      	bhi.n	800085e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000842:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000848:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084a:	6a03      	ldr	r3, [r0, #32]
 800084c:	0609      	lsls	r1, r1, #24
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	430b      	orrs	r3, r1
 8000854:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000856:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000858:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800085e:	4770      	bx	lr
 8000860:	00ffffff 	.word	0x00ffffff
 8000864:	e000e010 	.word	0xe000e010
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8000870:	2001      	movs	r0, #1
  if(NULL == hdma)
 8000872:	2c00      	cmp	r4, #0
 8000874:	d028      	beq.n	80008c8 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000876:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000878:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800087a:	1ca5      	adds	r5, r4, #2
 800087c:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 800087e:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000882:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000884:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000886:	6863      	ldr	r3, [r4, #4]
 8000888:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088a:	68e1      	ldr	r1, [r4, #12]
 800088c:	430b      	orrs	r3, r1
 800088e:	6921      	ldr	r1, [r4, #16]
 8000890:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000892:	6961      	ldr	r1, [r4, #20]
 8000894:	430b      	orrs	r3, r1
 8000896:	69a1      	ldr	r1, [r4, #24]
 8000898:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800089a:	69e1      	ldr	r1, [r4, #28]
 800089c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800089e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80008a0:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_DMA_Init+0x64>)
 80008a4:	2114      	movs	r1, #20
 80008a6:	18c0      	adds	r0, r0, r3
 80008a8:	f7ff fc4a 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008ae:	0080      	lsls	r0, r0, #2
 80008b0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80008b2:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80008b4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80008b6:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 80008b8:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80008ba:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80008bc:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80008be:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008c0:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80008c2:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80008c4:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80008c6:	77e0      	strb	r0, [r4, #31]
}  
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	ffffc00f 	.word	0xffffc00f
 80008d0:	bffdfff8 	.word	0xbffdfff8
 80008d4:	40020000 	.word	0x40020000

080008d8 <HAL_DMA_Abort_IT>:
{  
 80008d8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008da:	1c84      	adds	r4, r0, #2
 80008dc:	7fe3      	ldrb	r3, [r4, #31]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d004      	beq.n	80008ec <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e2:	2304      	movs	r3, #4
 80008e4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80008e6:	3b03      	subs	r3, #3
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008ec:	210e      	movs	r1, #14
 80008ee:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80008f0:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	438a      	bics	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008f8:	2201      	movs	r2, #1
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	4391      	bics	r1, r2
 80008fe:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000900:	0011      	movs	r1, r2
 8000902:	40a9      	lsls	r1, r5
 8000904:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000906:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000908:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800090a:	2400      	movs	r4, #0
 800090c:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 800090e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000910:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000912:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000914:	42a2      	cmp	r2, r4
 8000916:	d0e7      	beq.n	80008e8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000918:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800091a:	0023      	movs	r3, r4
 800091c:	e7e4      	b.n	80008e8 <HAL_DMA_Abort_IT+0x10>

0800091e <HAL_DMA_IRQHandler>:
{
 800091e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000920:	2704      	movs	r7, #4
 8000922:	003e      	movs	r6, r7
 8000924:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000926:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000928:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800092a:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800092c:	6803      	ldr	r3, [r0, #0]
 800092e:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000930:	422e      	tst	r6, r5
 8000932:	d00d      	beq.n	8000950 <HAL_DMA_IRQHandler+0x32>
 8000934:	423c      	tst	r4, r7
 8000936:	d00b      	beq.n	8000950 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	0689      	lsls	r1, r1, #26
 800093c:	d402      	bmi.n	8000944 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	43b9      	bics	r1, r7
 8000942:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000944:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000946:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000948:	2b00      	cmp	r3, #0
 800094a:	d019      	beq.n	8000980 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 800094c:	4798      	blx	r3
}  
 800094e:	e017      	b.n	8000980 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000950:	2702      	movs	r7, #2
 8000952:	003e      	movs	r6, r7
 8000954:	408e      	lsls	r6, r1
 8000956:	422e      	tst	r6, r5
 8000958:	d013      	beq.n	8000982 <HAL_DMA_IRQHandler+0x64>
 800095a:	423c      	tst	r4, r7
 800095c:	d011      	beq.n	8000982 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	0689      	lsls	r1, r1, #26
 8000962:	d406      	bmi.n	8000972 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000964:	240a      	movs	r4, #10
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	43a1      	bics	r1, r4
 800096a:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800096c:	2101      	movs	r1, #1
 800096e:	19c3      	adds	r3, r0, r7
 8000970:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000972:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000974:	2200      	movs	r2, #0
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 800097a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 800097c:	4293      	cmp	r3, r2
 800097e:	d1e5      	bne.n	800094c <HAL_DMA_IRQHandler+0x2e>
}  
 8000980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000982:	2608      	movs	r6, #8
 8000984:	0037      	movs	r7, r6
 8000986:	408f      	lsls	r7, r1
 8000988:	423d      	tst	r5, r7
 800098a:	d0f9      	beq.n	8000980 <HAL_DMA_IRQHandler+0x62>
 800098c:	4234      	tst	r4, r6
 800098e:	d0f7      	beq.n	8000980 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000990:	250e      	movs	r5, #14
 8000992:	681c      	ldr	r4, [r3, #0]
 8000994:	43ac      	bics	r4, r5
 8000996:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000998:	2301      	movs	r3, #1
 800099a:	001c      	movs	r4, r3
 800099c:	408c      	lsls	r4, r1
 800099e:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80009a0:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80009a2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80009a4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 80009a6:	2200      	movs	r2, #0
 80009a8:	18c3      	adds	r3, r0, r3
 80009aa:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 80009ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80009ae:	e7e5      	b.n	800097c <HAL_DMA_IRQHandler+0x5e>

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009b2:	680b      	ldr	r3, [r1, #0]
{ 
 80009b4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009b6:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80009b8:	2300      	movs	r3, #0
{ 
 80009ba:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009bc:	9a02      	ldr	r2, [sp, #8]
 80009be:	40da      	lsrs	r2, r3
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80009c2:	b007      	add	sp, #28
 80009c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009c6:	2201      	movs	r2, #1
 80009c8:	409a      	lsls	r2, r3
 80009ca:	9203      	str	r2, [sp, #12]
 80009cc:	9903      	ldr	r1, [sp, #12]
 80009ce:	9a02      	ldr	r2, [sp, #8]
 80009d0:	400a      	ands	r2, r1
 80009d2:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80009d4:	d100      	bne.n	80009d8 <HAL_GPIO_Init+0x28>
 80009d6:	e088      	b.n	8000aea <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80009d8:	9a01      	ldr	r2, [sp, #4]
 80009da:	2110      	movs	r1, #16
 80009dc:	6852      	ldr	r2, [r2, #4]
 80009de:	0016      	movs	r6, r2
 80009e0:	438e      	bics	r6, r1
 80009e2:	2e02      	cmp	r6, #2
 80009e4:	d10e      	bne.n	8000a04 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80009e6:	2507      	movs	r5, #7
 80009e8:	401d      	ands	r5, r3
 80009ea:	00ad      	lsls	r5, r5, #2
 80009ec:	3901      	subs	r1, #1
 80009ee:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80009f0:	08dc      	lsrs	r4, r3, #3
 80009f2:	00a4      	lsls	r4, r4, #2
 80009f4:	1904      	adds	r4, r0, r4
 80009f6:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80009f8:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80009fa:	9901      	ldr	r1, [sp, #4]
 80009fc:	6909      	ldr	r1, [r1, #16]
 80009fe:	40a9      	lsls	r1, r5
 8000a00:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000a02:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000a04:	2403      	movs	r4, #3
 8000a06:	005f      	lsls	r7, r3, #1
 8000a08:	40bc      	lsls	r4, r7
 8000a0a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000a0c:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0e:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000a10:	4025      	ands	r5, r4
 8000a12:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a14:	2503      	movs	r5, #3
 8000a16:	4015      	ands	r5, r2
 8000a18:	40bd      	lsls	r5, r7
 8000a1a:	4661      	mov	r1, ip
 8000a1c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000a1e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a20:	2e01      	cmp	r6, #1
 8000a22:	d80f      	bhi.n	8000a44 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000a24:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000a26:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000a28:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a2a:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000a2c:	40bd      	lsls	r5, r7
 8000a2e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000a30:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a32:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000a34:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a36:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000a38:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	400d      	ands	r5, r1
 8000a3e:	409d      	lsls	r5, r3
 8000a40:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000a42:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a44:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a46:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a48:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a4a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a4c:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a4e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a50:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a52:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000a54:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a56:	420a      	tst	r2, r1
 8000a58:	d047      	beq.n	8000aea <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4c24      	ldr	r4, [pc, #144]	; (8000af0 <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a5e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a62:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	430d      	orrs	r5, r1
 8000a66:	61a5      	str	r5, [r4, #24]
 8000a68:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000a6a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6c:	400c      	ands	r4, r1
 8000a6e:	9405      	str	r4, [sp, #20]
 8000a70:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a72:	240f      	movs	r4, #15
 8000a74:	491f      	ldr	r1, [pc, #124]	; (8000af4 <HAL_GPIO_Init+0x144>)
 8000a76:	00ad      	lsls	r5, r5, #2
 8000a78:	00b6      	lsls	r6, r6, #2
 8000a7a:	186d      	adds	r5, r5, r1
 8000a7c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a7e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000a80:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a82:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a84:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a86:	2400      	movs	r4, #0
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	d008      	beq.n	8000a9e <HAL_GPIO_Init+0xee>
 8000a8c:	491a      	ldr	r1, [pc, #104]	; (8000af8 <HAL_GPIO_Init+0x148>)
 8000a8e:	3401      	adds	r4, #1
 8000a90:	4288      	cmp	r0, r1
 8000a92:	d004      	beq.n	8000a9e <HAL_GPIO_Init+0xee>
 8000a94:	4919      	ldr	r1, [pc, #100]	; (8000afc <HAL_GPIO_Init+0x14c>)
 8000a96:	3404      	adds	r4, #4
 8000a98:	4288      	cmp	r0, r1
 8000a9a:	d100      	bne.n	8000a9e <HAL_GPIO_Init+0xee>
 8000a9c:	3c03      	subs	r4, #3
 8000a9e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000aa0:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aa2:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000aa4:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000aa6:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000aa8:	4c15      	ldr	r4, [pc, #84]	; (8000b00 <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000aaa:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000aac:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000aae:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	03d1      	lsls	r1, r2, #15
 8000ab2:	d401      	bmi.n	8000ab8 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ab4:	003e      	movs	r6, r7
 8000ab6:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000ab8:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000aba:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000abc:	9e00      	ldr	r6, [sp, #0]
 8000abe:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac0:	0391      	lsls	r1, r2, #14
 8000ac2:	d401      	bmi.n	8000ac8 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000ac4:	003e      	movs	r6, r7
 8000ac6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000ac8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000aca:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000acc:	9e00      	ldr	r6, [sp, #0]
 8000ace:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad0:	02d1      	lsls	r1, r2, #11
 8000ad2:	d401      	bmi.n	8000ad8 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ad4:	003e      	movs	r6, r7
 8000ad6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000ad8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000ada:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000adc:	9f00      	ldr	r7, [sp, #0]
 8000ade:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae0:	0292      	lsls	r2, r2, #10
 8000ae2:	d401      	bmi.n	8000ae8 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ae4:	402e      	ands	r6, r5
 8000ae6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000ae8:	60e7      	str	r7, [r4, #12]
    position++;
 8000aea:	3301      	adds	r3, #1
 8000aec:	e766      	b.n	80009bc <HAL_GPIO_Init+0xc>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48000800 	.word	0x48000800
 8000b00:	40010400 	.word	0x40010400

08000b04 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000b04:	6803      	ldr	r3, [r0, #0]
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	0792      	lsls	r2, r2, #30
 8000b0a:	d501      	bpl.n	8000b10 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b10:	2201      	movs	r2, #1
 8000b12:	6999      	ldr	r1, [r3, #24]
 8000b14:	4211      	tst	r1, r2
 8000b16:	d102      	bne.n	8000b1e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b18:	6999      	ldr	r1, [r3, #24]
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	619a      	str	r2, [r3, #24]
  }
}
 8000b1e:	4770      	bx	lr

08000b20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8000b20:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8000b22:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000b24:	07ca      	lsls	r2, r1, #31
 8000b26:	d508      	bpl.n	8000b3a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000b28:	0003      	movs	r3, r0
 8000b2a:	3341      	adds	r3, #65	; 0x41
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	2328      	movs	r3, #40	; 0x28
 8000b30:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000b32:	331a      	adds	r3, #26
    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000b34:	2a28      	cmp	r2, #40	; 0x28
 8000b36:	d000      	beq.n	8000b3a <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b38:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000b3a:	078a      	lsls	r2, r1, #30
 8000b3c:	d508      	bpl.n	8000b50 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000b3e:	0002      	movs	r2, r0
 8000b40:	2428      	movs	r4, #40	; 0x28
 8000b42:	3241      	adds	r2, #65	; 0x41
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	4022      	ands	r2, r4
 8000b48:	42a2      	cmp	r2, r4
 8000b4a:	d117      	bne.n	8000b7c <I2C_Disable_IRQ+0x5c>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000b4c:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b4e:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000b50:	074a      	lsls	r2, r1, #29
 8000b52:	d501      	bpl.n	8000b58 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b54:	22b8      	movs	r2, #184	; 0xb8
 8000b56:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000b58:	2211      	movs	r2, #17
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	2a11      	cmp	r2, #17
 8000b5e:	d101      	bne.n	8000b64 <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000b60:	327f      	adds	r2, #127	; 0x7f
 8000b62:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000b64:	2212      	movs	r2, #18
 8000b66:	4011      	ands	r1, r2
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d101      	bne.n	8000b70 <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8000b6c:	324e      	adds	r2, #78	; 0x4e
 8000b6e:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000b70:	6801      	ldr	r1, [r0, #0]
 8000b72:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8000b74:	2000      	movs	r0, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000b76:	439a      	bics	r2, r3
 8000b78:	600a      	str	r2, [r1, #0]
}
 8000b7a:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b7c:	22f4      	movs	r2, #244	; 0xf4
 8000b7e:	e7e6      	b.n	8000b4e <I2C_Disable_IRQ+0x2e>

08000b80 <HAL_I2C_Init>:
{
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000b84:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000b86:	2c00      	cmp	r4, #0
 8000b88:	d03f      	beq.n	8000c0a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b8a:	0025      	movs	r5, r4
 8000b8c:	3541      	adds	r5, #65	; 0x41
 8000b8e:	782b      	ldrb	r3, [r5, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d105      	bne.n	8000ba2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000b96:	0022      	movs	r2, r4
 8000b98:	3240      	adds	r2, #64	; 0x40
 8000b9a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000b9c:	0020      	movs	r0, r4
 8000b9e:	f001 ff39 	bl	8002a14 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ba2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000ba4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ba6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000ba8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000baa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	68a6      	ldr	r6, [r4, #8]
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bb4:	6861      	ldr	r1, [r4, #4]
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <HAL_I2C_Init+0xa0>)
 8000bb8:	400a      	ands	r2, r1
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bbc:	6899      	ldr	r1, [r3, #8]
 8000bbe:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_I2C_Init+0xa4>)
 8000bc0:	4011      	ands	r1, r2
 8000bc2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bc4:	2801      	cmp	r0, #1
 8000bc6:	d121      	bne.n	8000c0c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0209      	lsls	r1, r1, #8
 8000bcc:	4331      	orrs	r1, r6
 8000bce:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bd0:	6858      	ldr	r0, [r3, #4]
 8000bd2:	4915      	ldr	r1, [pc, #84]	; (8000c28 <HAL_I2C_Init+0xa8>)
 8000bd4:	4301      	orrs	r1, r0
 8000bd6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bd8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bda:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bdc:	400a      	ands	r2, r1
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000be0:	6961      	ldr	r1, [r4, #20]
 8000be2:	6922      	ldr	r2, [r4, #16]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	69a1      	ldr	r1, [r4, #24]
 8000be8:	0209      	lsls	r1, r1, #8
 8000bea:	430a      	orrs	r2, r1
 8000bec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bee:	6a21      	ldr	r1, [r4, #32]
 8000bf0:	69e2      	ldr	r2, [r4, #28]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000bfe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c00:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c02:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c04:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c06:	3442      	adds	r4, #66	; 0x42
 8000c08:	7020      	strb	r0, [r4, #0]
}
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c0c:	2184      	movs	r1, #132	; 0x84
 8000c0e:	0209      	lsls	r1, r1, #8
 8000c10:	4331      	orrs	r1, r6
 8000c12:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d1db      	bne.n	8000bd0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0109      	lsls	r1, r1, #4
 8000c1c:	6059      	str	r1, [r3, #4]
 8000c1e:	e7d7      	b.n	8000bd0 <HAL_I2C_Init+0x50>
 8000c20:	f0ffffff 	.word	0xf0ffffff
 8000c24:	ffff7fff 	.word	0xffff7fff
 8000c28:	02008000 	.word	0x02008000

08000c2c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000c2c:	6803      	ldr	r3, [r0, #0]
{
 8000c2e:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000c30:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000c32:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8000c34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d000      	beq.n	8000c3c <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000c3a:	4798      	blx	r3
}
 8000c3c:	bd10      	pop	{r4, pc}

08000c3e <HAL_I2C_SlaveTxCpltCallback>:
 8000c3e:	4770      	bx	lr

08000c40 <HAL_I2C_SlaveRxCpltCallback>:
 8000c40:	4770      	bx	lr

08000c42 <I2C_ITSlaveSequentialCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c42:	0003      	movs	r3, r0
{
 8000c44:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c46:	2500      	movs	r5, #0
 8000c48:	3342      	adds	r3, #66	; 0x42
 8000c4a:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	781a      	ldrb	r2, [r3, #0]
{
 8000c50:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000c52:	2a29      	cmp	r2, #41	; 0x29
 8000c54:	d10d      	bne.n	8000c72 <I2C_ITSlaveSequentialCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000c56:	3a01      	subs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000c5a:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000c5c:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000c5e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000c60:	f7ff ff5e 	bl	8000b20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000c64:	0023      	movs	r3, r4
 8000c66:	3340      	adds	r3, #64	; 0x40
 8000c68:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f7ff ffe7 	bl	8000c3e <HAL_I2C_SlaveTxCpltCallback>
}
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	2a2a      	cmp	r2, #42	; 0x2a
 8000c76:	d1fb      	bne.n	8000c70 <I2C_ITSlaveSequentialCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000c78:	3a02      	subs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000c7c:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000c7e:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000c80:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000c82:	f7ff ff4d 	bl	8000b20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000c86:	0023      	movs	r3, r4
 8000c88:	3340      	adds	r3, #64	; 0x40
 8000c8a:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	f7ff ffd7 	bl	8000c40 <HAL_I2C_SlaveRxCpltCallback>
}
 8000c92:	e7ed      	b.n	8000c70 <I2C_ITSlaveSequentialCplt+0x2e>

08000c94 <HAL_I2C_AddrCallback>:
}
 8000c94:	4770      	bx	lr

08000c96 <HAL_I2C_ListenCpltCallback>:
 8000c96:	4770      	bx	lr

08000c98 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <I2C_ITListenCplt+0x60>)
{
 8000c9a:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c9c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c9e:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000ca0:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ca2:	6303      	str	r3, [r0, #48]	; 0x30
{
 8000ca4:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	3241      	adds	r2, #65	; 0x41
 8000caa:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cac:	7053      	strb	r3, [r2, #1]
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000cae:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 8000cb0:	6363      	str	r3, [r4, #52]	; 0x34
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000cb2:	4211      	tst	r1, r2
 8000cb4:	d011      	beq.n	8000cda <I2C_ITListenCplt+0x42>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cb8:	1c59      	adds	r1, r3, #1
 8000cba:	6261      	str	r1, [r4, #36]	; 0x24
 8000cbc:	6821      	ldr	r1, [r4, #0]
 8000cbe:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000cc0:	7019      	strb	r1, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8000cc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d008      	beq.n	8000cda <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ccc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000cd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000cda:	2107      	movs	r1, #7
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f7ff ff1f 	bl	8000b20 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8000ce6:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ce8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000cea:	0023      	movs	r3, r4
 8000cec:	2200      	movs	r2, #0
 8000cee:	3340      	adds	r3, #64	; 0x40
 8000cf0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8000cf2:	f7ff ffd0 	bl	8000c96 <HAL_I2C_ListenCpltCallback>
}
 8000cf6:	bd10      	pop	{r4, pc}
 8000cf8:	ffff0000 	.word	0xffff0000

08000cfc <HAL_I2C_ErrorCallback>:
 8000cfc:	4770      	bx	lr

08000cfe <HAL_I2C_AbortCpltCallback>:
}
 8000cfe:	4770      	bx	lr

08000d00 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000d00:	0002      	movs	r2, r0
 8000d02:	2300      	movs	r3, #0
{
 8000d04:	b570      	push	{r4, r5, r6, lr}
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000d06:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000d08:	3242      	adds	r2, #66	; 0x42
 8000d0a:	7013      	strb	r3, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000d0c:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <I2C_ITError+0xcc>)
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000d0e:	3541      	adds	r5, #65	; 0x41
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000d10:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000d12:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000d14:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8000d16:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000d1c:	782b      	ldrb	r3, [r5, #0]
 8000d1e:	2b28      	cmp	r3, #40	; 0x28
 8000d20:	d005      	beq.n	8000d2e <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000d22:	782b      	ldrb	r3, [r5, #0]
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8000d24:	2b29      	cmp	r3, #41	; 0x29
 8000d26:	d002      	beq.n	8000d2e <I2C_ITError+0x2e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000d28:	782b      	ldrb	r3, [r5, #0]
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8000d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d2c:	d122      	bne.n	8000d74 <I2C_ITError+0x74>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000d2e:	2103      	movs	r1, #3
 8000d30:	0020      	movs	r0, r4
 8000d32:	f7ff fef5 	bl	8000b20 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d36:	2328      	movs	r3, #40	; 0x28
 8000d38:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <I2C_ITError+0xd0>)
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	0021      	movs	r1, r4
    hi2c->XferISR       = NULL;
 8000d44:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	01d2      	lsls	r2, r2, #7
 8000d4a:	681e      	ldr	r6, [r3, #0]
 8000d4c:	3140      	adds	r1, #64	; 0x40
 8000d4e:	4016      	ands	r6, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000d50:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000d52:	d01a      	beq.n	8000d8a <I2C_ITError+0x8a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000d54:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <I2C_ITError+0xd4>)
 8000d56:	4002      	ands	r2, r0
 8000d58:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000d5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <I2C_ITError+0xd8>)
 8000d5e:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8000d60:	2300      	movs	r3, #0
 8000d62:	700b      	strb	r3, [r1, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000d64:	f7ff fdb8 	bl	80008d8 <HAL_DMA_Abort_IT>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d002      	beq.n	8000d72 <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000d6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000d6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000d70:	4798      	blx	r3
}
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000d74:	2107      	movs	r1, #7
 8000d76:	f7ff fed3 	bl	8000b20 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000d7a:	782b      	ldrb	r3, [r5, #0]
 8000d7c:	2b60      	cmp	r3, #96	; 0x60
 8000d7e:	d001      	beq.n	8000d84 <I2C_ITError+0x84>
      hi2c->State         = HAL_I2C_STATE_READY;
 8000d80:	2320      	movs	r3, #32
 8000d82:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	6323      	str	r3, [r4, #48]	; 0x30
 8000d88:	e7da      	b.n	8000d40 <I2C_ITError+0x40>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000d8a:	2080      	movs	r0, #128	; 0x80
 8000d8c:	0200      	lsls	r0, r0, #8
 8000d8e:	4002      	ands	r2, r0
 8000d90:	d00d      	beq.n	8000dae <I2C_ITError+0xae>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <I2C_ITError+0xdc>)
 8000d96:	4002      	ands	r2, r0
 8000d98:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000d9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <I2C_ITError+0xd8>)
 8000d9e:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8000da0:	700e      	strb	r6, [r1, #0]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000da2:	f7ff fd99 	bl	80008d8 <HAL_DMA_Abort_IT>
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d0e3      	beq.n	8000d72 <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000daa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000dac:	e7df      	b.n	8000d6e <I2C_ITError+0x6e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000dae:	782b      	ldrb	r3, [r5, #0]
 8000db0:	2b60      	cmp	r3, #96	; 0x60
 8000db2:	d106      	bne.n	8000dc2 <I2C_ITError+0xc2>
    hi2c->State = HAL_I2C_STATE_READY;
 8000db4:	3b40      	subs	r3, #64	; 0x40
 8000db6:	702b      	strb	r3, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000db8:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8000dba:	700a      	strb	r2, [r1, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000dbc:	f7ff ff9f 	bl	8000cfe <HAL_I2C_AbortCpltCallback>
 8000dc0:	e7d7      	b.n	8000d72 <I2C_ITError+0x72>
    __HAL_UNLOCK(hi2c);
 8000dc2:	700a      	strb	r2, [r1, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8000dc4:	0020      	movs	r0, r4
 8000dc6:	f7ff ff99 	bl	8000cfc <HAL_I2C_ErrorCallback>
}
 8000dca:	e7d2      	b.n	8000d72 <I2C_ITError+0x72>
 8000dcc:	ffff0000 	.word	0xffff0000
 8000dd0:	08000ed9 	.word	0x08000ed9
 8000dd4:	ffffbfff 	.word	0xffffbfff
 8000dd8:	08001103 	.word	0x08001103
 8000ddc:	ffff7fff 	.word	0xffff7fff

08000de0 <I2C_ITSlaveCplt>:
{
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	0004      	movs	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000de4:	2220      	movs	r2, #32
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000de6:	2780      	movs	r7, #128	; 0x80
 8000de8:	0025      	movs	r5, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dea:	6803      	ldr	r3, [r0, #0]
{
 8000dec:	000e      	movs	r6, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dee:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000df0:	3a18      	subs	r2, #24
 8000df2:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000df4:	2107      	movs	r1, #7
 8000df6:	f7ff fe93 	bl	8000b20 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	023f      	lsls	r7, r7, #8
 8000dfe:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000e00:	4933      	ldr	r1, [pc, #204]	; (8000ed0 <I2C_ITSlaveCplt+0xf0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000e02:	433a      	orrs	r2, r7
 8000e04:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000e06:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000e08:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000e0e:	f7ff fe79 	bl	8000b04 <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000e12:	6821      	ldr	r1, [r4, #0]
 8000e14:	3541      	adds	r5, #65	; 0x41
 8000e16:	680b      	ldr	r3, [r1, #0]
 8000e18:	045b      	lsls	r3, r3, #17
 8000e1a:	d402      	bmi.n	8000e22 <I2C_ITSlaveCplt+0x42>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8000e1c:	680b      	ldr	r3, [r1, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8000e1e:	423b      	tst	r3, r7
 8000e20:	d007      	beq.n	8000e32 <I2C_ITSlaveCplt+0x52>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8000e22:	782b      	ldrb	r3, [r5, #0]
 8000e24:	2b21      	cmp	r3, #33	; 0x21
 8000e26:	d134      	bne.n	8000e92 <I2C_ITSlaveCplt+0xb2>
 8000e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000e32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <I2C_ITSlaveCplt+0x60>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8000e40:	2204      	movs	r2, #4
 8000e42:	4216      	tst	r6, r2
 8000e44:	d010      	beq.n	8000e68 <I2C_ITSlaveCplt+0x88>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e48:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000e4a:	1c58      	adds	r0, r3, #1
 8000e4c:	6260      	str	r0, [r4, #36]	; 0x24
 8000e4e:	7019      	strb	r1, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8000e50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d008      	beq.n	8000e68 <I2C_ITSlaveCplt+0x88>
      hi2c->XferSize--;
 8000e56:	3b01      	subs	r3, #1
 8000e58:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000e62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e64:	431a      	orrs	r2, r3
 8000e66:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e68:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e6a:	2300      	movs	r3, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e6c:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e6e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e70:	7013      	strb	r3, [r2, #0]
  hi2c->XferISR = NULL;
 8000e72:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000e74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00d      	beq.n	8000e96 <I2C_ITSlaveCplt+0xb6>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000e7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	f7ff ff3f 	bl	8000d00 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000e82:	782b      	ldrb	r3, [r5, #0]
 8000e84:	2b28      	cmp	r3, #40	; 0x28
 8000e86:	d103      	bne.n	8000e90 <I2C_ITSlaveCplt+0xb0>
      I2C_ITListenCplt(hi2c, ITFlags);
 8000e88:	0031      	movs	r1, r6
 8000e8a:	0020      	movs	r0, r4
 8000e8c:	f7ff ff04 	bl	8000c98 <I2C_ITListenCplt>
}
 8000e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8000e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e94:	e7c9      	b.n	8000e2a <I2C_ITSlaveCplt+0x4a>
 8000e96:	0022      	movs	r2, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000e98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000e9a:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <I2C_ITSlaveCplt+0xf4>)
 8000e9c:	3240      	adds	r2, #64	; 0x40
 8000e9e:	4288      	cmp	r0, r1
 8000ea0:	d007      	beq.n	8000eb2 <I2C_ITSlaveCplt+0xd2>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ea2:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8000ea4:	2120      	movs	r1, #32
    HAL_I2C_ListenCpltCallback(hi2c);
 8000ea6:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8000ea8:	7029      	strb	r1, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000eaa:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8000eac:	f7ff fef3 	bl	8000c96 <HAL_I2C_ListenCpltCallback>
 8000eb0:	e7ee      	b.n	8000e90 <I2C_ITSlaveCplt+0xb0>
 8000eb2:	2120      	movs	r1, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000eb4:	7828      	ldrb	r0, [r5, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000eb6:	7029      	strb	r1, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000eb8:	7013      	strb	r3, [r2, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000eba:	2822      	cmp	r0, #34	; 0x22
 8000ebc:	d103      	bne.n	8000ec6 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f7ff febe 	bl	8000c40 <HAL_I2C_SlaveRxCpltCallback>
 8000ec4:	e7e4      	b.n	8000e90 <I2C_ITSlaveCplt+0xb0>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f7ff feb9 	bl	8000c3e <HAL_I2C_SlaveTxCpltCallback>
}
 8000ecc:	e7e0      	b.n	8000e90 <I2C_ITSlaveCplt+0xb0>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	fe00e800 	.word	0xfe00e800
 8000ed4:	ffff0000 	.word	0xffff0000

08000ed8 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8000ed8:	0003      	movs	r3, r0
{
 8000eda:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8000edc:	3340      	adds	r3, #64	; 0x40
{
 8000ede:	0017      	movs	r7, r2
  __HAL_LOCK(hi2c);
 8000ee0:	781a      	ldrb	r2, [r3, #0]
{
 8000ee2:	0004      	movs	r4, r0
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 8000ee8:	2002      	movs	r0, #2
 8000eea:	2a01      	cmp	r2, #1
 8000eec:	d026      	beq.n	8000f3c <I2C_Slave_ISR_IT+0x64>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8000ef2:	320f      	adds	r2, #15
 8000ef4:	4211      	tst	r1, r2
 8000ef6:	d040      	beq.n	8000f7a <I2C_Slave_ISR_IT+0xa2>
 8000ef8:	4217      	tst	r7, r2
 8000efa:	d03e      	beq.n	8000f7a <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 8000efc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d134      	bne.n	8000f6c <I2C_Slave_ISR_IT+0x94>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f06:	049b      	lsls	r3, r3, #18
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d002      	beq.n	8000f12 <I2C_Slave_ISR_IT+0x3a>
 8000f0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d116      	bne.n	8000f40 <I2C_Slave_ISR_IT+0x68>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8000f12:	0023      	movs	r3, r4
 8000f14:	3341      	adds	r3, #65	; 0x41
 8000f16:	781b      	ldrb	r3, [r3, #0]
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8000f18:	2b28      	cmp	r3, #40	; 0x28
 8000f1a:	d111      	bne.n	8000f40 <I2C_Slave_ISR_IT+0x68>
        I2C_ITListenCplt(hi2c, ITFlags);
 8000f1c:	0029      	movs	r1, r5
 8000f1e:	0020      	movs	r0, r4
 8000f20:	f7ff feba 	bl	8000c98 <I2C_ITListenCplt>
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8000f24:	2320      	movs	r3, #32
 8000f26:	421d      	tst	r5, r3
 8000f28:	d005      	beq.n	8000f36 <I2C_Slave_ISR_IT+0x5e>
 8000f2a:	421f      	tst	r7, r3
 8000f2c:	d003      	beq.n	8000f36 <I2C_Slave_ISR_IT+0x5e>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8000f2e:	0029      	movs	r1, r5
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff ff55 	bl	8000de0 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8000f36:	2000      	movs	r0, #0
 8000f38:	3440      	adds	r4, #64	; 0x40
 8000f3a:	7020      	strb	r0, [r4, #0]
}
 8000f3c:	b005      	add	sp, #20
 8000f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000f40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f42:	4a58      	ldr	r2, [pc, #352]	; (80010a4 <I2C_Slave_ISR_IT+0x1cc>)
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d00d      	beq.n	8000f66 <I2C_Slave_ISR_IT+0x8e>
 8000f4a:	0022      	movs	r2, r4
 8000f4c:	3241      	adds	r2, #65	; 0x41
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	2a29      	cmp	r2, #41	; 0x29
 8000f52:	d108      	bne.n	8000f66 <I2C_Slave_ISR_IT+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f54:	3a19      	subs	r2, #25
 8000f56:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f7ff fdd3 	bl	8000b04 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8000f5e:	0020      	movs	r0, r4
 8000f60:	f7ff fe6f 	bl	8000c42 <I2C_ITSlaveSequentialCplt>
 8000f64:	e7de      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f66:	2210      	movs	r2, #16
 8000f68:	61da      	str	r2, [r3, #28]
 8000f6a:	e7db      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000f70:	2304      	movs	r3, #4
 8000f72:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f74:	4313      	orrs	r3, r2
 8000f76:	6463      	str	r3, [r4, #68]	; 0x44
 8000f78:	e7d4      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	4215      	tst	r5, r2
 8000f7e:	d019      	beq.n	8000fb4 <I2C_Slave_ISR_IT+0xdc>
 8000f80:	4217      	tst	r7, r2
 8000f82:	d017      	beq.n	8000fb4 <I2C_Slave_ISR_IT+0xdc>
    if (hi2c->XferCount > 0U)
 8000f84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00c      	beq.n	8000fa4 <I2C_Slave_ISR_IT+0xcc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	6262      	str	r2, [r4, #36]	; 0x24
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f94:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000f96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000f9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8000fa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1bc      	bne.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8000faa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <I2C_Slave_ISR_IT+0x1cc>)
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d1d5      	bne.n	8000f5e <I2C_Slave_ISR_IT+0x86>
 8000fb2:	e7b7      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8000fb4:	2008      	movs	r0, #8
 8000fb6:	4205      	tst	r5, r0
 8000fb8:	d050      	beq.n	800105c <I2C_Slave_ISR_IT+0x184>
 8000fba:	4207      	tst	r7, r0
 8000fbc:	d04e      	beq.n	800105c <I2C_Slave_ISR_IT+0x184>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8000fbe:	0022      	movs	r2, r4
 8000fc0:	2128      	movs	r1, #40	; 0x28
 8000fc2:	3241      	adds	r2, #65	; 0x41
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	6821      	ldr	r1, [r4, #0]
 8000fca:	2a28      	cmp	r2, #40	; 0x28
 8000fcc:	d142      	bne.n	8001054 <I2C_Slave_ISR_IT+0x17c>
    transferdirection = I2C_GET_DIR(hi2c);
 8000fce:	698e      	ldr	r6, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000fd0:	698b      	ldr	r3, [r1, #24]
 8000fd2:	32d6      	adds	r2, #214	; 0xd6
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	9201      	str	r2, [sp, #4]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000fda:	688a      	ldr	r2, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000fdc:	68cb      	ldr	r3, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8000fde:	03f6      	lsls	r6, r6, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000fe0:	9303      	str	r3, [sp, #12]
 8000fe2:	0023      	movs	r3, r4
 8000fe4:	3340      	adds	r3, #64	; 0x40
 8000fe6:	9300      	str	r3, [sp, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fe8:	68e3      	ldr	r3, [r4, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8000fea:	0ff6      	lsrs	r6, r6, #31
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d128      	bne.n	8001042 <I2C_Slave_ISR_IT+0x16a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000ff0:	0592      	lsls	r2, r2, #22
 8000ff2:	0d93      	lsrs	r3, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000ff4:	9a01      	ldr	r2, [sp, #4]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000ff6:	9302      	str	r3, [sp, #8]
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000ff8:	09db      	lsrs	r3, r3, #7
 8000ffa:	405a      	eors	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	2206      	movs	r2, #6
 8001000:	4013      	ands	r3, r2
 8001002:	d113      	bne.n	800102c <I2C_Slave_ISR_IT+0x154>
        hi2c->AddrEventCount++;
 8001004:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001006:	4694      	mov	ip, r2
 8001008:	2201      	movs	r2, #1
 800100a:	4494      	add	ip, r2
 800100c:	4662      	mov	r2, ip
 800100e:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001010:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001012:	2a02      	cmp	r2, #2
 8001014:	d000      	beq.n	8001018 <I2C_Slave_ISR_IT+0x140>
 8001016:	e785      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
          __HAL_UNLOCK(hi2c);
 8001018:	9a00      	ldr	r2, [sp, #0]
          hi2c->AddrEventCount = 0U;
 800101a:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800101c:	61c8      	str	r0, [r1, #28]
          __HAL_UNLOCK(hi2c);
 800101e:	7013      	strb	r3, [r2, #0]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001020:	9a02      	ldr	r2, [sp, #8]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001022:	0031      	movs	r1, r6
 8001024:	0020      	movs	r0, r4
 8001026:	f7ff fe35 	bl	8000c94 <HAL_I2C_AddrCallback>
 800102a:	e77b      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800102c:	2104      	movs	r1, #4
 800102e:	0020      	movs	r0, r4
 8001030:	f7ff fd76 	bl	8000b20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001034:	2300      	movs	r3, #0
 8001036:	9a00      	ldr	r2, [sp, #0]
 8001038:	7013      	strb	r3, [r2, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800103a:	9a03      	ldr	r2, [sp, #12]
 800103c:	33fe      	adds	r3, #254	; 0xfe
 800103e:	401a      	ands	r2, r3
 8001040:	e7ef      	b.n	8001022 <I2C_Slave_ISR_IT+0x14a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001042:	2104      	movs	r1, #4
 8001044:	0020      	movs	r0, r4
 8001046:	f7ff fd6b 	bl	8000b20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800104a:	2300      	movs	r3, #0
 800104c:	9a00      	ldr	r2, [sp, #0]
 800104e:	7013      	strb	r3, [r2, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001050:	9a01      	ldr	r2, [sp, #4]
 8001052:	e7e6      	b.n	8001022 <I2C_Slave_ISR_IT+0x14a>
    __HAL_UNLOCK(hi2c);
 8001054:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001056:	61c8      	str	r0, [r1, #28]
    __HAL_UNLOCK(hi2c);
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e763      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 800105c:	2302      	movs	r3, #2
 800105e:	421d      	tst	r5, r3
 8001060:	d100      	bne.n	8001064 <I2C_Slave_ISR_IT+0x18c>
 8001062:	e75f      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
 8001064:	421f      	tst	r7, r3
 8001066:	d100      	bne.n	800106a <I2C_Slave_ISR_IT+0x192>
 8001068:	e75c      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
    if (hi2c->XferCount > 0U)
 800106a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00d      	beq.n	800108c <I2C_Slave_ISR_IT+0x1b4>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001072:	6822      	ldr	r2, [r4, #0]
 8001074:	1c59      	adds	r1, r3, #1
 8001076:	6261      	str	r1, [r4, #36]	; 0x24
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800107c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800107e:	3b01      	subs	r3, #1
 8001080:	b29b      	uxth	r3, r3
 8001082:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001084:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001086:	3b01      	subs	r3, #1
 8001088:	8523      	strh	r3, [r4, #40]	; 0x28
 800108a:	e74b      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001090:	045b      	lsls	r3, r3, #17
 8001092:	429a      	cmp	r2, r3
 8001094:	d100      	bne.n	8001098 <I2C_Slave_ISR_IT+0x1c0>
 8001096:	e762      	b.n	8000f5e <I2C_Slave_ISR_IT+0x86>
 8001098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800109a:	2b00      	cmp	r3, #0
 800109c:	d100      	bne.n	80010a0 <I2C_Slave_ISR_IT+0x1c8>
 800109e:	e75e      	b.n	8000f5e <I2C_Slave_ISR_IT+0x86>
 80010a0:	e740      	b.n	8000f24 <I2C_Slave_ISR_IT+0x4c>
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	ffff0000 	.word	0xffff0000

080010a8 <HAL_I2C_ER_IRQHandler>:
{
 80010a8:	b570      	push	{r4, r5, r6, lr}
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80010aa:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80010ac:	6803      	ldr	r3, [r0, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80010ae:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80010b0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80010b2:	681a      	ldr	r2, [r3, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80010b4:	4229      	tst	r1, r5
 80010b6:	d006      	beq.n	80010c6 <HAL_I2C_ER_IRQHandler+0x1e>
 80010b8:	0614      	lsls	r4, r2, #24
 80010ba:	d504      	bpl.n	80010c6 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80010bc:	2401      	movs	r4, #1
 80010be:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80010c0:	4334      	orrs	r4, r6
 80010c2:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80010c4:	61dd      	str	r5, [r3, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80010c6:	2580      	movs	r5, #128	; 0x80
 80010c8:	00ed      	lsls	r5, r5, #3
 80010ca:	4229      	tst	r1, r5
 80010cc:	d006      	beq.n	80010dc <HAL_I2C_ER_IRQHandler+0x34>
 80010ce:	0614      	lsls	r4, r2, #24
 80010d0:	d504      	bpl.n	80010dc <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80010d2:	2408      	movs	r4, #8
 80010d4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80010d6:	4334      	orrs	r4, r6
 80010d8:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80010da:	61dd      	str	r5, [r3, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	00a4      	lsls	r4, r4, #2
 80010e0:	4221      	tst	r1, r4
 80010e2:	d006      	beq.n	80010f2 <HAL_I2C_ER_IRQHandler+0x4a>
 80010e4:	0612      	lsls	r2, r2, #24
 80010e6:	d504      	bpl.n	80010f2 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80010e8:	2202      	movs	r2, #2
 80010ea:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80010ec:	430a      	orrs	r2, r1
 80010ee:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80010f0:	61dc      	str	r4, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80010f2:	230b      	movs	r3, #11
 80010f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80010f6:	421a      	tst	r2, r3
 80010f8:	d002      	beq.n	8001100 <HAL_I2C_ER_IRQHandler+0x58>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80010fa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80010fc:	f7ff fe00 	bl	8000d00 <I2C_ITError>
}
 8001100:	bd70      	pop	{r4, r5, r6, pc}

08001102 <I2C_DMAAbort>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001102:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001104:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	6802      	ldr	r2, [r0, #0]
{
 800110a:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800110c:	6851      	ldr	r1, [r2, #4]
 800110e:	430b      	orrs	r3, r1
 8001110:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001112:	2300      	movs	r3, #0
 8001114:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001116:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001118:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800111a:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800111c:	0003      	movs	r3, r0
 800111e:	3341      	adds	r3, #65	; 0x41
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	2a60      	cmp	r2, #96	; 0x60
 8001124:	d104      	bne.n	8001130 <I2C_DMAAbort+0x2e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001126:	3a40      	subs	r2, #64	; 0x40
 8001128:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800112a:	f7ff fde8 	bl	8000cfe <HAL_I2C_AbortCpltCallback>
}
 800112e:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001130:	f7ff fde4 	bl	8000cfc <HAL_I2C_ErrorCallback>
}
 8001134:	e7fb      	b.n	800112e <I2C_DMAAbort+0x2c>
	...

08001138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113a:	0004      	movs	r4, r0
 800113c:	3441      	adds	r4, #65	; 0x41
 800113e:	7822      	ldrb	r2, [r4, #0]
{
 8001140:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001142:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001144:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001146:	2a20      	cmp	r2, #32
 8001148:	d118      	bne.n	800117c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800114a:	001d      	movs	r5, r3
 800114c:	3540      	adds	r5, #64	; 0x40
 800114e:	782e      	ldrb	r6, [r5, #0]
 8001150:	2e01      	cmp	r6, #1
 8001152:	d013      	beq.n	800117c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001154:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001156:	3022      	adds	r0, #34	; 0x22
 8001158:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800115a:	681e      	ldr	r6, [r3, #0]
 800115c:	3823      	subs	r0, #35	; 0x23
 800115e:	4386      	bics	r6, r0
 8001160:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001162:	681e      	ldr	r6, [r3, #0]
 8001164:	4f06      	ldr	r7, [pc, #24]	; (8001180 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001166:	403e      	ands	r6, r7
 8001168:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800116a:	681e      	ldr	r6, [r3, #0]
 800116c:	4331      	orrs	r1, r6
 800116e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	4308      	orrs	r0, r1
 8001174:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001176:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001178:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800117a:	7028      	strb	r0, [r5, #0]
  }
}
 800117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	ffffefff 	.word	0xffffefff

08001184 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001186:	0005      	movs	r5, r0
 8001188:	3541      	adds	r5, #65	; 0x41
 800118a:	782a      	ldrb	r2, [r5, #0]
{
 800118c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800118e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001190:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001192:	2a20      	cmp	r2, #32
 8001194:	d117      	bne.n	80011c6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001196:	001c      	movs	r4, r3
 8001198:	3440      	adds	r4, #64	; 0x40
 800119a:	7826      	ldrb	r6, [r4, #0]
 800119c:	2e01      	cmp	r6, #1
 800119e:	d012      	beq.n	80011c6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80011a0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80011a2:	3022      	adds	r0, #34	; 0x22
 80011a4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80011a6:	681e      	ldr	r6, [r3, #0]
 80011a8:	3823      	subs	r0, #35	; 0x23
 80011aa:	4386      	bics	r6, r0
 80011ac:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80011ae:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80011b0:	4f05      	ldr	r7, [pc, #20]	; (80011c8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80011b2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80011b4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80011b6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80011b8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	4308      	orrs	r0, r1
 80011be:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80011c0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80011c2:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80011c4:	7020      	strb	r0, [r4, #0]
  }
}
 80011c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c8:	fffff0ff 	.word	0xfffff0ff

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	6803      	ldr	r3, [r0, #0]
{
 80011d0:	b085      	sub	sp, #20
 80011d2:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d4:	07db      	lsls	r3, r3, #31
 80011d6:	d433      	bmi.n	8001240 <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	079b      	lsls	r3, r3, #30
 80011dc:	d500      	bpl.n	80011e0 <HAL_RCC_OscConfig+0x14>
 80011de:	e08a      	b.n	80012f6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	071b      	lsls	r3, r3, #28
 80011e4:	d500      	bpl.n	80011e8 <HAL_RCC_OscConfig+0x1c>
 80011e6:	e0ca      	b.n	800137e <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	075b      	lsls	r3, r3, #29
 80011ec:	d500      	bpl.n	80011f0 <HAL_RCC_OscConfig+0x24>
 80011ee:	e0ed      	b.n	80013cc <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	06db      	lsls	r3, r3, #27
 80011f4:	d51a      	bpl.n	800122c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011f6:	696a      	ldr	r2, [r5, #20]
 80011f8:	4cbc      	ldr	r4, [pc, #752]	; (80014ec <HAL_RCC_OscConfig+0x320>)
 80011fa:	2304      	movs	r3, #4
 80011fc:	2a01      	cmp	r2, #1
 80011fe:	d000      	beq.n	8001202 <HAL_RCC_OscConfig+0x36>
 8001200:	e159      	b.n	80014b6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001202:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001204:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001206:	430b      	orrs	r3, r1
 8001208:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800120a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800120c:	431a      	orrs	r2, r3
 800120e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001210:	f7ff f936 	bl	8000480 <HAL_GetTick>
 8001214:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001218:	4233      	tst	r3, r6
 800121a:	d100      	bne.n	800121e <HAL_RCC_OscConfig+0x52>
 800121c:	e144      	b.n	80014a8 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800121e:	21f8      	movs	r1, #248	; 0xf8
 8001220:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001222:	69ab      	ldr	r3, [r5, #24]
 8001224:	438a      	bics	r2, r1
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4313      	orrs	r3, r2
 800122a:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	069b      	lsls	r3, r3, #26
 8001230:	d500      	bpl.n	8001234 <HAL_RCC_OscConfig+0x68>
 8001232:	e167      	b.n	8001504 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001234:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001236:	2900      	cmp	r1, #0
 8001238:	d000      	beq.n	800123c <HAL_RCC_OscConfig+0x70>
 800123a:	e1a4      	b.n	8001586 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800123c:	2000      	movs	r0, #0
 800123e:	e018      	b.n	8001272 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001240:	210c      	movs	r1, #12
 8001242:	4caa      	ldr	r4, [pc, #680]	; (80014ec <HAL_RCC_OscConfig+0x320>)
 8001244:	6862      	ldr	r2, [r4, #4]
 8001246:	400a      	ands	r2, r1
 8001248:	2a04      	cmp	r2, #4
 800124a:	d00b      	beq.n	8001264 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800124c:	6863      	ldr	r3, [r4, #4]
 800124e:	400b      	ands	r3, r1
 8001250:	2b08      	cmp	r3, #8
 8001252:	d110      	bne.n	8001276 <HAL_RCC_OscConfig+0xaa>
 8001254:	22c0      	movs	r2, #192	; 0xc0
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	0252      	lsls	r2, r2, #9
 800125a:	4013      	ands	r3, r2
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	0252      	lsls	r2, r2, #9
 8001260:	4293      	cmp	r3, r2
 8001262:	d108      	bne.n	8001276 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	039b      	lsls	r3, r3, #14
 8001268:	d5b6      	bpl.n	80011d8 <HAL_RCC_OscConfig+0xc>
 800126a:	686b      	ldr	r3, [r5, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1b3      	bne.n	80011d8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	b005      	add	sp, #20
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001276:	686b      	ldr	r3, [r5, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d113      	bne.n	80012a4 <HAL_RCC_OscConfig+0xd8>
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	6822      	ldr	r2, [r4, #0]
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	4313      	orrs	r3, r2
 8001284:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001286:	f7ff f8fb 	bl	8000480 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800128c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	02b6      	lsls	r6, r6, #10
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	4233      	tst	r3, r6
 8001294:	d1a0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001296:	f7ff f8f3 	bl	8000480 <HAL_GetTick>
 800129a:	1bc0      	subs	r0, r0, r7
 800129c:	2864      	cmp	r0, #100	; 0x64
 800129e:	d9f7      	bls.n	8001290 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80012a0:	2003      	movs	r0, #3
 80012a2:	e7e6      	b.n	8001272 <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d116      	bne.n	80012d6 <HAL_RCC_OscConfig+0x10a>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	4a91      	ldr	r2, [pc, #580]	; (80014f0 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ac:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	4013      	ands	r3, r2
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	4a8f      	ldr	r2, [pc, #572]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	4013      	ands	r3, r2
 80012ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012bc:	f7ff f8e0 	bl	8000480 <HAL_GetTick>
 80012c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	4233      	tst	r3, r6
 80012c6:	d100      	bne.n	80012ca <HAL_RCC_OscConfig+0xfe>
 80012c8:	e786      	b.n	80011d8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ca:	f7ff f8d9 	bl	8000480 <HAL_GetTick>
 80012ce:	1bc0      	subs	r0, r0, r7
 80012d0:	2864      	cmp	r0, #100	; 0x64
 80012d2:	d9f6      	bls.n	80012c2 <HAL_RCC_OscConfig+0xf6>
 80012d4:	e7e4      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d105      	bne.n	80012e6 <HAL_RCC_OscConfig+0x11a>
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	6822      	ldr	r2, [r4, #0]
 80012de:	02db      	lsls	r3, r3, #11
 80012e0:	4313      	orrs	r3, r2
 80012e2:	6023      	str	r3, [r4, #0]
 80012e4:	e7ca      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	4a81      	ldr	r2, [pc, #516]	; (80014f0 <HAL_RCC_OscConfig+0x324>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	4a80      	ldr	r2, [pc, #512]	; (80014f4 <HAL_RCC_OscConfig+0x328>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	e7c6      	b.n	8001284 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f6:	220c      	movs	r2, #12
 80012f8:	4c7c      	ldr	r4, [pc, #496]	; (80014ec <HAL_RCC_OscConfig+0x320>)
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	4213      	tst	r3, r2
 80012fe:	d00b      	beq.n	8001318 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001300:	6863      	ldr	r3, [r4, #4]
 8001302:	4013      	ands	r3, r2
 8001304:	2b08      	cmp	r3, #8
 8001306:	d115      	bne.n	8001334 <HAL_RCC_OscConfig+0x168>
 8001308:	22c0      	movs	r2, #192	; 0xc0
 800130a:	6863      	ldr	r3, [r4, #4]
 800130c:	0252      	lsls	r2, r2, #9
 800130e:	4013      	ands	r3, r2
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	0212      	lsls	r2, r2, #8
 8001314:	4293      	cmp	r3, r2
 8001316:	d10d      	bne.n	8001334 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	079b      	lsls	r3, r3, #30
 800131c:	d502      	bpl.n	8001324 <HAL_RCC_OscConfig+0x158>
 800131e:	68eb      	ldr	r3, [r5, #12]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d1a5      	bne.n	8001270 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	21f8      	movs	r1, #248	; 0xf8
 8001326:	6822      	ldr	r2, [r4, #0]
 8001328:	692b      	ldr	r3, [r5, #16]
 800132a:	438a      	bics	r2, r1
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4313      	orrs	r3, r2
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	e755      	b.n	80011e0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001334:	68ea      	ldr	r2, [r5, #12]
 8001336:	2301      	movs	r3, #1
 8001338:	2a00      	cmp	r2, #0
 800133a:	d00f      	beq.n	800135c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800133c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001340:	4313      	orrs	r3, r2
 8001342:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001344:	f7ff f89c 	bl	8000480 <HAL_GetTick>
 8001348:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	4233      	tst	r3, r6
 800134e:	d1e9      	bne.n	8001324 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff f896 	bl	8000480 <HAL_GetTick>
 8001354:	1bc0      	subs	r0, r0, r7
 8001356:	2802      	cmp	r0, #2
 8001358:	d9f7      	bls.n	800134a <HAL_RCC_OscConfig+0x17e>
 800135a:	e7a1      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 800135c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001360:	439a      	bics	r2, r3
 8001362:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8001364:	f7ff f88c 	bl	8000480 <HAL_GetTick>
 8001368:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	4233      	tst	r3, r6
 800136e:	d100      	bne.n	8001372 <HAL_RCC_OscConfig+0x1a6>
 8001370:	e736      	b.n	80011e0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff f885 	bl	8000480 <HAL_GetTick>
 8001376:	1bc0      	subs	r0, r0, r7
 8001378:	2802      	cmp	r0, #2
 800137a:	d9f6      	bls.n	800136a <HAL_RCC_OscConfig+0x19e>
 800137c:	e790      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137e:	69ea      	ldr	r2, [r5, #28]
 8001380:	2301      	movs	r3, #1
 8001382:	4c5a      	ldr	r4, [pc, #360]	; (80014ec <HAL_RCC_OscConfig+0x320>)
 8001384:	2a00      	cmp	r2, #0
 8001386:	d010      	beq.n	80013aa <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8001388:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800138c:	4313      	orrs	r3, r2
 800138e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001390:	f7ff f876 	bl	8000480 <HAL_GetTick>
 8001394:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001398:	4233      	tst	r3, r6
 800139a:	d000      	beq.n	800139e <HAL_RCC_OscConfig+0x1d2>
 800139c:	e724      	b.n	80011e8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff f86f 	bl	8000480 <HAL_GetTick>
 80013a2:	1bc0      	subs	r0, r0, r7
 80013a4:	2802      	cmp	r0, #2
 80013a6:	d9f6      	bls.n	8001396 <HAL_RCC_OscConfig+0x1ca>
 80013a8:	e77a      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 80013aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80013ae:	439a      	bics	r2, r3
 80013b0:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80013b2:	f7ff f865 	bl	8000480 <HAL_GetTick>
 80013b6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013ba:	4233      	tst	r3, r6
 80013bc:	d100      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1f4>
 80013be:	e713      	b.n	80011e8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff f85e 	bl	8000480 <HAL_GetTick>
 80013c4:	1bc0      	subs	r0, r0, r7
 80013c6:	2802      	cmp	r0, #2
 80013c8:	d9f6      	bls.n	80013b8 <HAL_RCC_OscConfig+0x1ec>
 80013ca:	e769      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013cc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d0:	4c46      	ldr	r4, [pc, #280]	; (80014ec <HAL_RCC_OscConfig+0x320>)
 80013d2:	0552      	lsls	r2, r2, #21
 80013d4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d8:	4213      	tst	r3, r2
 80013da:	d108      	bne.n	80013ee <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	69e3      	ldr	r3, [r4, #28]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61e3      	str	r3, [r4, #28]
 80013e2:	69e3      	ldr	r3, [r4, #28]
 80013e4:	4013      	ands	r3, r2
 80013e6:	9303      	str	r3, [sp, #12]
 80013e8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	2780      	movs	r7, #128	; 0x80
 80013f0:	4e41      	ldr	r6, [pc, #260]	; (80014f8 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	007f      	lsls	r7, r7, #1
 80013f4:	6833      	ldr	r3, [r6, #0]
 80013f6:	423b      	tst	r3, r7
 80013f8:	d006      	beq.n	8001408 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fa:	68ab      	ldr	r3, [r5, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d113      	bne.n	8001428 <HAL_RCC_OscConfig+0x25c>
 8001400:	6a22      	ldr	r2, [r4, #32]
 8001402:	4313      	orrs	r3, r2
 8001404:	6223      	str	r3, [r4, #32]
 8001406:	e030      	b.n	800146a <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001408:	6833      	ldr	r3, [r6, #0]
 800140a:	433b      	orrs	r3, r7
 800140c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800140e:	f7ff f837 	bl	8000480 <HAL_GetTick>
 8001412:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	6833      	ldr	r3, [r6, #0]
 8001416:	423b      	tst	r3, r7
 8001418:	d1ef      	bne.n	80013fa <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff f831 	bl	8000480 <HAL_GetTick>
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	1ac0      	subs	r0, r0, r3
 8001422:	2864      	cmp	r0, #100	; 0x64
 8001424:	d9f6      	bls.n	8001414 <HAL_RCC_OscConfig+0x248>
 8001426:	e73b      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001428:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142a:	2b00      	cmp	r3, #0
 800142c:	d114      	bne.n	8001458 <HAL_RCC_OscConfig+0x28c>
 800142e:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001432:	4393      	bics	r3, r2
 8001434:	6223      	str	r3, [r4, #32]
 8001436:	6a23      	ldr	r3, [r4, #32]
 8001438:	3203      	adds	r2, #3
 800143a:	4393      	bics	r3, r2
 800143c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800143e:	f7ff f81f 	bl	8000480 <HAL_GetTick>
 8001442:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	6a23      	ldr	r3, [r4, #32]
 8001446:	423b      	tst	r3, r7
 8001448:	d025      	beq.n	8001496 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff f819 	bl	8000480 <HAL_GetTick>
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x330>)
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	4298      	cmp	r0, r3
 8001454:	d9f6      	bls.n	8001444 <HAL_RCC_OscConfig+0x278>
 8001456:	e723      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	2b05      	cmp	r3, #5
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x2a8>
 800145c:	6a21      	ldr	r1, [r4, #32]
 800145e:	3b01      	subs	r3, #1
 8001460:	430b      	orrs	r3, r1
 8001462:	6223      	str	r3, [r4, #32]
 8001464:	6a23      	ldr	r3, [r4, #32]
 8001466:	431a      	orrs	r2, r3
 8001468:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800146a:	f7ff f809 	bl	8000480 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001470:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001472:	e00d      	b.n	8001490 <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	6a23      	ldr	r3, [r4, #32]
 8001476:	4393      	bics	r3, r2
 8001478:	2204      	movs	r2, #4
 800147a:	6223      	str	r3, [r4, #32]
 800147c:	6a23      	ldr	r3, [r4, #32]
 800147e:	4393      	bics	r3, r2
 8001480:	e7c0      	b.n	8001404 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7fe fffd 	bl	8000480 <HAL_GetTick>
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_RCC_OscConfig+0x330>)
 8001488:	1b80      	subs	r0, r0, r6
 800148a:	4298      	cmp	r0, r3
 800148c:	d900      	bls.n	8001490 <HAL_RCC_OscConfig+0x2c4>
 800148e:	e707      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	6a23      	ldr	r3, [r4, #32]
 8001492:	423b      	tst	r3, r7
 8001494:	d0f5      	beq.n	8001482 <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8001496:	9b00      	ldr	r3, [sp, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d000      	beq.n	800149e <HAL_RCC_OscConfig+0x2d2>
 800149c:	e6a8      	b.n	80011f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	69e3      	ldr	r3, [r4, #28]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_RCC_OscConfig+0x334>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	61e3      	str	r3, [r4, #28]
 80014a6:	e6a3      	b.n	80011f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014a8:	f7fe ffea 	bl	8000480 <HAL_GetTick>
 80014ac:	1bc0      	subs	r0, r0, r7
 80014ae:	2802      	cmp	r0, #2
 80014b0:	d800      	bhi.n	80014b4 <HAL_RCC_OscConfig+0x2e8>
 80014b2:	e6b0      	b.n	8001216 <HAL_RCC_OscConfig+0x4a>
 80014b4:	e6f4      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014b6:	3205      	adds	r2, #5
 80014b8:	d103      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 80014ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80014bc:	439a      	bics	r2, r3
 80014be:	6362      	str	r2, [r4, #52]	; 0x34
 80014c0:	e6ad      	b.n	800121e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80014c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014c4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80014c6:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80014c8:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ca:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80014cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014ce:	4393      	bics	r3, r2
 80014d0:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80014d2:	f7fe ffd5 	bl	8000480 <HAL_GetTick>
 80014d6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014da:	4233      	tst	r3, r6
 80014dc:	d100      	bne.n	80014e0 <HAL_RCC_OscConfig+0x314>
 80014de:	e6a5      	b.n	800122c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014e0:	f7fe ffce 	bl	8000480 <HAL_GetTick>
 80014e4:	1bc0      	subs	r0, r0, r7
 80014e6:	2802      	cmp	r0, #2
 80014e8:	d9f6      	bls.n	80014d8 <HAL_RCC_OscConfig+0x30c>
 80014ea:	e6d9      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	fffeffff 	.word	0xfffeffff
 80014f4:	fffbffff 	.word	0xfffbffff
 80014f8:	40007000 	.word	0x40007000
 80014fc:	00001388 	.word	0x00001388
 8001500:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001504:	210c      	movs	r1, #12
 8001506:	4c46      	ldr	r4, [pc, #280]	; (8001620 <HAL_RCC_OscConfig+0x454>)
 8001508:	6862      	ldr	r2, [r4, #4]
 800150a:	400a      	ands	r2, r1
 800150c:	428a      	cmp	r2, r1
 800150e:	d009      	beq.n	8001524 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001510:	6863      	ldr	r3, [r4, #4]
 8001512:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001514:	2b08      	cmp	r3, #8
 8001516:	d10e      	bne.n	8001536 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001518:	22c0      	movs	r2, #192	; 0xc0
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	0252      	lsls	r2, r2, #9
 800151e:	4013      	ands	r3, r2
 8001520:	4293      	cmp	r3, r2
 8001522:	d108      	bne.n	8001536 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001526:	03db      	lsls	r3, r3, #15
 8001528:	d400      	bmi.n	800152c <HAL_RCC_OscConfig+0x360>
 800152a:	e683      	b.n	8001234 <HAL_RCC_OscConfig+0x68>
 800152c:	6a2b      	ldr	r3, [r5, #32]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d000      	beq.n	8001534 <HAL_RCC_OscConfig+0x368>
 8001532:	e69d      	b.n	8001270 <HAL_RCC_OscConfig+0xa4>
 8001534:	e67e      	b.n	8001234 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001536:	6a2b      	ldr	r3, [r5, #32]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d011      	beq.n	8001560 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 800153c:	2680      	movs	r6, #128	; 0x80
 800153e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001540:	0276      	lsls	r6, r6, #9
 8001542:	4333      	orrs	r3, r6
 8001544:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001546:	f7fe ff9b 	bl	8000480 <HAL_GetTick>
 800154a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800154c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800154e:	4233      	tst	r3, r6
 8001550:	d000      	beq.n	8001554 <HAL_RCC_OscConfig+0x388>
 8001552:	e66f      	b.n	8001234 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001554:	f7fe ff94 	bl	8000480 <HAL_GetTick>
 8001558:	1bc0      	subs	r0, r0, r7
 800155a:	2802      	cmp	r0, #2
 800155c:	d9f6      	bls.n	800154c <HAL_RCC_OscConfig+0x380>
 800155e:	e69f      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 8001560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001562:	4a30      	ldr	r2, [pc, #192]	; (8001624 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001564:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001566:	4013      	ands	r3, r2
 8001568:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 800156a:	f7fe ff89 	bl	8000480 <HAL_GetTick>
 800156e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001570:	0276      	lsls	r6, r6, #9
 8001572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001574:	4233      	tst	r3, r6
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x3ae>
 8001578:	e65c      	b.n	8001234 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800157a:	f7fe ff81 	bl	8000480 <HAL_GetTick>
 800157e:	1bc0      	subs	r0, r0, r7
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f6      	bls.n	8001572 <HAL_RCC_OscConfig+0x3a6>
 8001584:	e68c      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001586:	220c      	movs	r2, #12
 8001588:	4c25      	ldr	r4, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x454>)
 800158a:	6863      	ldr	r3, [r4, #4]
 800158c:	4013      	ands	r3, r2
 800158e:	2b08      	cmp	r3, #8
 8001590:	d100      	bne.n	8001594 <HAL_RCC_OscConfig+0x3c8>
 8001592:	e66d      	b.n	8001270 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	4a24      	ldr	r2, [pc, #144]	; (8001628 <HAL_RCC_OscConfig+0x45c>)
 8001598:	4013      	ands	r3, r2
 800159a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159c:	2902      	cmp	r1, #2
 800159e:	d12f      	bne.n	8001600 <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 80015a0:	f7fe ff6e 	bl	8000480 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80015a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a8:	04b6      	lsls	r6, r6, #18
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	4233      	tst	r3, r6
 80015ae:	d121      	bne.n	80015f4 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b0:	220f      	movs	r2, #15
 80015b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015b4:	4393      	bics	r3, r2
 80015b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80015b8:	4313      	orrs	r3, r2
 80015ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015bc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80015be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80015c0:	6862      	ldr	r2, [r4, #4]
 80015c2:	430b      	orrs	r3, r1
 80015c4:	4919      	ldr	r1, [pc, #100]	; (800162c <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c8:	400a      	ands	r2, r1
 80015ca:	4313      	orrs	r3, r2
 80015cc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	6822      	ldr	r2, [r4, #0]
 80015d2:	045b      	lsls	r3, r3, #17
 80015d4:	4313      	orrs	r3, r2
 80015d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015d8:	f7fe ff52 	bl	8000480 <HAL_GetTick>
 80015dc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015de:	04ad      	lsls	r5, r5, #18
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	422b      	tst	r3, r5
 80015e4:	d000      	beq.n	80015e8 <HAL_RCC_OscConfig+0x41c>
 80015e6:	e629      	b.n	800123c <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7fe ff4a 	bl	8000480 <HAL_GetTick>
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	2802      	cmp	r0, #2
 80015f0:	d9f6      	bls.n	80015e0 <HAL_RCC_OscConfig+0x414>
 80015f2:	e655      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7fe ff44 	bl	8000480 <HAL_GetTick>
 80015f8:	1bc0      	subs	r0, r0, r7
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9d5      	bls.n	80015aa <HAL_RCC_OscConfig+0x3de>
 80015fe:	e64f      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8001600:	f7fe ff3e 	bl	8000480 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001606:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001608:	04ad      	lsls	r5, r5, #18
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	422b      	tst	r3, r5
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x446>
 8001610:	e614      	b.n	800123c <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001612:	f7fe ff35 	bl	8000480 <HAL_GetTick>
 8001616:	1b80      	subs	r0, r0, r6
 8001618:	2802      	cmp	r0, #2
 800161a:	d9f6      	bls.n	800160a <HAL_RCC_OscConfig+0x43e>
 800161c:	e640      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	fffeffff 	.word	0xfffeffff
 8001628:	feffffff 	.word	0xfeffffff
 800162c:	ffc27fff 	.word	0xffc27fff

08001630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001632:	4c1c      	ldr	r4, [pc, #112]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8001634:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001636:	2210      	movs	r2, #16
 8001638:	0021      	movs	r1, r4
 800163a:	4668      	mov	r0, sp
 800163c:	f001 fbd0 	bl	8002de0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001640:	0021      	movs	r1, r4
 8001642:	ad04      	add	r5, sp, #16
 8001644:	2210      	movs	r2, #16
 8001646:	3110      	adds	r1, #16
 8001648:	0028      	movs	r0, r5
 800164a:	f001 fbc9 	bl	8002de0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800164e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001650:	4e15      	ldr	r6, [pc, #84]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001652:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001654:	401a      	ands	r2, r3
 8001656:	2a08      	cmp	r2, #8
 8001658:	d008      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x3c>
 800165a:	2a0c      	cmp	r2, #12
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x36>
 800165e:	2a04      	cmp	r2, #4
 8001660:	d11e      	bne.n	80016a0 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <HAL_RCC_GetSysClockFreq+0x7c>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8001664:	e000      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x38>
      sysclockfreq = HSI48_VALUE;
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001668:	b008      	add	sp, #32
 800166a:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800166c:	200f      	movs	r0, #15
 800166e:	466a      	mov	r2, sp
 8001670:	0c99      	lsrs	r1, r3, #18
 8001672:	4001      	ands	r1, r0
 8001674:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001676:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001678:	4002      	ands	r2, r0
 800167a:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800167c:	22c0      	movs	r2, #192	; 0xc0
 800167e:	2080      	movs	r0, #128	; 0x80
 8001680:	0252      	lsls	r2, r2, #9
 8001682:	4013      	ands	r3, r2
 8001684:	0240      	lsls	r0, r0, #9
 8001686:	4283      	cmp	r3, r0
 8001688:	d104      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0x64>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800168c:	f7fe fd58 	bl	8000140 <__udivsi3>
 8001690:	4360      	muls	r0, r4
 8001692:	e7e9      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x38>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_RCC_GetSysClockFreq+0x6c>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x80>)
 800169a:	e7f7      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x84>)
 800169e:	e7f5      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x84>)
      break;
 80016a2:	e7e1      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x38>
 80016a4:	08003650 	.word	0x08003650
 80016a8:	40021000 	.word	0x40021000
 80016ac:	00f42400 	.word	0x00f42400
 80016b0:	02dc6c00 	.word	0x02dc6c00
 80016b4:	007a1200 	.word	0x007a1200

080016b8 <HAL_RCC_ClockConfig>:
{
 80016b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016ba:	2201      	movs	r2, #1
 80016bc:	4c4f      	ldr	r4, [pc, #316]	; (80017fc <HAL_RCC_ClockConfig+0x144>)
{
 80016be:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016c0:	6823      	ldr	r3, [r4, #0]
{
 80016c2:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016c4:	4013      	ands	r3, r2
 80016c6:	428b      	cmp	r3, r1
 80016c8:	d31f      	bcc.n	800170a <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ca:	6832      	ldr	r2, [r6, #0]
 80016cc:	0793      	lsls	r3, r2, #30
 80016ce:	d428      	bmi.n	8001722 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d0:	07d3      	lsls	r3, r2, #31
 80016d2:	d42e      	bmi.n	8001732 <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016d4:	2301      	movs	r3, #1
 80016d6:	6822      	ldr	r2, [r4, #0]
 80016d8:	9901      	ldr	r1, [sp, #4]
 80016da:	401a      	ands	r2, r3
 80016dc:	4291      	cmp	r1, r2
 80016de:	d200      	bcs.n	80016e2 <HAL_RCC_ClockConfig+0x2a>
 80016e0:	e07e      	b.n	80017e0 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e2:	6833      	ldr	r3, [r6, #0]
 80016e4:	4c46      	ldr	r4, [pc, #280]	; (8001800 <HAL_RCC_ClockConfig+0x148>)
 80016e6:	075b      	lsls	r3, r3, #29
 80016e8:	d500      	bpl.n	80016ec <HAL_RCC_ClockConfig+0x34>
 80016ea:	e080      	b.n	80017ee <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016ec:	f7ff ffa0 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	4a44      	ldr	r2, [pc, #272]	; (8001804 <HAL_RCC_ClockConfig+0x14c>)
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	0f1b      	lsrs	r3, r3, #28
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	40d8      	lsrs	r0, r3
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <HAL_RCC_ClockConfig+0x150>)
 80016fe:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001700:	2000      	movs	r0, #0
 8001702:	f7fe fe93 	bl	800042c <HAL_InitTick>
  return HAL_OK;
 8001706:	2000      	movs	r0, #0
 8001708:	e00a      	b.n	8001720 <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	9901      	ldr	r1, [sp, #4]
 800170e:	4393      	bics	r3, r2
 8001710:	430b      	orrs	r3, r1
 8001712:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	4013      	ands	r3, r2
 8001718:	9a01      	ldr	r2, [sp, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d0d5      	beq.n	80016ca <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
}
 8001720:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001722:	20f0      	movs	r0, #240	; 0xf0
 8001724:	4936      	ldr	r1, [pc, #216]	; (8001800 <HAL_RCC_ClockConfig+0x148>)
 8001726:	684b      	ldr	r3, [r1, #4]
 8001728:	4383      	bics	r3, r0
 800172a:	68b0      	ldr	r0, [r6, #8]
 800172c:	4303      	orrs	r3, r0
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e7ce      	b.n	80016d0 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	6872      	ldr	r2, [r6, #4]
 8001734:	4d32      	ldr	r5, [pc, #200]	; (8001800 <HAL_RCC_ClockConfig+0x148>)
 8001736:	2a01      	cmp	r2, #1
 8001738:	d11a      	bne.n	8001770 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	039b      	lsls	r3, r3, #14
 800173e:	d5ee      	bpl.n	800171e <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001740:	2103      	movs	r1, #3
 8001742:	686b      	ldr	r3, [r5, #4]
 8001744:	438b      	bics	r3, r1
 8001746:	4313      	orrs	r3, r2
 8001748:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800174a:	f7fe fe99 	bl	8000480 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001750:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	2b01      	cmp	r3, #1
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001756:	220c      	movs	r2, #12
 8001758:	686b      	ldr	r3, [r5, #4]
 800175a:	4013      	ands	r3, r2
 800175c:	2b04      	cmp	r3, #4
 800175e:	d0b9      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7fe fe8e 	bl	8000480 <HAL_GetTick>
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_RCC_ClockConfig+0x154>)
 8001766:	1bc0      	subs	r0, r0, r7
 8001768:	4298      	cmp	r0, r3
 800176a:	d9f4      	bls.n	8001756 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 800176c:	2003      	movs	r0, #3
 800176e:	e7d7      	b.n	8001720 <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001770:	2a02      	cmp	r2, #2
 8001772:	d103      	bne.n	800177c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	019b      	lsls	r3, r3, #6
 8001778:	d4e2      	bmi.n	8001740 <HAL_RCC_ClockConfig+0x88>
 800177a:	e7d0      	b.n	800171e <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800177c:	2a03      	cmp	r2, #3
 800177e:	d103      	bne.n	8001788 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001780:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001782:	03db      	lsls	r3, r3, #15
 8001784:	d4dc      	bmi.n	8001740 <HAL_RCC_ClockConfig+0x88>
 8001786:	e7ca      	b.n	800171e <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	079b      	lsls	r3, r3, #30
 800178c:	d4d8      	bmi.n	8001740 <HAL_RCC_ClockConfig+0x88>
 800178e:	e7c6      	b.n	800171e <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001790:	2b02      	cmp	r3, #2
 8001792:	d10b      	bne.n	80017ac <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	220c      	movs	r2, #12
 8001796:	686b      	ldr	r3, [r5, #4]
 8001798:	4013      	ands	r3, r2
 800179a:	2b08      	cmp	r3, #8
 800179c:	d09a      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179e:	f7fe fe6f 	bl	8000480 <HAL_GetTick>
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_ClockConfig+0x154>)
 80017a4:	1bc0      	subs	r0, r0, r7
 80017a6:	4298      	cmp	r0, r3
 80017a8:	d9f4      	bls.n	8001794 <HAL_RCC_ClockConfig+0xdc>
 80017aa:	e7df      	b.n	800176c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d011      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b0:	220c      	movs	r2, #12
 80017b2:	686b      	ldr	r3, [r5, #4]
 80017b4:	4213      	tst	r3, r2
 80017b6:	d100      	bne.n	80017ba <HAL_RCC_ClockConfig+0x102>
 80017b8:	e78c      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ba:	f7fe fe61 	bl	8000480 <HAL_GetTick>
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCC_ClockConfig+0x154>)
 80017c0:	1bc0      	subs	r0, r0, r7
 80017c2:	4298      	cmp	r0, r3
 80017c4:	d9f4      	bls.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
 80017c6:	e7d1      	b.n	800176c <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7fe fe5a 	bl	8000480 <HAL_GetTick>
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_RCC_ClockConfig+0x154>)
 80017ce:	1bc0      	subs	r0, r0, r7
 80017d0:	4298      	cmp	r0, r3
 80017d2:	d8cb      	bhi.n	800176c <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80017d4:	220c      	movs	r2, #12
 80017d6:	686b      	ldr	r3, [r5, #4]
 80017d8:	4013      	ands	r3, r2
 80017da:	4293      	cmp	r3, r2
 80017dc:	d1f4      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x110>
 80017de:	e779      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e0:	6822      	ldr	r2, [r4, #0]
 80017e2:	439a      	bics	r2, r3
 80017e4:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	421a      	tst	r2, r3
 80017ea:	d198      	bne.n	800171e <HAL_RCC_ClockConfig+0x66>
 80017ec:	e779      	b.n	80016e2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017ee:	6863      	ldr	r3, [r4, #4]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_RCC_ClockConfig+0x158>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	68f2      	ldr	r2, [r6, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	6063      	str	r3, [r4, #4]
 80017fa:	e777      	b.n	80016ec <HAL_RCC_ClockConfig+0x34>
 80017fc:	40022000 	.word	0x40022000
 8001800:	40021000 	.word	0x40021000
 8001804:	080036b0 	.word	0x080036b0
 8001808:	20000000 	.word	0x20000000
 800180c:	00001388 	.word	0x00001388
 8001810:	fffff8ff 	.word	0xfffff8ff

08001814 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001814:	4b01      	ldr	r3, [pc, #4]	; (800181c <HAL_RCC_GetHCLKFreq+0x8>)
 8001816:	6818      	ldr	r0, [r3, #0]
}
 8001818:	4770      	bx	lr
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000000 	.word	0x20000000

08001820 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	055b      	lsls	r3, r3, #21
 8001828:	0f5b      	lsrs	r3, r3, #29
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800182e:	6810      	ldr	r0, [r2, #0]
 8001830:	40d8      	lsrs	r0, r3
}    
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000
 8001838:	080036c0 	.word	0x080036c0
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001842:	6803      	ldr	r3, [r0, #0]
{
 8001844:	b085      	sub	sp, #20
 8001846:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001848:	03db      	lsls	r3, r3, #15
 800184a:	d528      	bpl.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001850:	4c40      	ldr	r4, [pc, #256]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001852:	0552      	lsls	r2, r2, #21
 8001854:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001856:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001858:	4213      	tst	r3, r2
 800185a:	d108      	bne.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	69e3      	ldr	r3, [r4, #28]
 800185e:	4313      	orrs	r3, r2
 8001860:	61e3      	str	r3, [r4, #28]
 8001862:	69e3      	ldr	r3, [r4, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	9303      	str	r3, [sp, #12]
 8001868:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	2780      	movs	r7, #128	; 0x80
 8001870:	4e39      	ldr	r6, [pc, #228]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001872:	007f      	lsls	r7, r7, #1
 8001874:	6833      	ldr	r3, [r6, #0]
 8001876:	423b      	tst	r3, r7
 8001878:	d038      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800187a:	22c0      	movs	r2, #192	; 0xc0
 800187c:	6a23      	ldr	r3, [r4, #32]
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	4e36      	ldr	r6, [pc, #216]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001884:	d144      	bne.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001886:	6a23      	ldr	r3, [r4, #32]
 8001888:	401e      	ands	r6, r3
 800188a:	686b      	ldr	r3, [r5, #4]
 800188c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800188e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001890:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001892:	2b01      	cmp	r3, #1
 8001894:	d103      	bne.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001896:	69e3      	ldr	r3, [r4, #28]
 8001898:	4a31      	ldr	r2, [pc, #196]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 800189a:	4013      	ands	r3, r2
 800189c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800189e:	682a      	ldr	r2, [r5, #0]
 80018a0:	07d3      	lsls	r3, r2, #31
 80018a2:	d506      	bpl.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018a4:	2003      	movs	r0, #3
 80018a6:	492b      	ldr	r1, [pc, #172]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80018a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80018aa:	4383      	bics	r3, r0
 80018ac:	68a8      	ldr	r0, [r5, #8]
 80018ae:	4303      	orrs	r3, r0
 80018b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018b2:	0693      	lsls	r3, r2, #26
 80018b4:	d506      	bpl.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018b6:	2010      	movs	r0, #16
 80018b8:	4926      	ldr	r1, [pc, #152]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80018ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80018bc:	4383      	bics	r3, r0
 80018be:	68e8      	ldr	r0, [r5, #12]
 80018c0:	4303      	orrs	r3, r0
 80018c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018c4:	0393      	lsls	r3, r2, #14
 80018c6:	d506      	bpl.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018c8:	2080      	movs	r0, #128	; 0x80
 80018ca:	4922      	ldr	r1, [pc, #136]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80018cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80018ce:	4383      	bics	r3, r0
 80018d0:	6968      	ldr	r0, [r5, #20]
 80018d2:	4303      	orrs	r3, r0
 80018d4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018d6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018d8:	0553      	lsls	r3, r2, #21
 80018da:	d517      	bpl.n	800190c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018dc:	2140      	movs	r1, #64	; 0x40
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80018e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018e2:	438b      	bics	r3, r1
 80018e4:	6929      	ldr	r1, [r5, #16]
 80018e6:	430b      	orrs	r3, r1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	e00f      	b.n	800190c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ec:	6833      	ldr	r3, [r6, #0]
 80018ee:	433b      	orrs	r3, r7
 80018f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018f2:	f7fe fdc5 	bl	8000480 <HAL_GetTick>
 80018f6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	423b      	tst	r3, r7
 80018fc:	d1bd      	bne.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7fe fdbf 	bl	8000480 <HAL_GetTick>
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	1ac0      	subs	r0, r0, r3
 8001906:	2864      	cmp	r0, #100	; 0x64
 8001908:	d9f6      	bls.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 800190a:	2003      	movs	r0, #3
}
 800190c:	b005      	add	sp, #20
 800190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001910:	6869      	ldr	r1, [r5, #4]
 8001912:	400a      	ands	r2, r1
 8001914:	4293      	cmp	r3, r2
 8001916:	d0b6      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001918:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800191a:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800191c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800191e:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	4303      	orrs	r3, r0
 8001924:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001926:	6a23      	ldr	r3, [r4, #32]
 8001928:	480e      	ldr	r0, [pc, #56]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800192a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800192c:	4003      	ands	r3, r0
 800192e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001930:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001932:	07d3      	lsls	r3, r2, #31
 8001934:	d5a7      	bpl.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001936:	f7fe fda3 	bl	8000480 <HAL_GetTick>
 800193a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	2202      	movs	r2, #2
 800193e:	6a23      	ldr	r3, [r4, #32]
 8001940:	4213      	tst	r3, r2
 8001942:	d1a0      	bne.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7fe fd9c 	bl	8000480 <HAL_GetTick>
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800194a:	1bc0      	subs	r0, r0, r7
 800194c:	4298      	cmp	r0, r3
 800194e:	d9f5      	bls.n	800193c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001950:	e7db      	b.n	800190a <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	fffffcff 	.word	0xfffffcff
 8001960:	efffffff 	.word	0xefffffff
 8001964:	fffeffff 	.word	0xfffeffff
 8001968:	00001388 	.word	0x00001388

0800196c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800196c:	2201      	movs	r2, #1
 800196e:	6803      	ldr	r3, [r0, #0]
 8001970:	68d9      	ldr	r1, [r3, #12]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001972:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001974:	4311      	orrs	r1, r2
 8001976:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
}
 800197e:	4770      	bx	lr

08001980 <HAL_TIM_OC_DelayElapsedCallback>:
 8001980:	4770      	bx	lr

08001982 <HAL_TIM_IC_CaptureCallback>:
 8001982:	4770      	bx	lr

08001984 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001984:	4770      	bx	lr

08001986 <HAL_TIM_TriggerCallback>:
 8001986:	4770      	bx	lr

08001988 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001988:	2202      	movs	r2, #2
 800198a:	6803      	ldr	r3, [r0, #0]
{
 800198c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800198e:	6919      	ldr	r1, [r3, #16]
{
 8001990:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001992:	4211      	tst	r1, r2
 8001994:	d00e      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001996:	68d9      	ldr	r1, [r3, #12]
 8001998:	4211      	tst	r1, r2
 800199a:	d00b      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800199c:	3a05      	subs	r2, #5
 800199e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019a2:	3204      	adds	r2, #4
 80019a4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a6:	079b      	lsls	r3, r3, #30
 80019a8:	d100      	bne.n	80019ac <HAL_TIM_IRQHandler+0x24>
 80019aa:	e079      	b.n	8001aa0 <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80019ac:	f7ff ffe9 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b0:	2300      	movs	r3, #0
 80019b2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019b4:	2204      	movs	r2, #4
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	6919      	ldr	r1, [r3, #16]
 80019ba:	4211      	tst	r1, r2
 80019bc:	d010      	beq.n	80019e0 <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80019be:	68d9      	ldr	r1, [r3, #12]
 80019c0:	4211      	tst	r1, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019c4:	3a09      	subs	r2, #9
 80019c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019c8:	3207      	adds	r2, #7
 80019ca:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	23c0      	movs	r3, #192	; 0xc0
 80019d0:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80019d2:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019d4:	421a      	tst	r2, r3
 80019d6:	d069      	beq.n	8001aac <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80019d8:	f7ff ffd3 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019dc:	2300      	movs	r3, #0
 80019de:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019e0:	2208      	movs	r2, #8
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	6919      	ldr	r1, [r3, #16]
 80019e6:	4211      	tst	r1, r2
 80019e8:	d00e      	beq.n	8001a08 <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80019ea:	68d9      	ldr	r1, [r3, #12]
 80019ec:	4211      	tst	r1, r2
 80019ee:	d00b      	beq.n	8001a08 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019f0:	3a11      	subs	r2, #17
 80019f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019f4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019f6:	320d      	adds	r2, #13
 80019f8:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019fc:	079b      	lsls	r3, r3, #30
 80019fe:	d05b      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a00:	f7ff ffbf 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a04:	2300      	movs	r3, #0
 8001a06:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a08:	2210      	movs	r2, #16
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	6919      	ldr	r1, [r3, #16]
 8001a0e:	4211      	tst	r1, r2
 8001a10:	d010      	beq.n	8001a34 <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001a12:	68d9      	ldr	r1, [r3, #12]
 8001a14:	4211      	tst	r1, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a18:	3a21      	subs	r2, #33	; 0x21
 8001a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a1c:	3219      	adds	r2, #25
 8001a1e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	23c0      	movs	r3, #192	; 0xc0
 8001a24:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001a26:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a28:	421a      	tst	r2, r3
 8001a2a:	d04b      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2c:	f7ff ffa9 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a30:	2300      	movs	r3, #0
 8001a32:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a34:	2201      	movs	r2, #1
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	4211      	tst	r1, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	4211      	tst	r1, r2
 8001a42:	d004      	beq.n	8001a4e <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a44:	3a03      	subs	r2, #3
 8001a46:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a48:	0020      	movs	r0, r4
 8001a4a:	f000 fd9f 	bl	800258c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	6919      	ldr	r1, [r3, #16]
 8001a54:	4211      	tst	r1, r2
 8001a56:	d008      	beq.n	8001a6a <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a58:	68d9      	ldr	r1, [r3, #12]
 8001a5a:	4211      	tst	r1, r2
 8001a5c:	d005      	beq.n	8001a6a <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a5e:	3a02      	subs	r2, #2
 8001a60:	3aff      	subs	r2, #255	; 0xff
 8001a62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a64:	0020      	movs	r0, r4
 8001a66:	f000 f979 	bl	8001d5c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	6919      	ldr	r1, [r3, #16]
 8001a70:	4211      	tst	r1, r2
 8001a72:	d007      	beq.n	8001a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001a74:	68d9      	ldr	r1, [r3, #12]
 8001a76:	4211      	tst	r1, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a7a:	3a81      	subs	r2, #129	; 0x81
 8001a7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a7e:	0020      	movs	r0, r4
 8001a80:	f7ff ff81 	bl	8001986 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a84:	2220      	movs	r2, #32
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	6919      	ldr	r1, [r3, #16]
 8001a8a:	4211      	tst	r1, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	4211      	tst	r1, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a94:	3a41      	subs	r2, #65	; 0x41
 8001a96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001a98:	0020      	movs	r0, r4
 8001a9a:	f000 f95e 	bl	8001d5a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001a9e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa0:	f7ff ff6e 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	0020      	movs	r0, r4
 8001aa6:	f7ff ff6d 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
 8001aaa:	e781      	b.n	80019b0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aac:	f7ff ff68 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	0020      	movs	r0, r4
 8001ab2:	f7ff ff67 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ab6:	e791      	b.n	80019dc <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab8:	f7ff ff62 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001abc:	0020      	movs	r0, r4
 8001abe:	f7ff ff61 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ac2:	e79f      	b.n	8001a04 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac4:	f7ff ff5c 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac8:	0020      	movs	r0, r4
 8001aca:	f7ff ff5b 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ace:	e7af      	b.n	8001a30 <HAL_TIM_IRQHandler+0xa8>

08001ad0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <TIM_Base_SetConfig+0x78>)
{
 8001ad2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001ad4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad6:	4290      	cmp	r0, r2
 8001ad8:	d006      	beq.n	8001ae8 <TIM_Base_SetConfig+0x18>
 8001ada:	2480      	movs	r4, #128	; 0x80
 8001adc:	05e4      	lsls	r4, r4, #23
 8001ade:	42a0      	cmp	r0, r4
 8001ae0:	d002      	beq.n	8001ae8 <TIM_Base_SetConfig+0x18>
 8001ae2:	4c1a      	ldr	r4, [pc, #104]	; (8001b4c <TIM_Base_SetConfig+0x7c>)
 8001ae4:	42a0      	cmp	r0, r4
 8001ae6:	d10c      	bne.n	8001b02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ae8:	2470      	movs	r4, #112	; 0x70
 8001aea:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001aec:	684c      	ldr	r4, [r1, #4]
 8001aee:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001af0:	4290      	cmp	r0, r2
 8001af2:	d00f      	beq.n	8001b14 <TIM_Base_SetConfig+0x44>
 8001af4:	2480      	movs	r4, #128	; 0x80
 8001af6:	05e4      	lsls	r4, r4, #23
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d00b      	beq.n	8001b14 <TIM_Base_SetConfig+0x44>
 8001afc:	4c13      	ldr	r4, [pc, #76]	; (8001b4c <TIM_Base_SetConfig+0x7c>)
 8001afe:	42a0      	cmp	r0, r4
 8001b00:	d008      	beq.n	8001b14 <TIM_Base_SetConfig+0x44>
 8001b02:	4c13      	ldr	r4, [pc, #76]	; (8001b50 <TIM_Base_SetConfig+0x80>)
 8001b04:	42a0      	cmp	r0, r4
 8001b06:	d005      	beq.n	8001b14 <TIM_Base_SetConfig+0x44>
 8001b08:	4c12      	ldr	r4, [pc, #72]	; (8001b54 <TIM_Base_SetConfig+0x84>)
 8001b0a:	42a0      	cmp	r0, r4
 8001b0c:	d002      	beq.n	8001b14 <TIM_Base_SetConfig+0x44>
 8001b0e:	4c12      	ldr	r4, [pc, #72]	; (8001b58 <TIM_Base_SetConfig+0x88>)
 8001b10:	42a0      	cmp	r0, r4
 8001b12:	d103      	bne.n	8001b1c <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b14:	4c11      	ldr	r4, [pc, #68]	; (8001b5c <TIM_Base_SetConfig+0x8c>)
 8001b16:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b18:	68cc      	ldr	r4, [r1, #12]
 8001b1a:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b1c:	2480      	movs	r4, #128	; 0x80
 8001b1e:	43a3      	bics	r3, r4
 8001b20:	694c      	ldr	r4, [r1, #20]
 8001b22:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8001b24:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b26:	688b      	ldr	r3, [r1, #8]
 8001b28:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b2a:	680b      	ldr	r3, [r1, #0]
 8001b2c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b2e:	4290      	cmp	r0, r2
 8001b30:	d005      	beq.n	8001b3e <TIM_Base_SetConfig+0x6e>
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <TIM_Base_SetConfig+0x84>)
 8001b34:	4298      	cmp	r0, r3
 8001b36:	d002      	beq.n	8001b3e <TIM_Base_SetConfig+0x6e>
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <TIM_Base_SetConfig+0x88>)
 8001b3a:	4298      	cmp	r0, r3
 8001b3c:	d101      	bne.n	8001b42 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b3e:	690b      	ldr	r3, [r1, #16]
 8001b40:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001b42:	2301      	movs	r3, #1
 8001b44:	6143      	str	r3, [r0, #20]
}
 8001b46:	bd10      	pop	{r4, pc}
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	40002000 	.word	0x40002000
 8001b54:	40014400 	.word	0x40014400
 8001b58:	40014800 	.word	0x40014800
 8001b5c:	fffffcff 	.word	0xfffffcff

08001b60 <HAL_TIM_Base_Init>:
{
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001b64:	2001      	movs	r0, #1
  if(htim == NULL)
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d014      	beq.n	8001b94 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b6a:	0025      	movs	r5, r4
 8001b6c:	353d      	adds	r5, #61	; 0x3d
 8001b6e:	782b      	ldrb	r3, [r5, #0]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d105      	bne.n	8001b82 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001b76:	0022      	movs	r2, r4
 8001b78:	323c      	adds	r2, #60	; 0x3c
 8001b7a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	f000 ffb9 	bl	8002af4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b82:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b84:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001b86:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	1d21      	adds	r1, r4, #4
 8001b8a:	f7ff ffa1 	bl	8001ad0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b8e:	2301      	movs	r3, #1
  return HAL_OK;
 8001b90:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001b92:	702b      	strb	r3, [r5, #0]
}
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b98:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001b9a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b9c:	4d03      	ldr	r5, [pc, #12]	; (8001bac <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ba2:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ba8:	6083      	str	r3, [r0, #8]
}
 8001baa:	bd30      	pop	{r4, r5, pc}
 8001bac:	ffff00ff 	.word	0xffff00ff

08001bb0 <HAL_TIM_ConfigClockSource>:
{
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001bb2:	0005      	movs	r5, r0
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	353c      	adds	r5, #60	; 0x3c
 8001bb8:	782a      	ldrb	r2, [r5, #0]
{
 8001bba:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	2a01      	cmp	r2, #1
 8001bc0:	d019      	beq.n	8001bf6 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc2:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001bc4:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8001bc6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8001bca:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001bce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bd0:	4a4f      	ldr	r2, [pc, #316]	; (8001d10 <HAL_TIM_ConfigClockSource+0x160>)
 8001bd2:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001bd4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001bd6:	680b      	ldr	r3, [r1, #0]
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d100      	bne.n	8001bde <HAL_TIM_ConfigClockSource+0x2e>
 8001bdc:	e06f      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x10e>
 8001bde:	d816      	bhi.n	8001c0e <HAL_TIM_ConfigClockSource+0x5e>
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d100      	bne.n	8001be6 <HAL_TIM_ConfigClockSource+0x36>
 8001be4:	e087      	b.n	8001cf6 <HAL_TIM_ConfigClockSource+0x146>
 8001be6:	d807      	bhi.n	8001bf8 <HAL_TIM_ConfigClockSource+0x48>
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <HAL_TIM_ConfigClockSource+0x3e>
 8001bec:	e07d      	b.n	8001cea <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 8001bee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001bf0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001bf2:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001bf4:	7028      	strb	r0, [r5, #0]
}
 8001bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d100      	bne.n	8001bfe <HAL_TIM_ConfigClockSource+0x4e>
 8001bfc:	e081      	b.n	8001d02 <HAL_TIM_ConfigClockSource+0x152>
 8001bfe:	2b30      	cmp	r3, #48	; 0x30
 8001c00:	d1f5      	bne.n	8001bee <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c02:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001c04:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c06:	4393      	bics	r3, r2
 8001c08:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c0a:	2337      	movs	r3, #55	; 0x37
 8001c0c:	e055      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8001c0e:	2b70      	cmp	r3, #112	; 0x70
 8001c10:	d033      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0xca>
 8001c12:	d81b      	bhi.n	8001c4c <HAL_TIM_ConfigClockSource+0x9c>
 8001c14:	2b50      	cmp	r3, #80	; 0x50
 8001c16:	d03b      	beq.n	8001c90 <HAL_TIM_ConfigClockSource+0xe0>
 8001c18:	2b60      	cmp	r3, #96	; 0x60
 8001c1a:	d1e8      	bne.n	8001bee <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c1c:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c1e:	684b      	ldr	r3, [r1, #4]
 8001c20:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c22:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c24:	4f3b      	ldr	r7, [pc, #236]	; (8001d14 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c26:	43a1      	bics	r1, r4
 8001c28:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c2a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c2c:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c2e:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c30:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c32:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001c34:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001c36:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c38:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c3a:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001c40:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001c42:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c44:	4393      	bics	r3, r2
 8001c46:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c48:	2367      	movs	r3, #103	; 0x67
 8001c4a:	e036      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	0152      	lsls	r2, r2, #5
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00d      	beq.n	8001c70 <HAL_TIM_ConfigClockSource+0xc0>
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	0192      	lsls	r2, r2, #6
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d1c8      	bne.n	8001bee <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8001c5c:	68cb      	ldr	r3, [r1, #12]
 8001c5e:	684a      	ldr	r2, [r1, #4]
 8001c60:	6889      	ldr	r1, [r1, #8]
 8001c62:	f7ff ff99 	bl	8001b98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	01db      	lsls	r3, r3, #7
 8001c6c:	6891      	ldr	r1, [r2, #8]
 8001c6e:	e00c      	b.n	8001c8a <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c70:	2207      	movs	r2, #7
 8001c72:	6883      	ldr	r3, [r0, #8]
 8001c74:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8001c76:	6083      	str	r3, [r0, #8]
 8001c78:	e7b9      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8001c7a:	68cb      	ldr	r3, [r1, #12]
 8001c7c:	684a      	ldr	r2, [r1, #4]
 8001c7e:	6889      	ldr	r1, [r1, #8]
 8001c80:	f7ff ff8a 	bl	8001b98 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c84:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6093      	str	r3, [r2, #8]
    break;
 8001c8e:	e7ae      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c90:	684a      	ldr	r2, [r1, #4]
 8001c92:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c94:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c96:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c98:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c9a:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c9c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c9e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ca2:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ca4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ca6:	240a      	movs	r4, #10
 8001ca8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001caa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001cac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cae:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cb0:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001cb2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cb8:	2357      	movs	r3, #87	; 0x57
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	e7db      	b.n	8001c76 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cbe:	684a      	ldr	r2, [r1, #4]
 8001cc0:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001cc2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc4:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cc6:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc8:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cca:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ccc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cce:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cd0:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cd2:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cd4:	240a      	movs	r4, #10
 8001cd6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001cd8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001cda:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cdc:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cde:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001ce0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ce2:	4393      	bics	r3, r2
 8001ce4:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ce6:	2347      	movs	r3, #71	; 0x47
 8001ce8:	e7e7      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cea:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001cec:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cee:	4393      	bics	r3, r2
 8001cf0:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e7e1      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cf6:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001cf8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cfe:	2317      	movs	r3, #23
 8001d00:	e7db      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d02:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001d04:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d06:	4393      	bics	r3, r2
 8001d08:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d0a:	2327      	movs	r3, #39	; 0x27
 8001d0c:	e7d5      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x10a>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	ffff0088 	.word	0xffff0088
 8001d14:	ffff0fff 	.word	0xffff0fff

08001d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001d18:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001d1a:	0004      	movs	r4, r0
 8001d1c:	343c      	adds	r4, #60	; 0x3c
 8001d1e:	7822      	ldrb	r2, [r4, #0]
{
 8001d20:	0003      	movs	r3, r0
 8001d22:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001d24:	2a01      	cmp	r2, #1
 8001d26:	d017      	beq.n	8001d58 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d2a:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	353d      	adds	r5, #61	; 0x3d
 8001d2e:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	306e      	adds	r0, #110	; 0x6e
 8001d34:	4382      	bics	r2, r0
 8001d36:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001d3c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001d3e:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001d40:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001d42:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	4382      	bics	r2, r0
 8001d48:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001d4a:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001d4c:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001d52:	2301      	movs	r3, #1
 8001d54:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001d56:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001d58:	bd30      	pop	{r4, r5, pc}

08001d5a <HAL_TIMEx_CommutationCallback>:
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d5c:	4770      	bx	lr
	...

08001d60 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d60:	6803      	ldr	r3, [r0, #0]
 8001d62:	4906      	ldr	r1, [pc, #24]	; (8001d7c <UART_EndRxTransfer+0x1c>)
 8001d64:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d66:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d68:	400a      	ands	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	3123      	adds	r1, #35	; 0x23
 8001d70:	31ff      	adds	r1, #255	; 0xff
 8001d72:	438a      	bics	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001d76:	2320      	movs	r3, #32
 8001d78:	7003      	strb	r3, [r0, #0]
}
 8001d7a:	4770      	bx	lr
 8001d7c:	fffffedf 	.word	0xfffffedf

08001d80 <HAL_UART_Receive_IT>:
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d82:	0006      	movs	r6, r0
 8001d84:	366a      	adds	r6, #106	; 0x6a
 8001d86:	7834      	ldrb	r4, [r6, #0]
{
 8001d88:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001d8a:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d8c:	2c20      	cmp	r4, #32
 8001d8e:	d135      	bne.n	8001dfc <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 8001d90:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001d92:	2900      	cmp	r1, #0
 8001d94:	d032      	beq.n	8001dfc <HAL_UART_Receive_IT+0x7c>
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	d030      	beq.n	8001dfc <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d9a:	2580      	movs	r5, #128	; 0x80
 8001d9c:	689c      	ldr	r4, [r3, #8]
 8001d9e:	016d      	lsls	r5, r5, #5
 8001da0:	42ac      	cmp	r4, r5
 8001da2:	d104      	bne.n	8001dae <HAL_UART_Receive_IT+0x2e>
 8001da4:	691d      	ldr	r5, [r3, #16]
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8001daa:	4201      	tst	r1, r0
 8001dac:	d126      	bne.n	8001dfc <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 8001dae:	001d      	movs	r5, r3
 8001db0:	3568      	adds	r5, #104	; 0x68
 8001db2:	782f      	ldrb	r7, [r5, #0]
    return HAL_BUSY;
 8001db4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001db6:	2f01      	cmp	r7, #1
 8001db8:	d020      	beq.n	8001dfc <HAL_UART_Receive_IT+0x7c>
 8001dba:	3801      	subs	r0, #1
 8001dbc:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr = pData;
 8001dbe:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	3158      	adds	r1, #88	; 0x58
 8001dc4:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8001dc6:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	0152      	lsls	r2, r2, #5
 8001dcc:	4294      	cmp	r4, r2
 8001dce:	d118      	bne.n	8001e02 <HAL_UART_Receive_IT+0x82>
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d113      	bne.n	8001dfe <HAL_UART_Receive_IT+0x7e>
 8001dd6:	4913      	ldr	r1, [pc, #76]	; (8001e24 <HAL_UART_Receive_IT+0xa4>)
 8001dd8:	001a      	movs	r2, r3
 8001dda:	325c      	adds	r2, #92	; 0x5c
 8001ddc:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dde:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001de0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de2:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de4:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001de6:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de8:	6899      	ldr	r1, [r3, #8]
 8001dea:	3a21      	subs	r2, #33	; 0x21
 8001dec:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8001dee:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df0:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001df2:	2290      	movs	r2, #144	; 0x90
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	0052      	lsls	r2, r2, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001dfe:	21ff      	movs	r1, #255	; 0xff
 8001e00:	e7ea      	b.n	8001dd8 <HAL_UART_Receive_IT+0x58>
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d104      	bne.n	8001e10 <HAL_UART_Receive_IT+0x90>
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d0f8      	beq.n	8001dfe <HAL_UART_Receive_IT+0x7e>
 8001e0c:	217f      	movs	r1, #127	; 0x7f
 8001e0e:	e7e3      	b.n	8001dd8 <HAL_UART_Receive_IT+0x58>
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	0552      	lsls	r2, r2, #21
 8001e14:	4294      	cmp	r4, r2
 8001e16:	d1e2      	bne.n	8001dde <HAL_UART_Receive_IT+0x5e>
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	d0f6      	beq.n	8001e0c <HAL_UART_Receive_IT+0x8c>
 8001e1e:	213f      	movs	r1, #63	; 0x3f
 8001e20:	e7da      	b.n	8001dd8 <HAL_UART_Receive_IT+0x58>
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	000001ff 	.word	0x000001ff

08001e28 <HAL_UART_TxCpltCallback>:
 8001e28:	4770      	bx	lr

08001e2a <HAL_UART_ErrorCallback>:
 8001e2a:	4770      	bx	lr

08001e2c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001e2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	0002      	movs	r2, r0
{
 8001e32:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001e34:	325a      	adds	r2, #90	; 0x5a
 8001e36:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001e38:	3a08      	subs	r2, #8
 8001e3a:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8001e3c:	f7ff fff5 	bl	8001e2a <HAL_UART_ErrorCallback>
}
 8001e40:	bd10      	pop	{r4, pc}
	...

08001e44 <UART_SetConfig>:
{
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e48:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e4a:	69c2      	ldr	r2, [r0, #28]
 8001e4c:	6883      	ldr	r3, [r0, #8]
 8001e4e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e50:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e52:	4303      	orrs	r3, r0
 8001e54:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e56:	4e3f      	ldr	r6, [pc, #252]	; (8001f54 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e58:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e5a:	483f      	ldr	r0, [pc, #252]	; (8001f58 <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e5c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e5e:	4001      	ands	r1, r0
 8001e60:	430b      	orrs	r3, r1
 8001e62:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e64:	686b      	ldr	r3, [r5, #4]
 8001e66:	493d      	ldr	r1, [pc, #244]	; (8001f5c <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e68:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	68e1      	ldr	r1, [r4, #12]
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e72:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e74:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e76:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e78:	4839      	ldr	r0, [pc, #228]	; (8001f60 <UART_SetConfig+0x11c>)
 8001e7a:	4001      	ands	r1, r0
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	60ab      	str	r3, [r5, #8]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e84:	42b5      	cmp	r5, r6
 8001e86:	d110      	bne.n	8001eaa <UART_SetConfig+0x66>
 8001e88:	2003      	movs	r0, #3
 8001e8a:	4936      	ldr	r1, [pc, #216]	; (8001f64 <UART_SetConfig+0x120>)
 8001e8c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001e8e:	4001      	ands	r1, r0
 8001e90:	4835      	ldr	r0, [pc, #212]	; (8001f68 <UART_SetConfig+0x124>)
 8001e92:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d013      	beq.n	8001ec0 <UART_SetConfig+0x7c>
    switch (clocksource)
 8001e98:	2808      	cmp	r0, #8
 8001e9a:	d858      	bhi.n	8001f4e <UART_SetConfig+0x10a>
 8001e9c:	f7fe f946 	bl	800012c <__gnu_thumb1_case_uqi>
 8001ea0:	57425737 	.word	0x57425737
 8001ea4:	5757574b 	.word	0x5757574b
 8001ea8:	50          	.byte	0x50
 8001ea9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001eaa:	4930      	ldr	r1, [pc, #192]	; (8001f6c <UART_SetConfig+0x128>)
 8001eac:	428d      	cmp	r5, r1
 8001eae:	d14c      	bne.n	8001f4a <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d12c      	bne.n	8001f0e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001eb4:	f7ff fcb4 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eb8:	6863      	ldr	r3, [r4, #4]
 8001eba:	0040      	lsls	r0, r0, #1
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	e00b      	b.n	8001ed8 <UART_SetConfig+0x94>
    switch (clocksource)
 8001ec0:	2808      	cmp	r0, #8
 8001ec2:	d821      	bhi.n	8001f08 <UART_SetConfig+0xc4>
 8001ec4:	f7fe f928 	bl	8000118 <__gnu_thumb1_case_sqi>
 8001ec8:	200520f6 	.word	0x200520f6
 8001ecc:	20202018 	.word	0x20202018
 8001ed0:	1b          	.byte	0x1b
 8001ed1:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ed2:	6863      	ldr	r3, [r4, #4]
 8001ed4:	0858      	lsrs	r0, r3, #1
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ed8:	18c0      	adds	r0, r0, r3
 8001eda:	6861      	ldr	r1, [r4, #4]
 8001edc:	f7fe f930 	bl	8000140 <__udivsi3>
 8001ee0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	4391      	bics	r1, r2
 8001eea:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001eec:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001eee:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ef0:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60cb      	str	r3, [r1, #12]
}
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ef8:	f7ff fb9a 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 8001efc:	e7dc      	b.n	8001eb8 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001efe:	6863      	ldr	r3, [r4, #4]
 8001f00:	0858      	lsrs	r0, r3, #1
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	025b      	lsls	r3, r3, #9
 8001f06:	e7e7      	b.n	8001ed8 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e7ea      	b.n	8001ee4 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f0e:	f7ff fc87 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8001f12:	6861      	ldr	r1, [r4, #4]
 8001f14:	084b      	lsrs	r3, r1, #1
 8001f16:	1818      	adds	r0, r3, r0
 8001f18:	f7fe f912 	bl	8000140 <__udivsi3>
 8001f1c:	b280      	uxth	r0, r0
 8001f1e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f20:	2000      	movs	r0, #0
        break;
 8001f22:	e7e8      	b.n	8001ef6 <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f24:	6861      	ldr	r1, [r4, #4]
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <UART_SetConfig+0x130>)
 8001f28:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f2a:	18c0      	adds	r0, r0, r3
 8001f2c:	f7fe f908 	bl	8000140 <__udivsi3>
 8001f30:	b280      	uxth	r0, r0
 8001f32:	60f0      	str	r0, [r6, #12]
 8001f34:	e7f4      	b.n	8001f20 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f36:	f7ff fb7b 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 8001f3a:	6861      	ldr	r1, [r4, #4]
 8001f3c:	084b      	lsrs	r3, r1, #1
 8001f3e:	e7f4      	b.n	8001f2a <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	6861      	ldr	r1, [r4, #4]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	0848      	lsrs	r0, r1, #1
 8001f48:	e7ef      	b.n	8001f2a <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d0dc      	beq.n	8001f08 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001f4e:	2001      	movs	r0, #1
  return ret;
 8001f50:	e7d1      	b.n	8001ef6 <UART_SetConfig+0xb2>
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40013800 	.word	0x40013800
 8001f58:	efff69f3 	.word	0xefff69f3
 8001f5c:	ffffcfff 	.word	0xffffcfff
 8001f60:	fffff4ff 	.word	0xfffff4ff
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08003670 	.word	0x08003670
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f78:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001f7a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f7c:	07da      	lsls	r2, r3, #31
 8001f7e:	d506      	bpl.n	8001f8e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f80:	6801      	ldr	r1, [r0, #0]
 8001f82:	4c28      	ldr	r4, [pc, #160]	; (8002024 <UART_AdvFeatureConfig+0xac>)
 8001f84:	684a      	ldr	r2, [r1, #4]
 8001f86:	4022      	ands	r2, r4
 8001f88:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f8a:	4322      	orrs	r2, r4
 8001f8c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f8e:	079a      	lsls	r2, r3, #30
 8001f90:	d506      	bpl.n	8001fa0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f92:	6801      	ldr	r1, [r0, #0]
 8001f94:	4c24      	ldr	r4, [pc, #144]	; (8002028 <UART_AdvFeatureConfig+0xb0>)
 8001f96:	684a      	ldr	r2, [r1, #4]
 8001f98:	4022      	ands	r2, r4
 8001f9a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f9c:	4322      	orrs	r2, r4
 8001f9e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fa0:	075a      	lsls	r2, r3, #29
 8001fa2:	d506      	bpl.n	8001fb2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fa4:	6801      	ldr	r1, [r0, #0]
 8001fa6:	4c21      	ldr	r4, [pc, #132]	; (800202c <UART_AdvFeatureConfig+0xb4>)
 8001fa8:	684a      	ldr	r2, [r1, #4]
 8001faa:	4022      	ands	r2, r4
 8001fac:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001fae:	4322      	orrs	r2, r4
 8001fb0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fb2:	071a      	lsls	r2, r3, #28
 8001fb4:	d506      	bpl.n	8001fc4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fb6:	6801      	ldr	r1, [r0, #0]
 8001fb8:	4c1d      	ldr	r4, [pc, #116]	; (8002030 <UART_AdvFeatureConfig+0xb8>)
 8001fba:	684a      	ldr	r2, [r1, #4]
 8001fbc:	4022      	ands	r2, r4
 8001fbe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001fc0:	4322      	orrs	r2, r4
 8001fc2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fc4:	06da      	lsls	r2, r3, #27
 8001fc6:	d506      	bpl.n	8001fd6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fc8:	6801      	ldr	r1, [r0, #0]
 8001fca:	4c1a      	ldr	r4, [pc, #104]	; (8002034 <UART_AdvFeatureConfig+0xbc>)
 8001fcc:	688a      	ldr	r2, [r1, #8]
 8001fce:	4022      	ands	r2, r4
 8001fd0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001fd2:	4322      	orrs	r2, r4
 8001fd4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fd6:	069a      	lsls	r2, r3, #26
 8001fd8:	d506      	bpl.n	8001fe8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fda:	6801      	ldr	r1, [r0, #0]
 8001fdc:	4c16      	ldr	r4, [pc, #88]	; (8002038 <UART_AdvFeatureConfig+0xc0>)
 8001fde:	688a      	ldr	r2, [r1, #8]
 8001fe0:	4022      	ands	r2, r4
 8001fe2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001fe4:	4322      	orrs	r2, r4
 8001fe6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fe8:	065a      	lsls	r2, r3, #25
 8001fea:	d510      	bpl.n	800200e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fec:	6801      	ldr	r1, [r0, #0]
 8001fee:	4d13      	ldr	r5, [pc, #76]	; (800203c <UART_AdvFeatureConfig+0xc4>)
 8001ff0:	684a      	ldr	r2, [r1, #4]
 8001ff2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ff4:	402a      	ands	r2, r5
 8001ff6:	4322      	orrs	r2, r4
 8001ff8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	0352      	lsls	r2, r2, #13
 8001ffe:	4294      	cmp	r4, r2
 8002000:	d105      	bne.n	800200e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002002:	684a      	ldr	r2, [r1, #4]
 8002004:	4c0e      	ldr	r4, [pc, #56]	; (8002040 <UART_AdvFeatureConfig+0xc8>)
 8002006:	4022      	ands	r2, r4
 8002008:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800200a:	4322      	orrs	r2, r4
 800200c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800200e:	061b      	lsls	r3, r3, #24
 8002010:	d506      	bpl.n	8002020 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002012:	6802      	ldr	r2, [r0, #0]
 8002014:	490b      	ldr	r1, [pc, #44]	; (8002044 <UART_AdvFeatureConfig+0xcc>)
 8002016:	6853      	ldr	r3, [r2, #4]
 8002018:	400b      	ands	r3, r1
 800201a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800201c:	430b      	orrs	r3, r1
 800201e:	6053      	str	r3, [r2, #4]
}
 8002020:	bd30      	pop	{r4, r5, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	fffdffff 	.word	0xfffdffff
 8002028:	fffeffff 	.word	0xfffeffff
 800202c:	fffbffff 	.word	0xfffbffff
 8002030:	ffff7fff 	.word	0xffff7fff
 8002034:	ffffefff 	.word	0xffffefff
 8002038:	ffffdfff 	.word	0xffffdfff
 800203c:	ffefffff 	.word	0xffefffff
 8002040:	ff9fffff 	.word	0xff9fffff
 8002044:	fff7ffff 	.word	0xfff7ffff

08002048 <UART_WaitOnFlagUntilTimeout>:
{
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	0004      	movs	r4, r0
 800204c:	000e      	movs	r6, r1
 800204e:	0015      	movs	r5, r2
 8002050:	001f      	movs	r7, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002052:	6822      	ldr	r2, [r4, #0]
 8002054:	69d3      	ldr	r3, [r2, #28]
 8002056:	4033      	ands	r3, r6
 8002058:	1b9b      	subs	r3, r3, r6
 800205a:	4259      	negs	r1, r3
 800205c:	414b      	adcs	r3, r1
 800205e:	42ab      	cmp	r3, r5
 8002060:	d001      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002062:	2000      	movs	r0, #0
 8002064:	e018      	b.n	8002098 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8002066:	9b06      	ldr	r3, [sp, #24]
 8002068:	3301      	adds	r3, #1
 800206a:	d0f3      	beq.n	8002054 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800206c:	9b06      	ldr	r3, [sp, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d113      	bne.n	800209a <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <UART_WaitOnFlagUntilTimeout+0x60>)
 8002076:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002078:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800207a:	400a      	ands	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	31a3      	adds	r1, #163	; 0xa3
 8002082:	31ff      	adds	r1, #255	; 0xff
 8002084:	438a      	bics	r2, r1
 8002086:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002088:	0022      	movs	r2, r4
 800208a:	2320      	movs	r3, #32
 800208c:	3269      	adds	r2, #105	; 0x69
 800208e:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8002090:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8002092:	2300      	movs	r3, #0
 8002094:	3468      	adds	r4, #104	; 0x68
 8002096:	7023      	strb	r3, [r4, #0]
}
 8002098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800209a:	f7fe f9f1 	bl	8000480 <HAL_GetTick>
 800209e:	9b06      	ldr	r3, [sp, #24]
 80020a0:	1bc0      	subs	r0, r0, r7
 80020a2:	4283      	cmp	r3, r0
 80020a4:	d2d5      	bcs.n	8002052 <UART_WaitOnFlagUntilTimeout+0xa>
 80020a6:	e7e4      	b.n	8002072 <UART_WaitOnFlagUntilTimeout+0x2a>
 80020a8:	fffffe5f 	.word	0xfffffe5f

080020ac <HAL_UART_Transmit>:
{
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80020ae:	0007      	movs	r7, r0
{
 80020b0:	b085      	sub	sp, #20
 80020b2:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 80020b4:	3769      	adds	r7, #105	; 0x69
 80020b6:	783b      	ldrb	r3, [r7, #0]
{
 80020b8:	0004      	movs	r4, r0
 80020ba:	000d      	movs	r5, r1
 80020bc:	0016      	movs	r6, r2
    return HAL_BUSY;
 80020be:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d146      	bne.n	8002152 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 80020c4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d043      	beq.n	8002152 <HAL_UART_Transmit+0xa6>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d041      	beq.n	8002152 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	68a2      	ldr	r2, [r4, #8]
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d104      	bne.n	80020e2 <HAL_UART_Transmit+0x36>
 80020d8:	6923      	ldr	r3, [r4, #16]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80020de:	4201      	tst	r1, r0
 80020e0:	d137      	bne.n	8002152 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80020e2:	0023      	movs	r3, r4
 80020e4:	3368      	adds	r3, #104	; 0x68
 80020e6:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80020e8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d031      	beq.n	8002152 <HAL_UART_Transmit+0xa6>
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020f6:	3321      	adds	r3, #33	; 0x21
 80020f8:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80020fa:	f7fe f9c1 	bl	8000480 <HAL_GetTick>
    huart->TxXferSize = Size;
 80020fe:	0023      	movs	r3, r4
 8002100:	3350      	adds	r3, #80	; 0x50
 8002102:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8002104:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002106:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8002108:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800210a:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 800210c:	0021      	movs	r1, r4
 800210e:	3152      	adds	r1, #82	; 0x52
 8002110:	880a      	ldrh	r2, [r1, #0]
 8002112:	b292      	uxth	r2, r2
 8002114:	2a00      	cmp	r2, #0
 8002116:	d10d      	bne.n	8002134 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002118:	9b03      	ldr	r3, [sp, #12]
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	0020      	movs	r0, r4
 8002120:	9b02      	ldr	r3, [sp, #8]
 8002122:	f7ff ff91 	bl	8002048 <UART_WaitOnFlagUntilTimeout>
 8002126:	2800      	cmp	r0, #0
 8002128:	d112      	bne.n	8002150 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 800212a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800212c:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800212e:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8002130:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002132:	e00e      	b.n	8002152 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8002134:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002136:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8002138:	3b01      	subs	r3, #1
 800213a:	b29b      	uxth	r3, r3
 800213c:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800213e:	9b03      	ldr	r3, [sp, #12]
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	0020      	movs	r0, r4
 8002146:	9b02      	ldr	r3, [sp, #8]
 8002148:	f7ff ff7e 	bl	8002048 <UART_WaitOnFlagUntilTimeout>
 800214c:	2800      	cmp	r0, #0
 800214e:	d002      	beq.n	8002156 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8002150:	2003      	movs	r0, #3
}
 8002152:	b005      	add	sp, #20
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002156:	68a3      	ldr	r3, [r4, #8]
 8002158:	6822      	ldr	r2, [r4, #0]
 800215a:	42b3      	cmp	r3, r6
 800215c:	d108      	bne.n	8002170 <HAL_UART_Transmit+0xc4>
 800215e:	6923      	ldr	r3, [r4, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002164:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8002166:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002168:	05db      	lsls	r3, r3, #23
 800216a:	0ddb      	lsrs	r3, r3, #23
 800216c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 800216e:	e7cd      	b.n	800210c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002170:	782b      	ldrb	r3, [r5, #0]
 8002172:	3501      	adds	r5, #1
 8002174:	8513      	strh	r3, [r2, #40]	; 0x28
 8002176:	e7c9      	b.n	800210c <HAL_UART_Transmit+0x60>

08002178 <HAL_UART_Receive>:
{
 8002178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217a:	001f      	movs	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800217c:	0003      	movs	r3, r0
 800217e:	336a      	adds	r3, #106	; 0x6a
{
 8002180:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002182:	781a      	ldrb	r2, [r3, #0]
{
 8002184:	0004      	movs	r4, r0
 8002186:	b085      	sub	sp, #20
 8002188:	000d      	movs	r5, r1
    return HAL_BUSY;
 800218a:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 800218c:	2a20      	cmp	r2, #32
 800218e:	d139      	bne.n	8002204 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 8002190:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002192:	2900      	cmp	r1, #0
 8002194:	d036      	beq.n	8002204 <HAL_UART_Receive+0x8c>
 8002196:	2e00      	cmp	r6, #0
 8002198:	d034      	beq.n	8002204 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	68a1      	ldr	r1, [r4, #8]
 800219e:	0152      	lsls	r2, r2, #5
 80021a0:	4291      	cmp	r1, r2
 80021a2:	d104      	bne.n	80021ae <HAL_UART_Receive+0x36>
 80021a4:	6922      	ldr	r2, [r4, #16]
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80021aa:	4205      	tst	r5, r0
 80021ac:	d12a      	bne.n	8002204 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 80021ae:	0022      	movs	r2, r4
 80021b0:	3268      	adds	r2, #104	; 0x68
 80021b2:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 80021b4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80021b6:	2901      	cmp	r1, #1
 80021b8:	d024      	beq.n	8002204 <HAL_UART_Receive+0x8c>
 80021ba:	2101      	movs	r1, #1
 80021bc:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021be:	2200      	movs	r2, #0
 80021c0:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021c2:	3222      	adds	r2, #34	; 0x22
 80021c4:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80021c6:	f7fe f95b 	bl	8000480 <HAL_GetTick>
    huart->RxXferSize = Size;
 80021ca:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 80021d0:	3358      	adds	r3, #88	; 0x58
 80021d2:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80021d4:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 80021d6:	9003      	str	r0, [sp, #12]
    UART_MASK_COMPUTATION(huart);
 80021d8:	0149      	lsls	r1, r1, #5
 80021da:	3304      	adds	r3, #4
 80021dc:	428a      	cmp	r2, r1
 80021de:	d115      	bne.n	800220c <HAL_UART_Receive+0x94>
 80021e0:	6922      	ldr	r2, [r4, #16]
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d110      	bne.n	8002208 <HAL_UART_Receive+0x90>
 80021e6:	4a23      	ldr	r2, [pc, #140]	; (8002274 <HAL_UART_Receive+0xfc>)
 80021e8:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 80021ea:	881e      	ldrh	r6, [r3, #0]
    while(huart->RxXferCount > 0U)
 80021ec:	0022      	movs	r2, r4
 80021ee:	325a      	adds	r2, #90	; 0x5a
 80021f0:	8810      	ldrh	r0, [r2, #0]
 80021f2:	b280      	uxth	r0, r0
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d119      	bne.n	800222c <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 80021f8:	0023      	movs	r3, r4
 80021fa:	2220      	movs	r2, #32
 80021fc:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 80021fe:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002200:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002202:	7020      	strb	r0, [r4, #0]
}
 8002204:	b005      	add	sp, #20
 8002206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	e7ed      	b.n	80021e8 <HAL_UART_Receive+0x70>
 800220c:	2a00      	cmp	r2, #0
 800220e:	d104      	bne.n	800221a <HAL_UART_Receive+0xa2>
 8002210:	6922      	ldr	r2, [r4, #16]
 8002212:	2a00      	cmp	r2, #0
 8002214:	d0f8      	beq.n	8002208 <HAL_UART_Receive+0x90>
 8002216:	227f      	movs	r2, #127	; 0x7f
 8002218:	e7e6      	b.n	80021e8 <HAL_UART_Receive+0x70>
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0549      	lsls	r1, r1, #21
 800221e:	428a      	cmp	r2, r1
 8002220:	d1e3      	bne.n	80021ea <HAL_UART_Receive+0x72>
 8002222:	6922      	ldr	r2, [r4, #16]
 8002224:	2a00      	cmp	r2, #0
 8002226:	d0f6      	beq.n	8002216 <HAL_UART_Receive+0x9e>
 8002228:	223f      	movs	r2, #63	; 0x3f
 800222a:	e7dd      	b.n	80021e8 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 800222c:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8002230:	3b01      	subs	r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	0020      	movs	r0, r4
 8002238:	9700      	str	r7, [sp, #0]
 800223a:	9b03      	ldr	r3, [sp, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f7ff ff03 	bl	8002048 <UART_WaitOnFlagUntilTimeout>
 8002242:	2800      	cmp	r0, #0
 8002244:	d113      	bne.n	800226e <HAL_UART_Receive+0xf6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002246:	68a2      	ldr	r2, [r4, #8]
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	0011      	movs	r1, r2
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	0152      	lsls	r2, r2, #5
 8002250:	4291      	cmp	r1, r2
 8002252:	d107      	bne.n	8002264 <HAL_UART_Receive+0xec>
 8002254:	6922      	ldr	r2, [r4, #16]
 8002256:	2a00      	cmp	r2, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Receive+0xec>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800225a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800225c:	4033      	ands	r3, r6
 800225e:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 8002260:	3502      	adds	r5, #2
 8002262:	e7c3      	b.n	80021ec <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002264:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002266:	4033      	ands	r3, r6
 8002268:	702b      	strb	r3, [r5, #0]
 800226a:	3501      	adds	r5, #1
 800226c:	e7be      	b.n	80021ec <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800226e:	2003      	movs	r0, #3
 8002270:	e7c8      	b.n	8002204 <HAL_UART_Receive+0x8c>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000001ff 	.word	0x000001ff

08002278 <UART_CheckIdleState>:
{
 8002278:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227a:	2600      	movs	r6, #0
{
 800227c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002280:	f7fe f8fe 	bl	8000480 <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <UART_CheckIdleState+0x68>)
 8002286:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002288:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800228a:	4293      	cmp	r3, r2
 800228c:	d008      	beq.n	80022a0 <UART_CheckIdleState+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 800228e:	0022      	movs	r2, r4
 8002290:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002292:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002294:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8002296:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8002298:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800229a:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 800229c:	7020      	strb	r0, [r4, #0]
}
 800229e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	071b      	lsls	r3, r3, #28
 80022a4:	d40f      	bmi.n	80022c6 <UART_CheckIdleState+0x4e>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	075b      	lsls	r3, r3, #29
 80022ac:	d5ef      	bpl.n	800228e <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <UART_CheckIdleState+0x6c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	03c9      	lsls	r1, r1, #15
 80022b8:	002b      	movs	r3, r5
 80022ba:	0020      	movs	r0, r4
 80022bc:	f7ff fec4 	bl	8002048 <UART_WaitOnFlagUntilTimeout>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d10b      	bne.n	80022dc <UART_CheckIdleState+0x64>
 80022c4:	e7e3      	b.n	800228e <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <UART_CheckIdleState+0x6c>)
 80022ca:	0032      	movs	r2, r6
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	0389      	lsls	r1, r1, #14
 80022d0:	0003      	movs	r3, r0
 80022d2:	0020      	movs	r0, r4
 80022d4:	f7ff feb8 	bl	8002048 <UART_WaitOnFlagUntilTimeout>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d0e4      	beq.n	80022a6 <UART_CheckIdleState+0x2e>
        return HAL_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
 80022de:	e7de      	b.n	800229e <UART_CheckIdleState+0x26>
 80022e0:	40013800 	.word	0x40013800
 80022e4:	01ffffff 	.word	0x01ffffff

080022e8 <HAL_UART_Init>:
{
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
}
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80022f2:	0005      	movs	r5, r0
 80022f4:	3569      	adds	r5, #105	; 0x69
 80022f6:	782b      	ldrb	r3, [r5, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80022fe:	0002      	movs	r2, r0
 8002300:	3268      	adds	r2, #104	; 0x68
 8002302:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002304:	f000 fc12 	bl	8002b2c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002308:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800230a:	2101      	movs	r1, #1
 800230c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800230e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8002310:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002312:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002314:	438b      	bics	r3, r1
 8002316:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002318:	f7ff fd94 	bl	8001e44 <UART_SetConfig>
 800231c:	2801      	cmp	r0, #1
 800231e:	d0e6      	beq.n	80022ee <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8002326:	0020      	movs	r0, r4
 8002328:	f7ff fe26 	bl	8001f78 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <HAL_UART_Init+0x68>)
 8002330:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002332:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002334:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002336:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002338:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	438a      	bics	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002340:	2201      	movs	r2, #1
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002348:	f7ff ff96 	bl	8002278 <UART_CheckIdleState>
 800234c:	e7d0      	b.n	80022f0 <HAL_UART_Init+0x8>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	ffffb7ff 	.word	0xffffb7ff

08002354 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002354:	0003      	movs	r3, r0
{
 8002356:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002358:	3369      	adds	r3, #105	; 0x69
 800235a:	781b      	ldrb	r3, [r3, #0]
{
 800235c:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800235e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002360:	2b21      	cmp	r3, #33	; 0x21
 8002362:	d10f      	bne.n	8002384 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8002364:	0014      	movs	r4, r2
 8002366:	3452      	adds	r4, #82	; 0x52
 8002368:	8823      	ldrh	r3, [r4, #0]
 800236a:	6811      	ldr	r1, [r2, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002372:	680a      	ldr	r2, [r1, #0]
 8002374:	307e      	adds	r0, #126	; 0x7e
 8002376:	4382      	bics	r2, r0
 8002378:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	6808      	ldr	r0, [r1, #0]
 800237e:	4302      	orrs	r2, r0
 8002380:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8002382:	2000      	movs	r0, #0
  }
}
 8002384:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002386:	2080      	movs	r0, #128	; 0x80
 8002388:	6895      	ldr	r5, [r2, #8]
 800238a:	0140      	lsls	r0, r0, #5
 800238c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800238e:	4285      	cmp	r5, r0
 8002390:	d10d      	bne.n	80023ae <UART_Transmit_IT+0x5a>
 8002392:	6910      	ldr	r0, [r2, #16]
 8002394:	2800      	cmp	r0, #0
 8002396:	d10a      	bne.n	80023ae <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002398:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 800239a:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800239c:	05c0      	lsls	r0, r0, #23
 800239e:	0dc0      	lsrs	r0, r0, #23
 80023a0:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80023a2:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80023a4:	8823      	ldrh	r3, [r4, #0]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	8023      	strh	r3, [r4, #0]
 80023ac:	e7e9      	b.n	8002382 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80023ae:	1c58      	adds	r0, r3, #1
 80023b0:	64d0      	str	r0, [r2, #76]	; 0x4c
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	850b      	strh	r3, [r1, #40]	; 0x28
 80023b6:	e7f5      	b.n	80023a4 <UART_Transmit_IT+0x50>

080023b8 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023b8:	2140      	movs	r1, #64	; 0x40
 80023ba:	6802      	ldr	r2, [r0, #0]
{
 80023bc:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	438b      	bics	r3, r1
 80023c2:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023c4:	0003      	movs	r3, r0
 80023c6:	2220      	movs	r2, #32
 80023c8:	3369      	adds	r3, #105	; 0x69
 80023ca:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80023cc:	f7ff fd2c 	bl	8001e28 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80023d0:	2000      	movs	r0, #0
 80023d2:	bd10      	pop	{r4, pc}

080023d4 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023d4:	0002      	movs	r2, r0
{
 80023d6:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023d8:	326a      	adds	r2, #106	; 0x6a
 80023da:	7811      	ldrb	r1, [r2, #0]
 80023dc:	6803      	ldr	r3, [r0, #0]
 80023de:	2922      	cmp	r1, #34	; 0x22
 80023e0:	d12d      	bne.n	800243e <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80023e2:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e4:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80023e6:	315c      	adds	r1, #92	; 0x5c
 80023e8:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80023ea:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ec:	0164      	lsls	r4, r4, #5
 80023ee:	4029      	ands	r1, r5
 80023f0:	6885      	ldr	r5, [r0, #8]
 80023f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023f4:	42a5      	cmp	r5, r4
 80023f6:	d11e      	bne.n	8002436 <UART_Receive_IT+0x62>
 80023f8:	6904      	ldr	r4, [r0, #16]
 80023fa:	2c00      	cmp	r4, #0
 80023fc:	d11b      	bne.n	8002436 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80023fe:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8002400:	3302      	adds	r3, #2
 8002402:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002404:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8002406:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8002408:	315a      	adds	r1, #90	; 0x5a
 800240a:	880b      	ldrh	r3, [r1, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	800b      	strh	r3, [r1, #0]
 8002412:	42a3      	cmp	r3, r4
 8002414:	d10d      	bne.n	8002432 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002416:	6803      	ldr	r3, [r0, #0]
 8002418:	4d0c      	ldr	r5, [pc, #48]	; (800244c <UART_Receive_IT+0x78>)
 800241a:	6819      	ldr	r1, [r3, #0]
 800241c:	4029      	ands	r1, r5
 800241e:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	3523      	adds	r5, #35	; 0x23
 8002424:	35ff      	adds	r5, #255	; 0xff
 8002426:	43a9      	bics	r1, r5
 8002428:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800242a:	2320      	movs	r3, #32
 800242c:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 800242e:	f000 fa47 	bl	80028c0 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002432:	0020      	movs	r0, r4
 8002434:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002436:	1c5c      	adds	r4, r3, #1
 8002438:	6544      	str	r4, [r0, #84]	; 0x54
 800243a:	7019      	strb	r1, [r3, #0]
 800243c:	e7e2      	b.n	8002404 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800243e:	2208      	movs	r2, #8
 8002440:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8002442:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002444:	430a      	orrs	r2, r1
 8002446:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002448:	e7f3      	b.n	8002432 <UART_Receive_IT+0x5e>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	fffffedf 	.word	0xfffffedf

08002450 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002450:	210f      	movs	r1, #15
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002452:	6802      	ldr	r2, [r0, #0]
{
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002456:	69d3      	ldr	r3, [r2, #28]
{
 8002458:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800245a:	4019      	ands	r1, r3
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800245c:	6810      	ldr	r0, [r2, #0]
  if (errorflags == RESET)
 800245e:	d108      	bne.n	8002472 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002460:	2520      	movs	r5, #32
 8002462:	422b      	tst	r3, r5
 8002464:	d005      	beq.n	8002472 <HAL_UART_IRQHandler+0x22>
 8002466:	4228      	tst	r0, r5
 8002468:	d003      	beq.n	8002472 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800246a:	0020      	movs	r0, r4
 800246c:	f7ff ffb2 	bl	80023d4 <UART_Receive_IT>
}
 8002470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8002472:	6896      	ldr	r6, [r2, #8]
  if(   (errorflags != RESET)
 8002474:	2900      	cmp	r1, #0
 8002476:	d061      	beq.n	800253c <HAL_UART_IRQHandler+0xec>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002478:	2101      	movs	r1, #1
 800247a:	0035      	movs	r5, r6
 800247c:	400d      	ands	r5, r1
 800247e:	d103      	bne.n	8002488 <HAL_UART_IRQHandler+0x38>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002480:	2790      	movs	r7, #144	; 0x90
 8002482:	007f      	lsls	r7, r7, #1
 8002484:	4238      	tst	r0, r7
 8002486:	d059      	beq.n	800253c <HAL_UART_IRQHandler+0xec>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002488:	420b      	tst	r3, r1
 800248a:	d005      	beq.n	8002498 <HAL_UART_IRQHandler+0x48>
 800248c:	05c6      	lsls	r6, r0, #23
 800248e:	d503      	bpl.n	8002498 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002490:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002492:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8002494:	4331      	orrs	r1, r6
 8002496:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002498:	2102      	movs	r1, #2
 800249a:	420b      	tst	r3, r1
 800249c:	d006      	beq.n	80024ac <HAL_UART_IRQHandler+0x5c>
 800249e:	2d00      	cmp	r5, #0
 80024a0:	d004      	beq.n	80024ac <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80024a2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024a4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80024a6:	1849      	adds	r1, r1, r1
 80024a8:	4331      	orrs	r1, r6
 80024aa:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ac:	2104      	movs	r1, #4
 80024ae:	420b      	tst	r3, r1
 80024b0:	d006      	beq.n	80024c0 <HAL_UART_IRQHandler+0x70>
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80024b6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80024ba:	3902      	subs	r1, #2
 80024bc:	4331      	orrs	r1, r6
 80024be:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80024c0:	0719      	lsls	r1, r3, #28
 80024c2:	d508      	bpl.n	80024d6 <HAL_UART_IRQHandler+0x86>
 80024c4:	0681      	lsls	r1, r0, #26
 80024c6:	d401      	bmi.n	80024cc <HAL_UART_IRQHandler+0x7c>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80024cc:	2108      	movs	r1, #8
 80024ce:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80024d2:	4311      	orrs	r1, r2
 80024d4:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024d6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80024d8:	2a00      	cmp	r2, #0
 80024da:	d0c9      	beq.n	8002470 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024dc:	2220      	movs	r2, #32
 80024de:	4213      	tst	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_UART_IRQHandler+0x9c>
 80024e2:	4210      	tst	r0, r2
 80024e4:	d002      	beq.n	80024ec <HAL_UART_IRQHandler+0x9c>
        UART_Receive_IT(huart);
 80024e6:	0020      	movs	r0, r4
 80024e8:	f7ff ff74 	bl	80023d4 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80024ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 80024ee:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	d404      	bmi.n	80024fe <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	689d      	ldr	r5, [r3, #8]
 80024f8:	2340      	movs	r3, #64	; 0x40
 80024fa:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80024fc:	d01a      	beq.n	8002534 <HAL_UART_IRQHandler+0xe4>
        UART_EndRxTransfer(huart);
 80024fe:	f7ff fc2f 	bl	8001d60 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	420a      	tst	r2, r1
 800250a:	d00f      	beq.n	800252c <HAL_UART_IRQHandler+0xdc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800250c:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800250e:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002510:	438a      	bics	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002514:	2800      	cmp	r0, #0
 8002516:	d009      	beq.n	800252c <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_UART_IRQHandler+0x134>)
 800251a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800251c:	f7fe f9dc 	bl	80008d8 <HAL_DMA_Abort_IT>
 8002520:	2800      	cmp	r0, #0
 8002522:	d0a5      	beq.n	8002470 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002524:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002526:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002528:	4798      	blx	r3
 800252a:	e7a1      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 800252c:	0020      	movs	r0, r4
 800252e:	f7ff fc7c 	bl	8001e2a <HAL_UART_ErrorCallback>
 8002532:	e79d      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8002534:	f7ff fc79 	bl	8001e2a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	66e5      	str	r5, [r4, #108]	; 0x6c
 800253a:	e799      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0349      	lsls	r1, r1, #13
 8002540:	420b      	tst	r3, r1
 8002542:	d00b      	beq.n	800255c <HAL_UART_IRQHandler+0x10c>
 8002544:	0275      	lsls	r5, r6, #9
 8002546:	d509      	bpl.n	800255c <HAL_UART_IRQHandler+0x10c>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002548:	6211      	str	r1, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800254a:	0022      	movs	r2, r4
 800254c:	2320      	movs	r3, #32
 800254e:	3269      	adds	r2, #105	; 0x69
 8002550:	7013      	strb	r3, [r2, #0]
    HAL_UARTEx_WakeupCallback(huart);
 8002552:	0020      	movs	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8002554:	7053      	strb	r3, [r2, #1]
    HAL_UARTEx_WakeupCallback(huart);
 8002556:	f000 f817 	bl	8002588 <HAL_UARTEx_WakeupCallback>
    return;
 800255a:	e789      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	4213      	tst	r3, r2
 8002560:	d005      	beq.n	800256e <HAL_UART_IRQHandler+0x11e>
 8002562:	4210      	tst	r0, r2
 8002564:	d003      	beq.n	800256e <HAL_UART_IRQHandler+0x11e>
    UART_Transmit_IT(huart);
 8002566:	0020      	movs	r0, r4
 8002568:	f7ff fef4 	bl	8002354 <UART_Transmit_IT>
    return;
 800256c:	e780      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	4213      	tst	r3, r2
 8002572:	d100      	bne.n	8002576 <HAL_UART_IRQHandler+0x126>
 8002574:	e77c      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
 8002576:	4210      	tst	r0, r2
 8002578:	d100      	bne.n	800257c <HAL_UART_IRQHandler+0x12c>
 800257a:	e779      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 800257c:	0020      	movs	r0, r4
 800257e:	f7ff ff1b 	bl	80023b8 <UART_EndTransmit_IT>
    return;
 8002582:	e775      	b.n	8002470 <HAL_UART_IRQHandler+0x20>
 8002584:	08001e2d 	.word	0x08001e2d

08002588 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002588:	4770      	bx	lr
	...

0800258c <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 if(htim->Instance == TIM3){
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800258e:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002590:	b510      	push	{r4, lr}
 if(htim->Instance == TIM3){
 8002592:	429a      	cmp	r2, r3
 8002594:	d10a      	bne.n	80025ac <HAL_TIM_PeriodElapsedCallback+0x20>
	 pm2_5 = sdsGetPm2_5(&sds); pm10= sdsGetPm10(&sds);
 8002596:	4c07      	ldr	r4, [pc, #28]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002598:	0020      	movs	r0, r4
 800259a:	f000 f9c9 	bl	8002930 <sdsGetPm2_5>
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80025a0:	7018      	strb	r0, [r3, #0]
 80025a2:	0020      	movs	r0, r4
 80025a4:	f000 f9c6 	bl	8002934 <sdsGetPm10>
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025aa:	7018      	strb	r0, [r3, #0]
 }
}
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40000400 	.word	0x40000400
 80025b4:	200001e0 	.word	0x200001e0
 80025b8:	200001fc 	.word	0x200001fc
 80025bc:	20000094 	.word	0x20000094

080025c0 <vprint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp) {
 80025c0:	b500      	push	{lr}
 80025c2:	b0b3      	sub	sp, #204	; 0xcc
 80025c4:	000a      	movs	r2, r1
	char string[200];
	if (0 < vsprintf(string, fmt, argp)) // build string
 80025c6:	0001      	movs	r1, r0
 80025c8:	4668      	mov	r0, sp
 80025ca:	f000 fc33 	bl	8002e34 <vsiprintf>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	dd08      	ble.n	80025e4 <vprint+0x24>
			{
		HAL_UART_Transmit(&huart1, (uint8_t*) string, strlen(string), 0xffffff); // send message via UART
 80025d2:	4668      	mov	r0, sp
 80025d4:	f7fd fd98 	bl	8000108 <strlen>
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <vprint+0x28>)
 80025da:	b282      	uxth	r2, r0
 80025dc:	4669      	mov	r1, sp
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <vprint+0x2c>)
 80025e0:	f7ff fd64 	bl	80020ac <HAL_UART_Transmit>
	}
}
 80025e4:	b033      	add	sp, #204	; 0xcc
 80025e6:	bd00      	pop	{pc}
 80025e8:	00ffffff 	.word	0x00ffffff
 80025ec:	2000016c 	.word	0x2000016c

080025f0 <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 80025f0:	b40f      	push	{r0, r1, r2, r3}
 80025f2:	b507      	push	{r0, r1, r2, lr}
 80025f4:	a904      	add	r1, sp, #16
 80025f6:	c901      	ldmia	r1!, {r0}
	va_list argp;
	va_start(argp, fmt);
 80025f8:	9101      	str	r1, [sp, #4]
	vprint(fmt, argp);
 80025fa:	f7ff ffe1 	bl	80025c0 <vprint>
	va_end(argp);
}
 80025fe:	b003      	add	sp, #12
 8002600:	bc08      	pop	{r3}
 8002602:	b004      	add	sp, #16
 8002604:	4718      	bx	r3
	...

08002608 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))
 8002608:	6803      	ldr	r3, [r0, #0]
{
 800260a:	b510      	push	{r4, lr}
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	075b      	lsls	r3, r3, #29
 8002610:	d503      	bpl.n	800261a <HAL_ADC_ConvCpltCallback+0x12>
    {
    ADC_raw = HAL_ADC_GetValue(hadc);
 8002612:	f7fd ffe1 	bl	80005d8 <HAL_ADC_GetValue>
 8002616:	4b01      	ldr	r3, [pc, #4]	; (800261c <HAL_ADC_ConvCpltCallback+0x14>)
 8002618:	6018      	str	r0, [r3, #0]
    }
}
 800261a:	bd10      	pop	{r4, pc}
 800261c:	200001dc 	.word	0x200001dc

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002622:	2410      	movs	r4, #16
{
 8002624:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	2234      	movs	r2, #52	; 0x34
 8002628:	2100      	movs	r1, #0
 800262a:	a80b      	add	r0, sp, #44	; 0x2c
 800262c:	f000 fbe1 	bl	8002df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002630:	0022      	movs	r2, r4
 8002632:	2100      	movs	r1, #0
 8002634:	a801      	add	r0, sp, #4
 8002636:	f000 fbdc 	bl	8002df2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263a:	2218      	movs	r2, #24
 800263c:	2100      	movs	r1, #0
 800263e:	a805      	add	r0, sp, #20
 8002640:	f000 fbd7 	bl	8002df2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002644:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002646:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002648:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800264a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800264c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800264e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002652:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002654:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002656:	f7fe fdb9 	bl	80011cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800265a:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800265c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800265e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002660:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002662:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002664:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002666:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002668:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800266a:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800266c:	f7ff f824 	bl	80016b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002670:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002672:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002674:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002676:	9407      	str	r4, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002678:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267a:	f7ff f8e1 	bl	8001840 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800267e:	b019      	add	sp, #100	; 0x64
 8002680:	bd30      	pop	{r4, r5, pc}
	...

08002684 <main>:
{
 8002684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002686:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002688:	f7fd fee2 	bl	8000450 <HAL_Init>
  SystemClock_Config();
 800268c:	f7ff ffc8 	bl	8002620 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002690:	2080      	movs	r0, #128	; 0x80
 8002692:	4b77      	ldr	r3, [pc, #476]	; (8002870 <main+0x1ec>)
 8002694:	03c0      	lsls	r0, r0, #15
 8002696:	6959      	ldr	r1, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002698:	260c      	movs	r6, #12
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800269a:	4301      	orrs	r1, r0
 800269c:	6159      	str	r1, [r3, #20]
 800269e:	695a      	ldr	r2, [r3, #20]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026a0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a2:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a4:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a6:	9201      	str	r2, [sp, #4]
 80026a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	0280      	lsls	r0, r0, #10
 80026ae:	4301      	orrs	r1, r0
 80026b0:	6159      	str	r1, [r3, #20]
 80026b2:	695a      	ldr	r2, [r3, #20]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026b4:	2704      	movs	r7, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4002      	ands	r2, r0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b8:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	9202      	str	r2, [sp, #8]
 80026bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	6959      	ldr	r1, [r3, #20]
 80026c0:	02c0      	lsls	r0, r0, #11
 80026c2:	4301      	orrs	r1, r0
 80026c4:	6159      	str	r1, [r3, #20]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026c6:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	4002      	ands	r2, r0
 80026cc:	9203      	str	r2, [sp, #12]
 80026ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026d0:	695a      	ldr	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80026d2:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026d4:	430a      	orrs	r2, r1
 80026d6:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	400b      	ands	r3, r1
 80026de:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80026e0:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e2:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80026e4:	f7fe f86e 	bl	80007c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80026e8:	200a      	movs	r0, #10
 80026ea:	f7fe f89b 	bl	8000824 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80026ee:	0032      	movs	r2, r6
 80026f0:	2100      	movs	r1, #0
 80026f2:	a806      	add	r0, sp, #24
 80026f4:	f000 fb7d 	bl	8002df2 <memset>
  hadc.Instance = ADC1;
 80026f8:	4d5e      	ldr	r5, [pc, #376]	; (8002874 <main+0x1f0>)
 80026fa:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <main+0x1f4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80026fc:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 80026fe:	602b      	str	r3, [r5, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002700:	2301      	movs	r3, #1
 8002702:	612b      	str	r3, [r5, #16]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002704:	23c2      	movs	r3, #194	; 0xc2
 8002706:	33ff      	adds	r3, #255	; 0xff
 8002708:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800270a:	3bc1      	subs	r3, #193	; 0xc1
 800270c:	3bff      	subs	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800270e:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002710:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002712:	60ec      	str	r4, [r5, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002714:	616f      	str	r7, [r5, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002716:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002718:	61ec      	str	r4, [r5, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800271a:	622c      	str	r4, [r5, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800271c:	626c      	str	r4, [r5, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800271e:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002720:	632c      	str	r4, [r5, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002722:	636b      	str	r3, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002724:	f7fd feb2 	bl	800048c <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	015b      	lsls	r3, r3, #5
 800272c:	9307      	str	r3, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800272e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002730:	a906      	add	r1, sp, #24
 8002732:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 8002734:	9706      	str	r7, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002736:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002738:	f7fd ffc4 	bl	80006c4 <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 800273c:	4d4f      	ldr	r5, [pc, #316]	; (800287c <main+0x1f8>)
 800273e:	4b50      	ldr	r3, [pc, #320]	; (8002880 <main+0x1fc>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002740:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 8002742:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8002744:	23e1      	movs	r3, #225	; 0xe1
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	606b      	str	r3, [r5, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800274c:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274e:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002756:	622c      	str	r4, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002758:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800275a:	f7ff fdc5 	bl	80022e8 <HAL_UART_Init>
  huart2.Instance = USART2;
 800275e:	4f49      	ldr	r7, [pc, #292]	; (8002884 <main+0x200>)
 8002760:	4b49      	ldr	r3, [pc, #292]	; (8002888 <main+0x204>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002762:	0038      	movs	r0, r7
  huart2.Instance = USART2;
 8002764:	603b      	str	r3, [r7, #0]
  huart2.Init.BaudRate = 9600;
 8002766:	2396      	movs	r3, #150	; 0x96
 8002768:	019b      	lsls	r3, r3, #6
 800276a:	607b      	str	r3, [r7, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800276c:	60bc      	str	r4, [r7, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800276e:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002770:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002772:	617e      	str	r6, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002774:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002776:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002778:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800277a:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800277c:	f7ff fdb4 	bl	80022e8 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002780:	0021      	movs	r1, r4
 8002782:	2210      	movs	r2, #16
 8002784:	a806      	add	r0, sp, #24
 8002786:	f000 fb34 	bl	8002df2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278a:	0021      	movs	r1, r4
 800278c:	2208      	movs	r2, #8
 800278e:	a804      	add	r0, sp, #16
 8002790:	f000 fb2f 	bl	8002df2 <memset>
  htim3.Instance = TIM3;
 8002794:	4a3d      	ldr	r2, [pc, #244]	; (800288c <main+0x208>)
 8002796:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <main+0x20c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002798:	0010      	movs	r0, r2
  htim3.Instance = TIM3;
 800279a:	6013      	str	r3, [r2, #0]
  htim3.Init.Prescaler = 749;
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <main+0x210>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279e:	6094      	str	r4, [r2, #8]
  htim3.Init.Prescaler = 749;
 80027a0:	6053      	str	r3, [r2, #4]
  htim3.Init.Period = 63999;
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <main+0x214>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	6114      	str	r4, [r2, #16]
  htim3.Init.Period = 63999;
 80027a6:	60d3      	str	r3, [r2, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a8:	6194      	str	r4, [r2, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027aa:	f7ff f9d9 	bl	8001b60 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ae:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b0:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b4:	4835      	ldr	r0, [pc, #212]	; (800288c <main+0x208>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b6:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b8:	f7ff f9fa 	bl	8001bb0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027bc:	a904      	add	r1, sp, #16
 80027be:	4833      	ldr	r0, [pc, #204]	; (800288c <main+0x208>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c0:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c2:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c4:	f7ff faa8 	bl	8001d18 <HAL_TIMEx_MasterConfigSynchronization>
  hi2c1.Instance = I2C1;
 80027c8:	4e34      	ldr	r6, [pc, #208]	; (800289c <main+0x218>)
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <main+0x21c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027cc:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80027ce:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80027d0:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <main+0x220>)
  hi2c1.Init.OwnAddress1 = 0;
 80027d2:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x2000090E;
 80027d4:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d6:	2301      	movs	r3, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027d8:	6134      	str	r4, [r6, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027da:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.OwnAddress2 = 0;
 80027dc:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027de:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e0:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e2:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027e4:	f7fe f9cc 	bl	8000b80 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027e8:	0021      	movs	r1, r4
 80027ea:	0030      	movs	r0, r6
 80027ec:	f7fe fca4 	bl	8001138 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027f0:	0021      	movs	r1, r4
 80027f2:	0030      	movs	r0, r6
 80027f4:	f7fe fcc6 	bl	8001184 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_TIM_Base_Start_IT(&htim3);
 80027f8:	4824      	ldr	r0, [pc, #144]	; (800288c <main+0x208>)
 80027fa:	f7ff f8b7 	bl	800196c <HAL_TIM_Base_Start_IT>
	sdsInit(&sds, &huart2);
 80027fe:	4c2a      	ldr	r4, [pc, #168]	; (80028a8 <main+0x224>)
 8002800:	0039      	movs	r1, r7
 8002802:	0020      	movs	r0, r4
 8002804:	f000 f866 	bl	80028d4 <sdsInit>
	sdsWorkingMode(&sds);
 8002808:	0020      	movs	r0, r4
 800280a:	f000 f883 	bl	8002914 <sdsWorkingMode>
	 	  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) == SET)
 800280e:	2620      	movs	r6, #32
 8002810:	682a      	ldr	r2, [r5, #0]
 8002812:	69d3      	ldr	r3, [r2, #28]
 8002814:	4233      	tst	r3, r6
 8002816:	d0fc      	beq.n	8002812 <main+0x18e>
	 	  HAL_UART_Receive(&huart1, &value, 1, 100);
 8002818:	2364      	movs	r3, #100	; 0x64
 800281a:	2201      	movs	r2, #1
 800281c:	a906      	add	r1, sp, #24
 800281e:	0028      	movs	r0, r5
 8002820:	f7ff fcaa 	bl	8002178 <HAL_UART_Receive>
	 	  switch (value) {
 8002824:	466b      	mov	r3, sp
 8002826:	7e18      	ldrb	r0, [r3, #24]
 8002828:	3832      	subs	r0, #50	; 0x32
 800282a:	2805      	cmp	r0, #5
 800282c:	d8f0      	bhi.n	8002810 <main+0x18c>
 800282e:	f7fd fc7d 	bl	800012c <__gnu_thumb1_case_uqi>
 8002832:	0903      	.short	0x0903
 8002834:	17130f0b 	.word	0x17130f0b
				 my_printf("%d\n\r",  pm2_5);
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <main+0x228>)
				my_printf("%d\n\r",pm10);
 800283a:	7819      	ldrb	r1, [r3, #0]
 800283c:	481c      	ldr	r0, [pc, #112]	; (80028b0 <main+0x22c>)
 800283e:	f7ff fed7 	bl	80025f0 <my_printf>
				break;
 8002842:	e7e5      	b.n	8002810 <main+0x18c>
				my_printf("%d\n\r",pm10);
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <main+0x230>)
 8002846:	e7f8      	b.n	800283a <main+0x1b6>
				sdsWorkingMode(&sds);
 8002848:	0020      	movs	r0, r4
 800284a:	f000 f863 	bl	8002914 <sdsWorkingMode>
				break;
 800284e:	e7df      	b.n	8002810 <main+0x18c>
				sdsSleepMode(&sds);
 8002850:	0020      	movs	r0, r4
 8002852:	f000 f851 	bl	80028f8 <sdsSleepMode>
				break;
 8002856:	e7db      	b.n	8002810 <main+0x18c>
				my_printf("TEST\n\r");
 8002858:	4817      	ldr	r0, [pc, #92]	; (80028b8 <main+0x234>)
 800285a:	f7ff fec9 	bl	80025f0 <my_printf>
					break;
 800285e:	e7d7      	b.n	8002810 <main+0x18c>
		 		 my_printf("Pomiar %d %d\n\r",  pm2_5, pm10);
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <main+0x230>)
 8002862:	4816      	ldr	r0, [pc, #88]	; (80028bc <main+0x238>)
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <main+0x228>)
 8002868:	7819      	ldrb	r1, [r3, #0]
 800286a:	f7ff fec1 	bl	80025f0 <my_printf>
					break;
 800286e:	e7cf      	b.n	8002810 <main+0x18c>
 8002870:	40021000 	.word	0x40021000
 8002874:	200002e4 	.word	0x200002e4
 8002878:	40012400 	.word	0x40012400
 800287c:	2000016c 	.word	0x2000016c
 8002880:	40013800 	.word	0x40013800
 8002884:	20000274 	.word	0x20000274
 8002888:	40004400 	.word	0x40004400
 800288c:	20000128 	.word	0x20000128
 8002890:	40000400 	.word	0x40000400
 8002894:	000002ed 	.word	0x000002ed
 8002898:	0000f9ff 	.word	0x0000f9ff
 800289c:	200000dc 	.word	0x200000dc
 80028a0:	40005400 	.word	0x40005400
 80028a4:	2000090e 	.word	0x2000090e
 80028a8:	200001e0 	.word	0x200001e0
 80028ac:	200001fc 	.word	0x200001fc
 80028b0:	08003685 	.word	0x08003685
 80028b4:	20000094 	.word	0x20000094
 80028b8:	08003674 	.word	0x08003674
 80028bc:	0800367b 	.word	0x0800367b

080028c0 <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c0:	b510      	push	{r4, lr}
 80028c2:	0001      	movs	r1, r0
sds_uart_RxCpltCallback(&sds,huart);
 80028c4:	4801      	ldr	r0, [pc, #4]	; (80028cc <HAL_UART_RxCpltCallback+0xc>)
 80028c6:	f000 f837 	bl	8002938 <sds_uart_RxCpltCallback>
}
 80028ca:	bd10      	pop	{r4, pc}
 80028cc:	200001e0 	.word	0x200001e0

080028d0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028d0:	4770      	bx	lr
	...

080028d4 <sdsInit>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @param huart_sds pointer to UART handle structure
*/
void sdsInit(SDS* sds, const UART_HandleTypeDef* huart_sds)
{
 80028d4:	b510      	push	{r4, lr}
 80028d6:	0004      	movs	r4, r0
sds->huart_sds=(UART_HandleTypeDef *)huart_sds;
HAL_UART_Transmit(sds->huart_sds,(uint8_t*)Sds011_WorkingMode, 19,30);
 80028d8:	231e      	movs	r3, #30
sds->huart_sds=(UART_HandleTypeDef *)huart_sds;
 80028da:	6021      	str	r1, [r4, #0]
{
 80028dc:	0008      	movs	r0, r1
HAL_UART_Transmit(sds->huart_sds,(uint8_t*)Sds011_WorkingMode, 19,30);
 80028de:	2213      	movs	r2, #19
 80028e0:	4904      	ldr	r1, [pc, #16]	; (80028f4 <sdsInit+0x20>)
 80028e2:	f7ff fbe3 	bl	80020ac <HAL_UART_Transmit>
HAL_UART_Receive_IT(sds->huart_sds, sds->data_receive, 10);
 80028e6:	0021      	movs	r1, r4
 80028e8:	220a      	movs	r2, #10
 80028ea:	3108      	adds	r1, #8
 80028ec:	6820      	ldr	r0, [r4, #0]
 80028ee:	f7ff fa47 	bl	8001d80 <HAL_UART_Receive_IT>
}
 80028f2:	bd10      	pop	{r4, pc}
 80028f4:	0800369d 	.word	0x0800369d

080028f8 <sdsSleepMode>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @return status of the message transmission
*/
int8_t sdsSleepMode(SDS* sds)
{
 80028f8:	b510      	push	{r4, lr}
	return HAL_UART_Transmit(sds->huart_sds, (uint8_t*)Sds011_SleepCommand,19,30)==HAL_OK ? 1:0;
 80028fa:	231e      	movs	r3, #30
 80028fc:	2213      	movs	r2, #19
 80028fe:	4904      	ldr	r1, [pc, #16]	; (8002910 <sdsSleepMode+0x18>)
 8002900:	6800      	ldr	r0, [r0, #0]
 8002902:	f7ff fbd3 	bl	80020ac <HAL_UART_Transmit>
 8002906:	4243      	negs	r3, r0
 8002908:	4158      	adcs	r0, r3
 800290a:	b240      	sxtb	r0, r0
}
 800290c:	bd10      	pop	{r4, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	0800368a 	.word	0x0800368a

08002914 <sdsWorkingMode>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @return status of the message transmission
*/
int8_t sdsWorkingMode(SDS* sds)
{
 8002914:	b510      	push	{r4, lr}
	return HAL_UART_Transmit(sds->huart_sds, (uint8_t*)Sds011_WorkingMode,19,30)==HAL_OK ? 1:0;
 8002916:	231e      	movs	r3, #30
 8002918:	2213      	movs	r2, #19
 800291a:	4904      	ldr	r1, [pc, #16]	; (800292c <sdsWorkingMode+0x18>)
 800291c:	6800      	ldr	r0, [r0, #0]
 800291e:	f7ff fbc5 	bl	80020ac <HAL_UART_Transmit>
 8002922:	4243      	negs	r3, r0
 8002924:	4158      	adcs	r0, r3
 8002926:	b240      	sxtb	r0, r0
}
 8002928:	bd10      	pop	{r4, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	0800369d 	.word	0x0800369d

08002930 <sdsGetPm2_5>:
 *   @param sds pointer to SDS_t handle structure
 *   @return value of PM 2.5
*/
uint16_t sdsGetPm2_5(SDS* sds)
{
	return  sds->pm_2_5;
 8002930:	8880      	ldrh	r0, [r0, #4]
}
 8002932:	4770      	bx	lr

08002934 <sdsGetPm10>:
 *   @param sds pointer to SDS_t handle structure
 *   @return value of PM 10
*/
uint16_t sdsGetPm10(SDS* sds)
{
	return  sds->pm_10;
 8002934:	88c0      	ldrh	r0, [r0, #6]
}
 8002936:	4770      	bx	lr

08002938 <sds_uart_RxCpltCallback>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @param huart pointer to UART handle structure
*/
void sds_uart_RxCpltCallback(SDS* sds, UART_HandleTypeDef *huart)
{
 8002938:	b570      	push	{r4, r5, r6, lr}
	if(huart == sds->huart_sds)
 800293a:	6805      	ldr	r5, [r0, #0]
{
 800293c:	0004      	movs	r4, r0
	if(huart == sds->huart_sds)
 800293e:	428d      	cmp	r5, r1
 8002940:	d112      	bne.n	8002968 <sds_uart_RxCpltCallback+0x30>
		{
				if((sds->data_receive[1] == 0xC0))
 8002942:	7a43      	ldrb	r3, [r0, #9]
 8002944:	2bc0      	cmp	r3, #192	; 0xc0
 8002946:	d109      	bne.n	800295c <sds_uart_RxCpltCallback+0x24>
				{
					sds->pm_2_5 = ((sds->data_receive[3]<<8)| sds->data_receive[2])/10;
 8002948:	8940      	ldrh	r0, [r0, #10]
 800294a:	210a      	movs	r1, #10
 800294c:	f7fd fc82 	bl	8000254 <__divsi3>
					sds->pm_10 = ((sds->data_receive[5]<<8)| sds->data_receive[4])/10;
 8002950:	210a      	movs	r1, #10
					sds->pm_2_5 = ((sds->data_receive[3]<<8)| sds->data_receive[2])/10;
 8002952:	80a0      	strh	r0, [r4, #4]
					sds->pm_10 = ((sds->data_receive[5]<<8)| sds->data_receive[4])/10;
 8002954:	89a0      	ldrh	r0, [r4, #12]
 8002956:	f7fd fc7d 	bl	8000254 <__divsi3>
 800295a:	80e0      	strh	r0, [r4, #6]
			}
			HAL_UART_Receive_IT(sds->huart_sds, sds->data_receive, 10);
 800295c:	0021      	movs	r1, r4
 800295e:	220a      	movs	r2, #10
 8002960:	3108      	adds	r1, #8
 8002962:	0028      	movs	r0, r5
 8002964:	f7ff fa0c 	bl	8001d80 <HAL_UART_Receive_IT>
		}
}
 8002968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800296c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800296c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	2001      	movs	r0, #1
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_MspInit+0x38>)
 8002972:	6999      	ldr	r1, [r3, #24]
 8002974:	4301      	orrs	r1, r0
 8002976:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	4002      	ands	r2, r0
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002986:	3003      	adds	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	430a      	orrs	r2, r1
 800298a:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800298c:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	400b      	ands	r3, r1
 8002992:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002994:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002998:	f7fd ff14 	bl	80007c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800299c:	2004      	movs	r0, #4
 800299e:	f7fd ff41 	bl	8000824 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bd07      	pop	{r0, r1, r2, pc}
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029a8:	b510      	push	{r4, lr}
 80029aa:	0004      	movs	r4, r0
 80029ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ae:	2214      	movs	r2, #20
 80029b0:	2100      	movs	r1, #0
 80029b2:	a803      	add	r0, sp, #12
 80029b4:	f000 fa1d 	bl	8002df2 <memset>
  if(hadc->Instance==ADC1)
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_ADC_MspInit+0x64>)
 80029ba:	6822      	ldr	r2, [r4, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d123      	bne.n	8002a08 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029c0:	2080      	movs	r0, #128	; 0x80
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_ADC_MspInit+0x68>)
 80029c4:	0080      	lsls	r0, r0, #2
 80029c6:	6999      	ldr	r1, [r3, #24]
 80029c8:	4301      	orrs	r1, r0
 80029ca:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029ce:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029d2:	4002      	ands	r2, r0
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	695a      	ldr	r2, [r3, #20]
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ADC_SOIL_MISTURE_Pin|ADC_WIND_DIRECTION_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	430a      	orrs	r2, r1
 80029de:	615a      	str	r2, [r3, #20]
 80029e0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	400b      	ands	r3, r1
 80029e6:	9302      	str	r3, [sp, #8]
 80029e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_SOIL_MISTURE_Pin|ADC_WIND_DIRECTION_Pin;
 80029ea:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_SOIL_MISTURE_Pin|ADC_WIND_DIRECTION_Pin;
 80029ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f0:	3b0f      	subs	r3, #15
 80029f2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f7fd ffdc 	bl	80009b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	200c      	movs	r0, #12
 80029fc:	0011      	movs	r1, r2
 80029fe:	f7fd fee1 	bl	80007c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002a02:	200c      	movs	r0, #12
 8002a04:	f7fd ff0e 	bl	8000824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a08:	b008      	add	sp, #32
 8002a0a:	bd10      	pop	{r4, pc}
 8002a0c:	40012400 	.word	0x40012400
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a14:	b530      	push	{r4, r5, lr}
 8002a16:	0005      	movs	r5, r0
 8002a18:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1a:	2214      	movs	r2, #20
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	a803      	add	r0, sp, #12
 8002a20:	f000 f9e7 	bl	8002df2 <memset>
  if(hi2c->Instance==I2C1)
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_I2C_MspInit+0xc4>)
 8002a26:	682a      	ldr	r2, [r5, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d152      	bne.n	8002ad2 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	4c2b      	ldr	r4, [pc, #172]	; (8002adc <HAL_I2C_MspInit+0xc8>)
 8002a30:	02c9      	lsls	r1, r1, #11
 8002a32:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = I2CL_BME_SCL_Pin|I2C1_BME_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a34:	482a      	ldr	r0, [pc, #168]	; (8002ae0 <HAL_I2C_MspInit+0xcc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	430a      	orrs	r2, r1
 8002a38:	6162      	str	r2, [r4, #20]
 8002a3a:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3c:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	400b      	ands	r3, r1
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2CL_BME_SCL_Pin|I2C1_BME_SDA_Pin;
 8002a44:	23c0      	movs	r3, #192	; 0xc0
 8002a46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a48:	3bae      	subs	r3, #174	; 0xae
 8002a4a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	3b11      	subs	r3, #17
 8002a50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a52:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002a54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	f7fd ffab 	bl	80009b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	69e2      	ldr	r2, [r4, #28]
 8002a5e:	0389      	lsls	r1, r1, #14
 8002a60:	430a      	orrs	r2, r1
 8002a62:	61e2      	str	r2, [r4, #28]
 8002a64:	69e3      	ldr	r3, [r4, #28]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8002a66:	4c1f      	ldr	r4, [pc, #124]	; (8002ae4 <HAL_I2C_MspInit+0xd0>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a68:	400b      	ands	r3, r1
 8002a6a:	9302      	str	r3, [sp, #8]
 8002a6c:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_I2C_MspInit+0xd4>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8002a72:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a74:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a76:	0020      	movs	r0, r4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a78:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7a:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a7e:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a80:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002a82:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a84:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a86:	f7fd fef1 	bl	800086c <HAL_DMA_Init>
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8002a8e:	f7ff ff1f 	bl	80028d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8002a92:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_I2C_MspInit+0xd8>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002a94:	63ec      	str	r4, [r5, #60]	; 0x3c
 8002a96:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8002a98:	4c15      	ldr	r4, [pc, #84]	; (8002af0 <HAL_I2C_MspInit+0xdc>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9a:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8002a9c:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa2:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002aa4:	0020      	movs	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa6:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa8:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aaa:	6123      	str	r3, [r4, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aac:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002aae:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ab0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002ab2:	f7fd fedb 	bl	800086c <HAL_DMA_Init>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8002aba:	f7ff ff09 	bl	80028d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2017      	movs	r0, #23
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002ac2:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002ac4:	0011      	movs	r1, r2
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002ac6:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002ac8:	f7fd fe7c 	bl	80007c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002acc:	2017      	movs	r0, #23
 8002ace:	f7fd fea9 	bl	8000824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ad2:	b009      	add	sp, #36	; 0x24
 8002ad4:	bd30      	pop	{r4, r5, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	48000400 	.word	0x48000400
 8002ae4:	20000230 	.word	0x20000230
 8002ae8:	40020030 	.word	0x40020030
 8002aec:	4002001c 	.word	0x4002001c
 8002af0:	20000098 	.word	0x20000098

08002af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af4:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_TIM_Base_MspInit+0x30>)
 8002af8:	6802      	ldr	r2, [r0, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d110      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afe:	2002      	movs	r0, #2
 8002b00:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_TIM_Base_MspInit+0x34>)
 8002b02:	69d1      	ldr	r1, [r2, #28]
 8002b04:	4301      	orrs	r1, r0
 8002b06:	61d1      	str	r1, [r2, #28]
 8002b08:	69d3      	ldr	r3, [r2, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b0c:	4003      	ands	r3, r0
 8002b0e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b10:	300e      	adds	r0, #14
 8002b12:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b14:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b16:	f7fd fe55 	bl	80007c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b1a:	2010      	movs	r0, #16
 8002b1c:	f7fd fe82 	bl	8000824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b20:	bd07      	pop	{r0, r1, r2, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	0004      	movs	r4, r0
 8002b30:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b32:	2214      	movs	r2, #20
 8002b34:	2100      	movs	r1, #0
 8002b36:	a805      	add	r0, sp, #20
 8002b38:	f000 f95b 	bl	8002df2 <memset>
  if(huart->Instance==USART1)
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_UART_MspInit+0xc0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d12a      	bne.n	8002b9a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b44:	2080      	movs	r0, #128	; 0x80
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_UART_MspInit+0xc4>)
 8002b48:	01c0      	lsls	r0, r0, #7
 8002b4a:	6999      	ldr	r1, [r3, #24]
 8002b4c:	4301      	orrs	r1, r0
 8002b4e:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b50:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b52:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b56:	4002      	ands	r2, r0
 8002b58:	9201      	str	r2, [sp, #4]
 8002b5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = UART1_ESP_TX_Pin|UART1_ESP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	430a      	orrs	r2, r1
 8002b62:	615a      	str	r2, [r3, #20]
 8002b64:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b68:	400b      	ands	r3, r1
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = UART1_ESP_TX_Pin|UART1_ESP_RX_Pin;
 8002b6e:	23c0      	movs	r3, #192	; 0xc0
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b78:	3301      	adds	r3, #1
 8002b7a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b7e:	3b02      	subs	r3, #2
 8002b80:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f7fd ff15 	bl	80009b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	201b      	movs	r0, #27
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	f7fd fe1a 	bl	80007c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b90:	201b      	movs	r0, #27
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b92:	f7fd fe47 	bl	8000824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b96:	b00a      	add	sp, #40	; 0x28
 8002b98:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_UART_MspInit+0xc8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d1fa      	bne.n	8002b96 <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_UART_MspInit+0xc4>)
 8002ba4:	0292      	lsls	r2, r2, #10
 8002ba6:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8002baa:	4311      	orrs	r1, r2
 8002bac:	61d9      	str	r1, [r3, #28]
 8002bae:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb2:	4011      	ands	r1, r2
 8002bb4:	9103      	str	r1, [sp, #12]
 8002bb6:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb8:	6959      	ldr	r1, [r3, #20]
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	6159      	str	r1, [r3, #20]
 8002bbe:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	9204      	str	r2, [sp, #16]
 8002bc6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = UART2_SDS011_TX_Pin|UART2_SDS011_RX_Pin;
 8002bc8:	230c      	movs	r3, #12
 8002bca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	3b0a      	subs	r3, #10
 8002bce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002bd4:	3b02      	subs	r3, #2
 8002bd6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f7fd feea 	bl	80009b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	201c      	movs	r0, #28
 8002be0:	0011      	movs	r1, r2
 8002be2:	f7fd fdef 	bl	80007c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002be6:	201c      	movs	r0, #28
 8002be8:	e7d3      	b.n	8002b92 <HAL_UART_MspInit+0x66>
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40004400 	.word	0x40004400

08002bf8 <NMI_Handler>:
 8002bf8:	4770      	bx	lr

08002bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfa:	e7fe      	b.n	8002bfa <HardFault_Handler>

08002bfc <SVC_Handler>:
 8002bfc:	4770      	bx	lr

08002bfe <PendSV_Handler>:
 8002bfe:	4770      	bx	lr

08002c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c02:	f7fd fc35 	bl	8000470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c06:	bd10      	pop	{r4, pc}

08002c08 <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002c08:	4770      	bx	lr
	...

08002c0c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002c0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c0e:	4803      	ldr	r0, [pc, #12]	; (8002c1c <DMA1_Channel2_3_IRQHandler+0x10>)
 8002c10:	f7fd fe85 	bl	800091e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002c16:	f7fd fe82 	bl	800091e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	20000098 	.word	0x20000098
 8002c20:	20000230 	.word	0x20000230

08002c24 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002c24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <ADC1_IRQHandler+0xc>)
 8002c28:	f7fd fcdc 	bl	80005e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	200002e4 	.word	0x200002e4

08002c34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c36:	4802      	ldr	r0, [pc, #8]	; (8002c40 <TIM3_IRQHandler+0xc>)
 8002c38:	f7fe fea6 	bl	8001988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000128 	.word	0x20000128

08002c44 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <I2C1_IRQHandler+0x1c>)
{
 8002c46:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002c48:	6803      	ldr	r3, [r0, #0]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	23e0      	movs	r3, #224	; 0xe0
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	421a      	tst	r2, r3
 8002c52:	d002      	beq.n	8002c5a <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c54:	f7fe fa28 	bl	80010a8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002c58:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c5a:	f7fd ffe7 	bl	8000c2c <HAL_I2C_EV_IRQHandler>
}
 8002c5e:	e7fb      	b.n	8002c58 <I2C1_IRQHandler+0x14>
 8002c60:	200000dc 	.word	0x200000dc

08002c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002c64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <USART1_IRQHandler+0xc>)
 8002c68:	f7ff fbf2 	bl	8002450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	2000016c 	.word	0x2000016c

08002c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c76:	4802      	ldr	r0, [pc, #8]	; (8002c80 <USART2_IRQHandler+0xc>)
 8002c78:	f7ff fbea 	bl	8002450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	20000274 	.word	0x20000274

08002c84 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <_sbrk+0x2c>)
{
 8002c86:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002c88:	6819      	ldr	r1, [r3, #0]
{
 8002c8a:	0002      	movs	r2, r0
	if (heap_end == 0)
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d101      	bne.n	8002c94 <_sbrk+0x10>
		heap_end = &end;
 8002c90:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <_sbrk+0x30>)
 8002c92:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002c94:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002c96:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002c98:	1882      	adds	r2, r0, r2
 8002c9a:	428a      	cmp	r2, r1
 8002c9c:	d906      	bls.n	8002cac <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002c9e:	f000 f875 	bl	8002d8c <__errno>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002caa:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002cac:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002cae:	e7fc      	b.n	8002caa <_sbrk+0x26>
 8002cb0:	20000084 	.word	0x20000084
 8002cb4:	20000334 	.word	0x20000334

08002cb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002cbc:	4811      	ldr	r0, [pc, #68]	; (8002d04 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4002      	ands	r2, r0
 8002cc8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	480e      	ldr	r0, [pc, #56]	; (8002d08 <SystemInit+0x50>)
 8002cce:	4002      	ands	r2, r0
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <SystemInit+0x54>)
 8002cd6:	4002      	ands	r2, r0
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	480c      	ldr	r0, [pc, #48]	; (8002d10 <SystemInit+0x58>)
 8002cde:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002ce0:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002ce2:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce6:	4382      	bics	r2, r0
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8002cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cec:	4809      	ldr	r0, [pc, #36]	; (8002d14 <SystemInit+0x5c>)
 8002cee:	4002      	ands	r2, r0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]

}
 8002cfc:	4770      	bx	lr
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08ffb80c 	.word	0x08ffb80c
 8002d08:	fef6ffff 	.word	0xfef6ffff
 8002d0c:	fffbffff 	.word	0xfffbffff
 8002d10:	ffc0ffff 	.word	0xffc0ffff
 8002d14:	fffffe2c 	.word	0xfffffe2c

08002d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d18:	4813      	ldr	r0, [pc, #76]	; (8002d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d1a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002d1c:	2004      	movs	r0, #4
    LDR R1, [R0]
 8002d1e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002d20:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002d22:	221f      	movs	r2, #31
    CMP R1, R2
 8002d24:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002d26:	d105      	bne.n	8002d34 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002d28:	4810      	ldr	r0, [pc, #64]	; (8002d6c <LoopForever+0x6>)
    LDR R1,=0x00000001
 8002d2a:	2101      	movs	r1, #1
    STR R1, [R0]
 8002d2c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002d2e:	4810      	ldr	r0, [pc, #64]	; (8002d70 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8002d30:	2100      	movs	r1, #0
    STR R1, [R0]
 8002d32:	6001      	str	r1, [r0, #0]

08002d34 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d34:	480f      	ldr	r0, [pc, #60]	; (8002d74 <LoopForever+0xe>)
  ldr r1, =_edata
 8002d36:	4910      	ldr	r1, [pc, #64]	; (8002d78 <LoopForever+0x12>)
  ldr r2, =_sidata
 8002d38:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <LoopForever+0x16>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d3c:	e002      	b.n	8002d44 <LoopCopyDataInit>

08002d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d42:	3304      	adds	r3, #4

08002d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d48:	d3f9      	bcc.n	8002d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <LoopForever+0x1a>)
  ldr r4, =_ebss
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <LoopForever+0x1e>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d50:	e001      	b.n	8002d56 <LoopFillZerobss>

08002d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d54:	3204      	adds	r2, #4

08002d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d58:	d3fb      	bcc.n	8002d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d5a:	f7ff ffad 	bl	8002cb8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d5e:	f000 f81b 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d62:	f7ff fc8f 	bl	8002684 <main>

08002d66 <LoopForever>:

LoopForever:
    b LoopForever
 8002d66:	e7fe      	b.n	8002d66 <LoopForever>
  ldr   r0, =_estack
 8002d68:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8002d6c:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8002d70:	40010000 	.word	0x40010000
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002d7c:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 8002d80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002d84:	20000334 	.word	0x20000334

08002d88 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <CEC_CAN_IRQHandler>
	...

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000004 	.word	0x20000004

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	4d0c      	ldr	r5, [pc, #48]	; (8002dd0 <__libc_init_array+0x38>)
 8002d9e:	4c0d      	ldr	r4, [pc, #52]	; (8002dd4 <__libc_init_array+0x3c>)
 8002da0:	1b64      	subs	r4, r4, r5
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	42a6      	cmp	r6, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	2600      	movs	r6, #0
 8002daa:	f000 fc45 	bl	8003638 <_init>
 8002dae:	4d0a      	ldr	r5, [pc, #40]	; (8002dd8 <__libc_init_array+0x40>)
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <__libc_init_array+0x44>)
 8002db2:	1b64      	subs	r4, r4, r5
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	42a6      	cmp	r6, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	00b3      	lsls	r3, r6, #2
 8002dbe:	58eb      	ldr	r3, [r5, r3]
 8002dc0:	4798      	blx	r3
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	00b3      	lsls	r3, r6, #2
 8002dc8:	58eb      	ldr	r3, [r5, r3]
 8002dca:	4798      	blx	r3
 8002dcc:	3601      	adds	r6, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	080036fc 	.word	0x080036fc
 8002dd4:	080036fc 	.word	0x080036fc
 8002dd8:	080036fc 	.word	0x080036fc
 8002ddc:	08003700 	.word	0x08003700

08002de0 <memcpy>:
 8002de0:	2300      	movs	r3, #0
 8002de2:	b510      	push	{r4, lr}
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d100      	bne.n	8002dea <memcpy+0xa>
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	5ccc      	ldrb	r4, [r1, r3]
 8002dec:	54c4      	strb	r4, [r0, r3]
 8002dee:	3301      	adds	r3, #1
 8002df0:	e7f8      	b.n	8002de4 <memcpy+0x4>

08002df2 <memset>:
 8002df2:	0003      	movs	r3, r0
 8002df4:	1882      	adds	r2, r0, r2
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d100      	bne.n	8002dfc <memset+0xa>
 8002dfa:	4770      	bx	lr
 8002dfc:	7019      	strb	r1, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	e7f9      	b.n	8002df6 <memset+0x4>
	...

08002e04 <_vsiprintf_r>:
 8002e04:	b530      	push	{r4, r5, lr}
 8002e06:	b09b      	sub	sp, #108	; 0x6c
 8002e08:	9100      	str	r1, [sp, #0]
 8002e0a:	9104      	str	r1, [sp, #16]
 8002e0c:	4908      	ldr	r1, [pc, #32]	; (8002e30 <_vsiprintf_r+0x2c>)
 8002e0e:	466d      	mov	r5, sp
 8002e10:	9102      	str	r1, [sp, #8]
 8002e12:	9105      	str	r1, [sp, #20]
 8002e14:	2101      	movs	r1, #1
 8002e16:	2482      	movs	r4, #130	; 0x82
 8002e18:	4249      	negs	r1, r1
 8002e1a:	81e9      	strh	r1, [r5, #14]
 8002e1c:	00a4      	lsls	r4, r4, #2
 8002e1e:	4669      	mov	r1, sp
 8002e20:	81ac      	strh	r4, [r5, #12]
 8002e22:	f000 f875 	bl	8002f10 <_svfiprintf_r>
 8002e26:	2300      	movs	r3, #0
 8002e28:	9a00      	ldr	r2, [sp, #0]
 8002e2a:	7013      	strb	r3, [r2, #0]
 8002e2c:	b01b      	add	sp, #108	; 0x6c
 8002e2e:	bd30      	pop	{r4, r5, pc}
 8002e30:	7fffffff 	.word	0x7fffffff

08002e34 <vsiprintf>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	0013      	movs	r3, r2
 8002e38:	000a      	movs	r2, r1
 8002e3a:	0001      	movs	r1, r0
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <vsiprintf+0x14>)
 8002e3e:	6800      	ldr	r0, [r0, #0]
 8002e40:	f7ff ffe0 	bl	8002e04 <_vsiprintf_r>
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	20000004 	.word	0x20000004

08002e4c <__ssputs_r>:
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	688e      	ldr	r6, [r1, #8]
 8002e50:	b085      	sub	sp, #20
 8002e52:	0007      	movs	r7, r0
 8002e54:	000c      	movs	r4, r1
 8002e56:	9203      	str	r2, [sp, #12]
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	429e      	cmp	r6, r3
 8002e5c:	d839      	bhi.n	8002ed2 <__ssputs_r+0x86>
 8002e5e:	2390      	movs	r3, #144	; 0x90
 8002e60:	898a      	ldrh	r2, [r1, #12]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	421a      	tst	r2, r3
 8002e66:	d034      	beq.n	8002ed2 <__ssputs_r+0x86>
 8002e68:	2503      	movs	r5, #3
 8002e6a:	6909      	ldr	r1, [r1, #16]
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	1a5b      	subs	r3, r3, r1
 8002e70:	9302      	str	r3, [sp, #8]
 8002e72:	6963      	ldr	r3, [r4, #20]
 8002e74:	9802      	ldr	r0, [sp, #8]
 8002e76:	435d      	muls	r5, r3
 8002e78:	0feb      	lsrs	r3, r5, #31
 8002e7a:	195d      	adds	r5, r3, r5
 8002e7c:	9b01      	ldr	r3, [sp, #4]
 8002e7e:	106d      	asrs	r5, r5, #1
 8002e80:	3301      	adds	r3, #1
 8002e82:	181b      	adds	r3, r3, r0
 8002e84:	42ab      	cmp	r3, r5
 8002e86:	d900      	bls.n	8002e8a <__ssputs_r+0x3e>
 8002e88:	001d      	movs	r5, r3
 8002e8a:	0553      	lsls	r3, r2, #21
 8002e8c:	d532      	bpl.n	8002ef4 <__ssputs_r+0xa8>
 8002e8e:	0029      	movs	r1, r5
 8002e90:	0038      	movs	r0, r7
 8002e92:	f000 fb31 	bl	80034f8 <_malloc_r>
 8002e96:	1e06      	subs	r6, r0, #0
 8002e98:	d109      	bne.n	8002eae <__ssputs_r+0x62>
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	2340      	movs	r3, #64	; 0x40
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	89a2      	ldrh	r2, [r4, #12]
 8002ea4:	4240      	negs	r0, r0
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	81a3      	strh	r3, [r4, #12]
 8002eaa:	b005      	add	sp, #20
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eae:	9a02      	ldr	r2, [sp, #8]
 8002eb0:	6921      	ldr	r1, [r4, #16]
 8002eb2:	f7ff ff95 	bl	8002de0 <memcpy>
 8002eb6:	89a3      	ldrh	r3, [r4, #12]
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <__ssputs_r+0xc0>)
 8002eba:	401a      	ands	r2, r3
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	9b02      	ldr	r3, [sp, #8]
 8002ec4:	6126      	str	r6, [r4, #16]
 8002ec6:	18f6      	adds	r6, r6, r3
 8002ec8:	6026      	str	r6, [r4, #0]
 8002eca:	6165      	str	r5, [r4, #20]
 8002ecc:	9e01      	ldr	r6, [sp, #4]
 8002ece:	1aed      	subs	r5, r5, r3
 8002ed0:	60a5      	str	r5, [r4, #8]
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	42b3      	cmp	r3, r6
 8002ed6:	d200      	bcs.n	8002eda <__ssputs_r+0x8e>
 8002ed8:	001e      	movs	r6, r3
 8002eda:	0032      	movs	r2, r6
 8002edc:	9903      	ldr	r1, [sp, #12]
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	f000 faad 	bl	800343e <memmove>
 8002ee4:	68a3      	ldr	r3, [r4, #8]
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	1b9b      	subs	r3, r3, r6
 8002eea:	60a3      	str	r3, [r4, #8]
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	199e      	adds	r6, r3, r6
 8002ef0:	6026      	str	r6, [r4, #0]
 8002ef2:	e7da      	b.n	8002eaa <__ssputs_r+0x5e>
 8002ef4:	002a      	movs	r2, r5
 8002ef6:	0038      	movs	r0, r7
 8002ef8:	f000 fb5c 	bl	80035b4 <_realloc_r>
 8002efc:	1e06      	subs	r6, r0, #0
 8002efe:	d1e0      	bne.n	8002ec2 <__ssputs_r+0x76>
 8002f00:	6921      	ldr	r1, [r4, #16]
 8002f02:	0038      	movs	r0, r7
 8002f04:	f000 faae 	bl	8003464 <_free_r>
 8002f08:	e7c7      	b.n	8002e9a <__ssputs_r+0x4e>
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	fffffb7f 	.word	0xfffffb7f

08002f10 <_svfiprintf_r>:
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	b09f      	sub	sp, #124	; 0x7c
 8002f14:	9002      	str	r0, [sp, #8]
 8002f16:	9305      	str	r3, [sp, #20]
 8002f18:	898b      	ldrh	r3, [r1, #12]
 8002f1a:	000f      	movs	r7, r1
 8002f1c:	0016      	movs	r6, r2
 8002f1e:	061b      	lsls	r3, r3, #24
 8002f20:	d511      	bpl.n	8002f46 <_svfiprintf_r+0x36>
 8002f22:	690b      	ldr	r3, [r1, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10e      	bne.n	8002f46 <_svfiprintf_r+0x36>
 8002f28:	2140      	movs	r1, #64	; 0x40
 8002f2a:	f000 fae5 	bl	80034f8 <_malloc_r>
 8002f2e:	6038      	str	r0, [r7, #0]
 8002f30:	6138      	str	r0, [r7, #16]
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d105      	bne.n	8002f42 <_svfiprintf_r+0x32>
 8002f36:	230c      	movs	r3, #12
 8002f38:	9a02      	ldr	r2, [sp, #8]
 8002f3a:	3801      	subs	r0, #1
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	b01f      	add	sp, #124	; 0x7c
 8002f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f42:	2340      	movs	r3, #64	; 0x40
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	2300      	movs	r3, #0
 8002f48:	ad06      	add	r5, sp, #24
 8002f4a:	616b      	str	r3, [r5, #20]
 8002f4c:	3320      	adds	r3, #32
 8002f4e:	766b      	strb	r3, [r5, #25]
 8002f50:	3310      	adds	r3, #16
 8002f52:	76ab      	strb	r3, [r5, #26]
 8002f54:	0034      	movs	r4, r6
 8002f56:	7823      	ldrb	r3, [r4, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d147      	bne.n	8002fec <_svfiprintf_r+0xdc>
 8002f5c:	1ba3      	subs	r3, r4, r6
 8002f5e:	9304      	str	r3, [sp, #16]
 8002f60:	d00d      	beq.n	8002f7e <_svfiprintf_r+0x6e>
 8002f62:	1ba3      	subs	r3, r4, r6
 8002f64:	0032      	movs	r2, r6
 8002f66:	0039      	movs	r1, r7
 8002f68:	9802      	ldr	r0, [sp, #8]
 8002f6a:	f7ff ff6f 	bl	8002e4c <__ssputs_r>
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	d100      	bne.n	8002f74 <_svfiprintf_r+0x64>
 8002f72:	e0b5      	b.n	80030e0 <_svfiprintf_r+0x1d0>
 8002f74:	696a      	ldr	r2, [r5, #20]
 8002f76:	9b04      	ldr	r3, [sp, #16]
 8002f78:	4694      	mov	ip, r2
 8002f7a:	4463      	add	r3, ip
 8002f7c:	616b      	str	r3, [r5, #20]
 8002f7e:	7823      	ldrb	r3, [r4, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d100      	bne.n	8002f86 <_svfiprintf_r+0x76>
 8002f84:	e0ac      	b.n	80030e0 <_svfiprintf_r+0x1d0>
 8002f86:	2201      	movs	r2, #1
 8002f88:	2300      	movs	r3, #0
 8002f8a:	4252      	negs	r2, r2
 8002f8c:	606a      	str	r2, [r5, #4]
 8002f8e:	a902      	add	r1, sp, #8
 8002f90:	3254      	adds	r2, #84	; 0x54
 8002f92:	1852      	adds	r2, r2, r1
 8002f94:	3401      	adds	r4, #1
 8002f96:	602b      	str	r3, [r5, #0]
 8002f98:	60eb      	str	r3, [r5, #12]
 8002f9a:	60ab      	str	r3, [r5, #8]
 8002f9c:	7013      	strb	r3, [r2, #0]
 8002f9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002fa0:	4e58      	ldr	r6, [pc, #352]	; (8003104 <_svfiprintf_r+0x1f4>)
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	7821      	ldrb	r1, [r4, #0]
 8002fa6:	0030      	movs	r0, r6
 8002fa8:	f000 fa3e 	bl	8003428 <memchr>
 8002fac:	1c62      	adds	r2, r4, #1
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d120      	bne.n	8002ff4 <_svfiprintf_r+0xe4>
 8002fb2:	6829      	ldr	r1, [r5, #0]
 8002fb4:	06cb      	lsls	r3, r1, #27
 8002fb6:	d504      	bpl.n	8002fc2 <_svfiprintf_r+0xb2>
 8002fb8:	2353      	movs	r3, #83	; 0x53
 8002fba:	ae02      	add	r6, sp, #8
 8002fbc:	3020      	adds	r0, #32
 8002fbe:	199b      	adds	r3, r3, r6
 8002fc0:	7018      	strb	r0, [r3, #0]
 8002fc2:	070b      	lsls	r3, r1, #28
 8002fc4:	d504      	bpl.n	8002fd0 <_svfiprintf_r+0xc0>
 8002fc6:	2353      	movs	r3, #83	; 0x53
 8002fc8:	202b      	movs	r0, #43	; 0x2b
 8002fca:	ae02      	add	r6, sp, #8
 8002fcc:	199b      	adds	r3, r3, r6
 8002fce:	7018      	strb	r0, [r3, #0]
 8002fd0:	7823      	ldrb	r3, [r4, #0]
 8002fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd4:	d016      	beq.n	8003004 <_svfiprintf_r+0xf4>
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	210a      	movs	r1, #10
 8002fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fdc:	7822      	ldrb	r2, [r4, #0]
 8002fde:	3a30      	subs	r2, #48	; 0x30
 8002fe0:	2a09      	cmp	r2, #9
 8002fe2:	d955      	bls.n	8003090 <_svfiprintf_r+0x180>
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	d015      	beq.n	8003014 <_svfiprintf_r+0x104>
 8002fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8002fea:	e013      	b.n	8003014 <_svfiprintf_r+0x104>
 8002fec:	2b25      	cmp	r3, #37	; 0x25
 8002fee:	d0b5      	beq.n	8002f5c <_svfiprintf_r+0x4c>
 8002ff0:	3401      	adds	r4, #1
 8002ff2:	e7b0      	b.n	8002f56 <_svfiprintf_r+0x46>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	1b80      	subs	r0, r0, r6
 8002ff8:	4083      	lsls	r3, r0
 8002ffa:	6829      	ldr	r1, [r5, #0]
 8002ffc:	0014      	movs	r4, r2
 8002ffe:	430b      	orrs	r3, r1
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	e7cd      	b.n	8002fa0 <_svfiprintf_r+0x90>
 8003004:	9b05      	ldr	r3, [sp, #20]
 8003006:	1d18      	adds	r0, r3, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	9005      	str	r0, [sp, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db39      	blt.n	8003084 <_svfiprintf_r+0x174>
 8003010:	9309      	str	r3, [sp, #36]	; 0x24
 8003012:	0014      	movs	r4, r2
 8003014:	7823      	ldrb	r3, [r4, #0]
 8003016:	2b2e      	cmp	r3, #46	; 0x2e
 8003018:	d10b      	bne.n	8003032 <_svfiprintf_r+0x122>
 800301a:	7863      	ldrb	r3, [r4, #1]
 800301c:	1c62      	adds	r2, r4, #1
 800301e:	2b2a      	cmp	r3, #42	; 0x2a
 8003020:	d13e      	bne.n	80030a0 <_svfiprintf_r+0x190>
 8003022:	9b05      	ldr	r3, [sp, #20]
 8003024:	3402      	adds	r4, #2
 8003026:	1d1a      	adds	r2, r3, #4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	9205      	str	r2, [sp, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db34      	blt.n	800309a <_svfiprintf_r+0x18a>
 8003030:	9307      	str	r3, [sp, #28]
 8003032:	4e35      	ldr	r6, [pc, #212]	; (8003108 <_svfiprintf_r+0x1f8>)
 8003034:	7821      	ldrb	r1, [r4, #0]
 8003036:	2203      	movs	r2, #3
 8003038:	0030      	movs	r0, r6
 800303a:	f000 f9f5 	bl	8003428 <memchr>
 800303e:	2800      	cmp	r0, #0
 8003040:	d006      	beq.n	8003050 <_svfiprintf_r+0x140>
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	1b80      	subs	r0, r0, r6
 8003046:	4083      	lsls	r3, r0
 8003048:	682a      	ldr	r2, [r5, #0]
 800304a:	3401      	adds	r4, #1
 800304c:	4313      	orrs	r3, r2
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	7821      	ldrb	r1, [r4, #0]
 8003052:	2206      	movs	r2, #6
 8003054:	482d      	ldr	r0, [pc, #180]	; (800310c <_svfiprintf_r+0x1fc>)
 8003056:	1c66      	adds	r6, r4, #1
 8003058:	7629      	strb	r1, [r5, #24]
 800305a:	f000 f9e5 	bl	8003428 <memchr>
 800305e:	2800      	cmp	r0, #0
 8003060:	d046      	beq.n	80030f0 <_svfiprintf_r+0x1e0>
 8003062:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <_svfiprintf_r+0x200>)
 8003064:	2b00      	cmp	r3, #0
 8003066:	d12f      	bne.n	80030c8 <_svfiprintf_r+0x1b8>
 8003068:	6829      	ldr	r1, [r5, #0]
 800306a:	9b05      	ldr	r3, [sp, #20]
 800306c:	2207      	movs	r2, #7
 800306e:	05c9      	lsls	r1, r1, #23
 8003070:	d528      	bpl.n	80030c4 <_svfiprintf_r+0x1b4>
 8003072:	189b      	adds	r3, r3, r2
 8003074:	4393      	bics	r3, r2
 8003076:	3308      	adds	r3, #8
 8003078:	9305      	str	r3, [sp, #20]
 800307a:	696b      	ldr	r3, [r5, #20]
 800307c:	9a03      	ldr	r2, [sp, #12]
 800307e:	189b      	adds	r3, r3, r2
 8003080:	616b      	str	r3, [r5, #20]
 8003082:	e767      	b.n	8002f54 <_svfiprintf_r+0x44>
 8003084:	425b      	negs	r3, r3
 8003086:	60eb      	str	r3, [r5, #12]
 8003088:	2302      	movs	r3, #2
 800308a:	430b      	orrs	r3, r1
 800308c:	602b      	str	r3, [r5, #0]
 800308e:	e7c0      	b.n	8003012 <_svfiprintf_r+0x102>
 8003090:	434b      	muls	r3, r1
 8003092:	3401      	adds	r4, #1
 8003094:	189b      	adds	r3, r3, r2
 8003096:	2001      	movs	r0, #1
 8003098:	e7a0      	b.n	8002fdc <_svfiprintf_r+0xcc>
 800309a:	2301      	movs	r3, #1
 800309c:	425b      	negs	r3, r3
 800309e:	e7c7      	b.n	8003030 <_svfiprintf_r+0x120>
 80030a0:	2300      	movs	r3, #0
 80030a2:	0014      	movs	r4, r2
 80030a4:	200a      	movs	r0, #10
 80030a6:	001a      	movs	r2, r3
 80030a8:	606b      	str	r3, [r5, #4]
 80030aa:	7821      	ldrb	r1, [r4, #0]
 80030ac:	3930      	subs	r1, #48	; 0x30
 80030ae:	2909      	cmp	r1, #9
 80030b0:	d903      	bls.n	80030ba <_svfiprintf_r+0x1aa>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0bd      	beq.n	8003032 <_svfiprintf_r+0x122>
 80030b6:	9207      	str	r2, [sp, #28]
 80030b8:	e7bb      	b.n	8003032 <_svfiprintf_r+0x122>
 80030ba:	4342      	muls	r2, r0
 80030bc:	3401      	adds	r4, #1
 80030be:	1852      	adds	r2, r2, r1
 80030c0:	2301      	movs	r3, #1
 80030c2:	e7f2      	b.n	80030aa <_svfiprintf_r+0x19a>
 80030c4:	3307      	adds	r3, #7
 80030c6:	e7d5      	b.n	8003074 <_svfiprintf_r+0x164>
 80030c8:	ab05      	add	r3, sp, #20
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	003a      	movs	r2, r7
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <_svfiprintf_r+0x204>)
 80030d0:	0029      	movs	r1, r5
 80030d2:	9802      	ldr	r0, [sp, #8]
 80030d4:	e000      	b.n	80030d8 <_svfiprintf_r+0x1c8>
 80030d6:	bf00      	nop
 80030d8:	9003      	str	r0, [sp, #12]
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	3301      	adds	r3, #1
 80030de:	d1cc      	bne.n	800307a <_svfiprintf_r+0x16a>
 80030e0:	89bb      	ldrh	r3, [r7, #12]
 80030e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80030e4:	065b      	lsls	r3, r3, #25
 80030e6:	d400      	bmi.n	80030ea <_svfiprintf_r+0x1da>
 80030e8:	e729      	b.n	8002f3e <_svfiprintf_r+0x2e>
 80030ea:	2001      	movs	r0, #1
 80030ec:	4240      	negs	r0, r0
 80030ee:	e726      	b.n	8002f3e <_svfiprintf_r+0x2e>
 80030f0:	ab05      	add	r3, sp, #20
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	003a      	movs	r2, r7
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <_svfiprintf_r+0x204>)
 80030f8:	0029      	movs	r1, r5
 80030fa:	9802      	ldr	r0, [sp, #8]
 80030fc:	f000 f87a 	bl	80031f4 <_printf_i>
 8003100:	e7ea      	b.n	80030d8 <_svfiprintf_r+0x1c8>
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	080036c8 	.word	0x080036c8
 8003108:	080036ce 	.word	0x080036ce
 800310c:	080036d2 	.word	0x080036d2
 8003110:	00000000 	.word	0x00000000
 8003114:	08002e4d 	.word	0x08002e4d

08003118 <_printf_common>:
 8003118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800311a:	0015      	movs	r5, r2
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	688a      	ldr	r2, [r1, #8]
 8003120:	690b      	ldr	r3, [r1, #16]
 8003122:	9000      	str	r0, [sp, #0]
 8003124:	000c      	movs	r4, r1
 8003126:	4293      	cmp	r3, r2
 8003128:	da00      	bge.n	800312c <_printf_common+0x14>
 800312a:	0013      	movs	r3, r2
 800312c:	0022      	movs	r2, r4
 800312e:	602b      	str	r3, [r5, #0]
 8003130:	3243      	adds	r2, #67	; 0x43
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	2a00      	cmp	r2, #0
 8003136:	d001      	beq.n	800313c <_printf_common+0x24>
 8003138:	3301      	adds	r3, #1
 800313a:	602b      	str	r3, [r5, #0]
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	069b      	lsls	r3, r3, #26
 8003140:	d502      	bpl.n	8003148 <_printf_common+0x30>
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	3302      	adds	r3, #2
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	2706      	movs	r7, #6
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	401f      	ands	r7, r3
 800314e:	d027      	beq.n	80031a0 <_printf_common+0x88>
 8003150:	0023      	movs	r3, r4
 8003152:	3343      	adds	r3, #67	; 0x43
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	4193      	sbcs	r3, r2
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	0692      	lsls	r2, r2, #26
 800315e:	d430      	bmi.n	80031c2 <_printf_common+0xaa>
 8003160:	0022      	movs	r2, r4
 8003162:	9901      	ldr	r1, [sp, #4]
 8003164:	3243      	adds	r2, #67	; 0x43
 8003166:	9800      	ldr	r0, [sp, #0]
 8003168:	9e08      	ldr	r6, [sp, #32]
 800316a:	47b0      	blx	r6
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d025      	beq.n	80031bc <_printf_common+0xa4>
 8003170:	2306      	movs	r3, #6
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	682a      	ldr	r2, [r5, #0]
 8003176:	68e1      	ldr	r1, [r4, #12]
 8003178:	4003      	ands	r3, r0
 800317a:	2500      	movs	r5, #0
 800317c:	2b04      	cmp	r3, #4
 800317e:	d103      	bne.n	8003188 <_printf_common+0x70>
 8003180:	1a8d      	subs	r5, r1, r2
 8003182:	43eb      	mvns	r3, r5
 8003184:	17db      	asrs	r3, r3, #31
 8003186:	401d      	ands	r5, r3
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	6922      	ldr	r2, [r4, #16]
 800318c:	4293      	cmp	r3, r2
 800318e:	dd01      	ble.n	8003194 <_printf_common+0x7c>
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	18ed      	adds	r5, r5, r3
 8003194:	2700      	movs	r7, #0
 8003196:	42bd      	cmp	r5, r7
 8003198:	d120      	bne.n	80031dc <_printf_common+0xc4>
 800319a:	2000      	movs	r0, #0
 800319c:	e010      	b.n	80031c0 <_printf_common+0xa8>
 800319e:	3701      	adds	r7, #1
 80031a0:	68e3      	ldr	r3, [r4, #12]
 80031a2:	682a      	ldr	r2, [r5, #0]
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	429f      	cmp	r7, r3
 80031a8:	dad2      	bge.n	8003150 <_printf_common+0x38>
 80031aa:	0022      	movs	r2, r4
 80031ac:	2301      	movs	r3, #1
 80031ae:	3219      	adds	r2, #25
 80031b0:	9901      	ldr	r1, [sp, #4]
 80031b2:	9800      	ldr	r0, [sp, #0]
 80031b4:	9e08      	ldr	r6, [sp, #32]
 80031b6:	47b0      	blx	r6
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	d1f0      	bne.n	800319e <_printf_common+0x86>
 80031bc:	2001      	movs	r0, #1
 80031be:	4240      	negs	r0, r0
 80031c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031c2:	2030      	movs	r0, #48	; 0x30
 80031c4:	18e1      	adds	r1, r4, r3
 80031c6:	3143      	adds	r1, #67	; 0x43
 80031c8:	7008      	strb	r0, [r1, #0]
 80031ca:	0021      	movs	r1, r4
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	3145      	adds	r1, #69	; 0x45
 80031d0:	7809      	ldrb	r1, [r1, #0]
 80031d2:	18a2      	adds	r2, r4, r2
 80031d4:	3243      	adds	r2, #67	; 0x43
 80031d6:	3302      	adds	r3, #2
 80031d8:	7011      	strb	r1, [r2, #0]
 80031da:	e7c1      	b.n	8003160 <_printf_common+0x48>
 80031dc:	0022      	movs	r2, r4
 80031de:	2301      	movs	r3, #1
 80031e0:	321a      	adds	r2, #26
 80031e2:	9901      	ldr	r1, [sp, #4]
 80031e4:	9800      	ldr	r0, [sp, #0]
 80031e6:	9e08      	ldr	r6, [sp, #32]
 80031e8:	47b0      	blx	r6
 80031ea:	1c43      	adds	r3, r0, #1
 80031ec:	d0e6      	beq.n	80031bc <_printf_common+0xa4>
 80031ee:	3701      	adds	r7, #1
 80031f0:	e7d1      	b.n	8003196 <_printf_common+0x7e>
	...

080031f4 <_printf_i>:
 80031f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f6:	b08b      	sub	sp, #44	; 0x2c
 80031f8:	9206      	str	r2, [sp, #24]
 80031fa:	000a      	movs	r2, r1
 80031fc:	3243      	adds	r2, #67	; 0x43
 80031fe:	9307      	str	r3, [sp, #28]
 8003200:	9005      	str	r0, [sp, #20]
 8003202:	9204      	str	r2, [sp, #16]
 8003204:	7e0a      	ldrb	r2, [r1, #24]
 8003206:	000c      	movs	r4, r1
 8003208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800320a:	2a6e      	cmp	r2, #110	; 0x6e
 800320c:	d100      	bne.n	8003210 <_printf_i+0x1c>
 800320e:	e08f      	b.n	8003330 <_printf_i+0x13c>
 8003210:	d817      	bhi.n	8003242 <_printf_i+0x4e>
 8003212:	2a63      	cmp	r2, #99	; 0x63
 8003214:	d02c      	beq.n	8003270 <_printf_i+0x7c>
 8003216:	d808      	bhi.n	800322a <_printf_i+0x36>
 8003218:	2a00      	cmp	r2, #0
 800321a:	d100      	bne.n	800321e <_printf_i+0x2a>
 800321c:	e099      	b.n	8003352 <_printf_i+0x15e>
 800321e:	2a58      	cmp	r2, #88	; 0x58
 8003220:	d054      	beq.n	80032cc <_printf_i+0xd8>
 8003222:	0026      	movs	r6, r4
 8003224:	3642      	adds	r6, #66	; 0x42
 8003226:	7032      	strb	r2, [r6, #0]
 8003228:	e029      	b.n	800327e <_printf_i+0x8a>
 800322a:	2a64      	cmp	r2, #100	; 0x64
 800322c:	d001      	beq.n	8003232 <_printf_i+0x3e>
 800322e:	2a69      	cmp	r2, #105	; 0x69
 8003230:	d1f7      	bne.n	8003222 <_printf_i+0x2e>
 8003232:	6821      	ldr	r1, [r4, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	0608      	lsls	r0, r1, #24
 8003238:	d523      	bpl.n	8003282 <_printf_i+0x8e>
 800323a:	1d11      	adds	r1, r2, #4
 800323c:	6019      	str	r1, [r3, #0]
 800323e:	6815      	ldr	r5, [r2, #0]
 8003240:	e025      	b.n	800328e <_printf_i+0x9a>
 8003242:	2a73      	cmp	r2, #115	; 0x73
 8003244:	d100      	bne.n	8003248 <_printf_i+0x54>
 8003246:	e088      	b.n	800335a <_printf_i+0x166>
 8003248:	d808      	bhi.n	800325c <_printf_i+0x68>
 800324a:	2a6f      	cmp	r2, #111	; 0x6f
 800324c:	d029      	beq.n	80032a2 <_printf_i+0xae>
 800324e:	2a70      	cmp	r2, #112	; 0x70
 8003250:	d1e7      	bne.n	8003222 <_printf_i+0x2e>
 8003252:	2220      	movs	r2, #32
 8003254:	6809      	ldr	r1, [r1, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	6022      	str	r2, [r4, #0]
 800325a:	e003      	b.n	8003264 <_printf_i+0x70>
 800325c:	2a75      	cmp	r2, #117	; 0x75
 800325e:	d020      	beq.n	80032a2 <_printf_i+0xae>
 8003260:	2a78      	cmp	r2, #120	; 0x78
 8003262:	d1de      	bne.n	8003222 <_printf_i+0x2e>
 8003264:	0022      	movs	r2, r4
 8003266:	2178      	movs	r1, #120	; 0x78
 8003268:	3245      	adds	r2, #69	; 0x45
 800326a:	7011      	strb	r1, [r2, #0]
 800326c:	4a6c      	ldr	r2, [pc, #432]	; (8003420 <_printf_i+0x22c>)
 800326e:	e030      	b.n	80032d2 <_printf_i+0xde>
 8003270:	000e      	movs	r6, r1
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	3642      	adds	r6, #66	; 0x42
 8003276:	1d11      	adds	r1, r2, #4
 8003278:	6019      	str	r1, [r3, #0]
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	7033      	strb	r3, [r6, #0]
 800327e:	2301      	movs	r3, #1
 8003280:	e079      	b.n	8003376 <_printf_i+0x182>
 8003282:	0649      	lsls	r1, r1, #25
 8003284:	d5d9      	bpl.n	800323a <_printf_i+0x46>
 8003286:	1d11      	adds	r1, r2, #4
 8003288:	6019      	str	r1, [r3, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	5ed5      	ldrsh	r5, [r2, r3]
 800328e:	2d00      	cmp	r5, #0
 8003290:	da03      	bge.n	800329a <_printf_i+0xa6>
 8003292:	232d      	movs	r3, #45	; 0x2d
 8003294:	9a04      	ldr	r2, [sp, #16]
 8003296:	426d      	negs	r5, r5
 8003298:	7013      	strb	r3, [r2, #0]
 800329a:	4b62      	ldr	r3, [pc, #392]	; (8003424 <_printf_i+0x230>)
 800329c:	270a      	movs	r7, #10
 800329e:	9303      	str	r3, [sp, #12]
 80032a0:	e02f      	b.n	8003302 <_printf_i+0x10e>
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	0605      	lsls	r5, r0, #24
 80032a8:	d503      	bpl.n	80032b2 <_printf_i+0xbe>
 80032aa:	1d08      	adds	r0, r1, #4
 80032ac:	6018      	str	r0, [r3, #0]
 80032ae:	680d      	ldr	r5, [r1, #0]
 80032b0:	e005      	b.n	80032be <_printf_i+0xca>
 80032b2:	0640      	lsls	r0, r0, #25
 80032b4:	d5f9      	bpl.n	80032aa <_printf_i+0xb6>
 80032b6:	680d      	ldr	r5, [r1, #0]
 80032b8:	1d08      	adds	r0, r1, #4
 80032ba:	6018      	str	r0, [r3, #0]
 80032bc:	b2ad      	uxth	r5, r5
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <_printf_i+0x230>)
 80032c0:	2708      	movs	r7, #8
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	2a6f      	cmp	r2, #111	; 0x6f
 80032c6:	d018      	beq.n	80032fa <_printf_i+0x106>
 80032c8:	270a      	movs	r7, #10
 80032ca:	e016      	b.n	80032fa <_printf_i+0x106>
 80032cc:	3145      	adds	r1, #69	; 0x45
 80032ce:	700a      	strb	r2, [r1, #0]
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <_printf_i+0x230>)
 80032d2:	9203      	str	r2, [sp, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	6821      	ldr	r1, [r4, #0]
 80032d8:	1d10      	adds	r0, r2, #4
 80032da:	6018      	str	r0, [r3, #0]
 80032dc:	6815      	ldr	r5, [r2, #0]
 80032de:	0608      	lsls	r0, r1, #24
 80032e0:	d522      	bpl.n	8003328 <_printf_i+0x134>
 80032e2:	07cb      	lsls	r3, r1, #31
 80032e4:	d502      	bpl.n	80032ec <_printf_i+0xf8>
 80032e6:	2320      	movs	r3, #32
 80032e8:	4319      	orrs	r1, r3
 80032ea:	6021      	str	r1, [r4, #0]
 80032ec:	2710      	movs	r7, #16
 80032ee:	2d00      	cmp	r5, #0
 80032f0:	d103      	bne.n	80032fa <_printf_i+0x106>
 80032f2:	2320      	movs	r3, #32
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	439a      	bics	r2, r3
 80032f8:	6022      	str	r2, [r4, #0]
 80032fa:	0023      	movs	r3, r4
 80032fc:	2200      	movs	r2, #0
 80032fe:	3343      	adds	r3, #67	; 0x43
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db5c      	blt.n	80033c4 <_printf_i+0x1d0>
 800330a:	2204      	movs	r2, #4
 800330c:	6821      	ldr	r1, [r4, #0]
 800330e:	4391      	bics	r1, r2
 8003310:	6021      	str	r1, [r4, #0]
 8003312:	2d00      	cmp	r5, #0
 8003314:	d158      	bne.n	80033c8 <_printf_i+0x1d4>
 8003316:	9e04      	ldr	r6, [sp, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d064      	beq.n	80033e6 <_printf_i+0x1f2>
 800331c:	0026      	movs	r6, r4
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	3642      	adds	r6, #66	; 0x42
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	7033      	strb	r3, [r6, #0]
 8003326:	e05e      	b.n	80033e6 <_printf_i+0x1f2>
 8003328:	0648      	lsls	r0, r1, #25
 800332a:	d5da      	bpl.n	80032e2 <_printf_i+0xee>
 800332c:	b2ad      	uxth	r5, r5
 800332e:	e7d8      	b.n	80032e2 <_printf_i+0xee>
 8003330:	6809      	ldr	r1, [r1, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	0608      	lsls	r0, r1, #24
 8003336:	d505      	bpl.n	8003344 <_printf_i+0x150>
 8003338:	1d11      	adds	r1, r2, #4
 800333a:	6019      	str	r1, [r3, #0]
 800333c:	6813      	ldr	r3, [r2, #0]
 800333e:	6962      	ldr	r2, [r4, #20]
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e006      	b.n	8003352 <_printf_i+0x15e>
 8003344:	0649      	lsls	r1, r1, #25
 8003346:	d5f7      	bpl.n	8003338 <_printf_i+0x144>
 8003348:	1d11      	adds	r1, r2, #4
 800334a:	6019      	str	r1, [r3, #0]
 800334c:	6813      	ldr	r3, [r2, #0]
 800334e:	8aa2      	ldrh	r2, [r4, #20]
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	9e04      	ldr	r6, [sp, #16]
 8003356:	6123      	str	r3, [r4, #16]
 8003358:	e054      	b.n	8003404 <_printf_i+0x210>
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	1d11      	adds	r1, r2, #4
 800335e:	6019      	str	r1, [r3, #0]
 8003360:	6816      	ldr	r6, [r2, #0]
 8003362:	2100      	movs	r1, #0
 8003364:	6862      	ldr	r2, [r4, #4]
 8003366:	0030      	movs	r0, r6
 8003368:	f000 f85e 	bl	8003428 <memchr>
 800336c:	2800      	cmp	r0, #0
 800336e:	d001      	beq.n	8003374 <_printf_i+0x180>
 8003370:	1b80      	subs	r0, r0, r6
 8003372:	6060      	str	r0, [r4, #4]
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	6123      	str	r3, [r4, #16]
 8003378:	2300      	movs	r3, #0
 800337a:	9a04      	ldr	r2, [sp, #16]
 800337c:	7013      	strb	r3, [r2, #0]
 800337e:	e041      	b.n	8003404 <_printf_i+0x210>
 8003380:	6923      	ldr	r3, [r4, #16]
 8003382:	0032      	movs	r2, r6
 8003384:	9906      	ldr	r1, [sp, #24]
 8003386:	9805      	ldr	r0, [sp, #20]
 8003388:	9d07      	ldr	r5, [sp, #28]
 800338a:	47a8      	blx	r5
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d043      	beq.n	8003418 <_printf_i+0x224>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	2500      	movs	r5, #0
 8003394:	079b      	lsls	r3, r3, #30
 8003396:	d40f      	bmi.n	80033b8 <_printf_i+0x1c4>
 8003398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339a:	68e0      	ldr	r0, [r4, #12]
 800339c:	4298      	cmp	r0, r3
 800339e:	da3d      	bge.n	800341c <_printf_i+0x228>
 80033a0:	0018      	movs	r0, r3
 80033a2:	e03b      	b.n	800341c <_printf_i+0x228>
 80033a4:	0022      	movs	r2, r4
 80033a6:	2301      	movs	r3, #1
 80033a8:	3219      	adds	r2, #25
 80033aa:	9906      	ldr	r1, [sp, #24]
 80033ac:	9805      	ldr	r0, [sp, #20]
 80033ae:	9e07      	ldr	r6, [sp, #28]
 80033b0:	47b0      	blx	r6
 80033b2:	1c43      	adds	r3, r0, #1
 80033b4:	d030      	beq.n	8003418 <_printf_i+0x224>
 80033b6:	3501      	adds	r5, #1
 80033b8:	68e3      	ldr	r3, [r4, #12]
 80033ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	429d      	cmp	r5, r3
 80033c0:	dbf0      	blt.n	80033a4 <_printf_i+0x1b0>
 80033c2:	e7e9      	b.n	8003398 <_printf_i+0x1a4>
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	d0a9      	beq.n	800331c <_printf_i+0x128>
 80033c8:	9e04      	ldr	r6, [sp, #16]
 80033ca:	0028      	movs	r0, r5
 80033cc:	0039      	movs	r1, r7
 80033ce:	f7fc ff3d 	bl	800024c <__aeabi_uidivmod>
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	3e01      	subs	r6, #1
 80033d6:	5c5b      	ldrb	r3, [r3, r1]
 80033d8:	0028      	movs	r0, r5
 80033da:	7033      	strb	r3, [r6, #0]
 80033dc:	0039      	movs	r1, r7
 80033de:	f7fc feaf 	bl	8000140 <__udivsi3>
 80033e2:	1e05      	subs	r5, r0, #0
 80033e4:	d1f1      	bne.n	80033ca <_printf_i+0x1d6>
 80033e6:	2f08      	cmp	r7, #8
 80033e8:	d109      	bne.n	80033fe <_printf_i+0x20a>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	07db      	lsls	r3, r3, #31
 80033ee:	d506      	bpl.n	80033fe <_printf_i+0x20a>
 80033f0:	6863      	ldr	r3, [r4, #4]
 80033f2:	6922      	ldr	r2, [r4, #16]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	dc02      	bgt.n	80033fe <_printf_i+0x20a>
 80033f8:	2330      	movs	r3, #48	; 0x30
 80033fa:	3e01      	subs	r6, #1
 80033fc:	7033      	strb	r3, [r6, #0]
 80033fe:	9b04      	ldr	r3, [sp, #16]
 8003400:	1b9b      	subs	r3, r3, r6
 8003402:	6123      	str	r3, [r4, #16]
 8003404:	9b07      	ldr	r3, [sp, #28]
 8003406:	aa09      	add	r2, sp, #36	; 0x24
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	0021      	movs	r1, r4
 800340c:	9b06      	ldr	r3, [sp, #24]
 800340e:	9805      	ldr	r0, [sp, #20]
 8003410:	f7ff fe82 	bl	8003118 <_printf_common>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d1b3      	bne.n	8003380 <_printf_i+0x18c>
 8003418:	2001      	movs	r0, #1
 800341a:	4240      	negs	r0, r0
 800341c:	b00b      	add	sp, #44	; 0x2c
 800341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003420:	080036ea 	.word	0x080036ea
 8003424:	080036d9 	.word	0x080036d9

08003428 <memchr>:
 8003428:	b2c9      	uxtb	r1, r1
 800342a:	1882      	adds	r2, r0, r2
 800342c:	4290      	cmp	r0, r2
 800342e:	d101      	bne.n	8003434 <memchr+0xc>
 8003430:	2000      	movs	r0, #0
 8003432:	4770      	bx	lr
 8003434:	7803      	ldrb	r3, [r0, #0]
 8003436:	428b      	cmp	r3, r1
 8003438:	d0fb      	beq.n	8003432 <memchr+0xa>
 800343a:	3001      	adds	r0, #1
 800343c:	e7f6      	b.n	800342c <memchr+0x4>

0800343e <memmove>:
 800343e:	b510      	push	{r4, lr}
 8003440:	4288      	cmp	r0, r1
 8003442:	d902      	bls.n	800344a <memmove+0xc>
 8003444:	188b      	adds	r3, r1, r2
 8003446:	4298      	cmp	r0, r3
 8003448:	d308      	bcc.n	800345c <memmove+0x1e>
 800344a:	2300      	movs	r3, #0
 800344c:	429a      	cmp	r2, r3
 800344e:	d007      	beq.n	8003460 <memmove+0x22>
 8003450:	5ccc      	ldrb	r4, [r1, r3]
 8003452:	54c4      	strb	r4, [r0, r3]
 8003454:	3301      	adds	r3, #1
 8003456:	e7f9      	b.n	800344c <memmove+0xe>
 8003458:	5c8b      	ldrb	r3, [r1, r2]
 800345a:	5483      	strb	r3, [r0, r2]
 800345c:	3a01      	subs	r2, #1
 800345e:	d2fb      	bcs.n	8003458 <memmove+0x1a>
 8003460:	bd10      	pop	{r4, pc}
	...

08003464 <_free_r>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0005      	movs	r5, r0
 8003468:	2900      	cmp	r1, #0
 800346a:	d010      	beq.n	800348e <_free_r+0x2a>
 800346c:	1f0c      	subs	r4, r1, #4
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da00      	bge.n	8003476 <_free_r+0x12>
 8003474:	18e4      	adds	r4, r4, r3
 8003476:	0028      	movs	r0, r5
 8003478:	f000 f8d4 	bl	8003624 <__malloc_lock>
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <_free_r+0x90>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <_free_r+0x2c>
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6014      	str	r4, [r2, #0]
 8003488:	0028      	movs	r0, r5
 800348a:	f000 f8cc 	bl	8003626 <__malloc_unlock>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	42a3      	cmp	r3, r4
 8003492:	d909      	bls.n	80034a8 <_free_r+0x44>
 8003494:	6821      	ldr	r1, [r4, #0]
 8003496:	1860      	adds	r0, r4, r1
 8003498:	4283      	cmp	r3, r0
 800349a:	d1f3      	bne.n	8003484 <_free_r+0x20>
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	1841      	adds	r1, r0, r1
 80034a2:	6021      	str	r1, [r4, #0]
 80034a4:	e7ee      	b.n	8003484 <_free_r+0x20>
 80034a6:	0013      	movs	r3, r2
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	d001      	beq.n	80034b2 <_free_r+0x4e>
 80034ae:	42a2      	cmp	r2, r4
 80034b0:	d9f9      	bls.n	80034a6 <_free_r+0x42>
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	1858      	adds	r0, r3, r1
 80034b6:	42a0      	cmp	r0, r4
 80034b8:	d10b      	bne.n	80034d2 <_free_r+0x6e>
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	1809      	adds	r1, r1, r0
 80034be:	1858      	adds	r0, r3, r1
 80034c0:	6019      	str	r1, [r3, #0]
 80034c2:	4282      	cmp	r2, r0
 80034c4:	d1e0      	bne.n	8003488 <_free_r+0x24>
 80034c6:	6810      	ldr	r0, [r2, #0]
 80034c8:	6852      	ldr	r2, [r2, #4]
 80034ca:	1841      	adds	r1, r0, r1
 80034cc:	6019      	str	r1, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	e7da      	b.n	8003488 <_free_r+0x24>
 80034d2:	42a0      	cmp	r0, r4
 80034d4:	d902      	bls.n	80034dc <_free_r+0x78>
 80034d6:	230c      	movs	r3, #12
 80034d8:	602b      	str	r3, [r5, #0]
 80034da:	e7d5      	b.n	8003488 <_free_r+0x24>
 80034dc:	6821      	ldr	r1, [r4, #0]
 80034de:	1860      	adds	r0, r4, r1
 80034e0:	4282      	cmp	r2, r0
 80034e2:	d103      	bne.n	80034ec <_free_r+0x88>
 80034e4:	6810      	ldr	r0, [r2, #0]
 80034e6:	6852      	ldr	r2, [r2, #4]
 80034e8:	1841      	adds	r1, r0, r1
 80034ea:	6021      	str	r1, [r4, #0]
 80034ec:	6062      	str	r2, [r4, #4]
 80034ee:	605c      	str	r4, [r3, #4]
 80034f0:	e7ca      	b.n	8003488 <_free_r+0x24>
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	20000088 	.word	0x20000088

080034f8 <_malloc_r>:
 80034f8:	2303      	movs	r3, #3
 80034fa:	b570      	push	{r4, r5, r6, lr}
 80034fc:	1ccd      	adds	r5, r1, #3
 80034fe:	439d      	bics	r5, r3
 8003500:	3508      	adds	r5, #8
 8003502:	0006      	movs	r6, r0
 8003504:	2d0c      	cmp	r5, #12
 8003506:	d21e      	bcs.n	8003546 <_malloc_r+0x4e>
 8003508:	250c      	movs	r5, #12
 800350a:	42a9      	cmp	r1, r5
 800350c:	d81d      	bhi.n	800354a <_malloc_r+0x52>
 800350e:	0030      	movs	r0, r6
 8003510:	f000 f888 	bl	8003624 <__malloc_lock>
 8003514:	4a25      	ldr	r2, [pc, #148]	; (80035ac <_malloc_r+0xb4>)
 8003516:	6814      	ldr	r4, [r2, #0]
 8003518:	0021      	movs	r1, r4
 800351a:	2900      	cmp	r1, #0
 800351c:	d119      	bne.n	8003552 <_malloc_r+0x5a>
 800351e:	4c24      	ldr	r4, [pc, #144]	; (80035b0 <_malloc_r+0xb8>)
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <_malloc_r+0x36>
 8003526:	0030      	movs	r0, r6
 8003528:	f000 f86a 	bl	8003600 <_sbrk_r>
 800352c:	6020      	str	r0, [r4, #0]
 800352e:	0029      	movs	r1, r5
 8003530:	0030      	movs	r0, r6
 8003532:	f000 f865 	bl	8003600 <_sbrk_r>
 8003536:	1c43      	adds	r3, r0, #1
 8003538:	d12c      	bne.n	8003594 <_malloc_r+0x9c>
 800353a:	230c      	movs	r3, #12
 800353c:	0030      	movs	r0, r6
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f000 f871 	bl	8003626 <__malloc_unlock>
 8003544:	e003      	b.n	800354e <_malloc_r+0x56>
 8003546:	2d00      	cmp	r5, #0
 8003548:	dadf      	bge.n	800350a <_malloc_r+0x12>
 800354a:	230c      	movs	r3, #12
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	2000      	movs	r0, #0
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	680b      	ldr	r3, [r1, #0]
 8003554:	1b5b      	subs	r3, r3, r5
 8003556:	d41a      	bmi.n	800358e <_malloc_r+0x96>
 8003558:	2b0b      	cmp	r3, #11
 800355a:	d903      	bls.n	8003564 <_malloc_r+0x6c>
 800355c:	600b      	str	r3, [r1, #0]
 800355e:	18cc      	adds	r4, r1, r3
 8003560:	6025      	str	r5, [r4, #0]
 8003562:	e003      	b.n	800356c <_malloc_r+0x74>
 8003564:	428c      	cmp	r4, r1
 8003566:	d10e      	bne.n	8003586 <_malloc_r+0x8e>
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	0030      	movs	r0, r6
 800356e:	f000 f85a 	bl	8003626 <__malloc_unlock>
 8003572:	0020      	movs	r0, r4
 8003574:	2207      	movs	r2, #7
 8003576:	300b      	adds	r0, #11
 8003578:	1d23      	adds	r3, r4, #4
 800357a:	4390      	bics	r0, r2
 800357c:	1ac3      	subs	r3, r0, r3
 800357e:	d0e7      	beq.n	8003550 <_malloc_r+0x58>
 8003580:	425a      	negs	r2, r3
 8003582:	50e2      	str	r2, [r4, r3]
 8003584:	e7e4      	b.n	8003550 <_malloc_r+0x58>
 8003586:	684b      	ldr	r3, [r1, #4]
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	000c      	movs	r4, r1
 800358c:	e7ee      	b.n	800356c <_malloc_r+0x74>
 800358e:	000c      	movs	r4, r1
 8003590:	6849      	ldr	r1, [r1, #4]
 8003592:	e7c2      	b.n	800351a <_malloc_r+0x22>
 8003594:	2303      	movs	r3, #3
 8003596:	1cc4      	adds	r4, r0, #3
 8003598:	439c      	bics	r4, r3
 800359a:	42a0      	cmp	r0, r4
 800359c:	d0e0      	beq.n	8003560 <_malloc_r+0x68>
 800359e:	1a21      	subs	r1, r4, r0
 80035a0:	0030      	movs	r0, r6
 80035a2:	f000 f82d 	bl	8003600 <_sbrk_r>
 80035a6:	1c43      	adds	r3, r0, #1
 80035a8:	d1da      	bne.n	8003560 <_malloc_r+0x68>
 80035aa:	e7c6      	b.n	800353a <_malloc_r+0x42>
 80035ac:	20000088 	.word	0x20000088
 80035b0:	2000008c 	.word	0x2000008c

080035b4 <_realloc_r>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	0007      	movs	r7, r0
 80035b8:	000d      	movs	r5, r1
 80035ba:	0016      	movs	r6, r2
 80035bc:	2900      	cmp	r1, #0
 80035be:	d105      	bne.n	80035cc <_realloc_r+0x18>
 80035c0:	0011      	movs	r1, r2
 80035c2:	f7ff ff99 	bl	80034f8 <_malloc_r>
 80035c6:	0004      	movs	r4, r0
 80035c8:	0020      	movs	r0, r4
 80035ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035cc:	2a00      	cmp	r2, #0
 80035ce:	d103      	bne.n	80035d8 <_realloc_r+0x24>
 80035d0:	f7ff ff48 	bl	8003464 <_free_r>
 80035d4:	0034      	movs	r4, r6
 80035d6:	e7f7      	b.n	80035c8 <_realloc_r+0x14>
 80035d8:	f000 f826 	bl	8003628 <_malloc_usable_size_r>
 80035dc:	002c      	movs	r4, r5
 80035de:	4286      	cmp	r6, r0
 80035e0:	d9f2      	bls.n	80035c8 <_realloc_r+0x14>
 80035e2:	0031      	movs	r1, r6
 80035e4:	0038      	movs	r0, r7
 80035e6:	f7ff ff87 	bl	80034f8 <_malloc_r>
 80035ea:	1e04      	subs	r4, r0, #0
 80035ec:	d0ec      	beq.n	80035c8 <_realloc_r+0x14>
 80035ee:	0029      	movs	r1, r5
 80035f0:	0032      	movs	r2, r6
 80035f2:	f7ff fbf5 	bl	8002de0 <memcpy>
 80035f6:	0029      	movs	r1, r5
 80035f8:	0038      	movs	r0, r7
 80035fa:	f7ff ff33 	bl	8003464 <_free_r>
 80035fe:	e7e3      	b.n	80035c8 <_realloc_r+0x14>

08003600 <_sbrk_r>:
 8003600:	2300      	movs	r3, #0
 8003602:	b570      	push	{r4, r5, r6, lr}
 8003604:	4c06      	ldr	r4, [pc, #24]	; (8003620 <_sbrk_r+0x20>)
 8003606:	0005      	movs	r5, r0
 8003608:	0008      	movs	r0, r1
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	f7ff fb3a 	bl	8002c84 <_sbrk>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d103      	bne.n	800361c <_sbrk_r+0x1c>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d000      	beq.n	800361c <_sbrk_r+0x1c>
 800361a:	602b      	str	r3, [r5, #0]
 800361c:	bd70      	pop	{r4, r5, r6, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	20000330 	.word	0x20000330

08003624 <__malloc_lock>:
 8003624:	4770      	bx	lr

08003626 <__malloc_unlock>:
 8003626:	4770      	bx	lr

08003628 <_malloc_usable_size_r>:
 8003628:	1f0b      	subs	r3, r1, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	1f18      	subs	r0, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	da01      	bge.n	8003636 <_malloc_usable_size_r+0xe>
 8003632:	580b      	ldr	r3, [r1, r0]
 8003634:	18c0      	adds	r0, r0, r3
 8003636:	4770      	bx	lr

08003638 <_init>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363e:	bc08      	pop	{r3}
 8003640:	469e      	mov	lr, r3
 8003642:	4770      	bx	lr

08003644 <_fini>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr
